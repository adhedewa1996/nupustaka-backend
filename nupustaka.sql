-- phpMyAdmin SQL Dump
-- version 4.4.15.10
-- https://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Aug 23, 2020 at 01:28 PM
-- Server version: 10.4.12-MariaDB
-- PHP Version: 7.3.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `nupustaka`
--

-- --------------------------------------------------------

--
-- Table structure for table `books`
--

CREATE TABLE IF NOT EXISTS `books` (
  `id` bigint(20) unsigned NOT NULL,
  `category_id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `description` text COLLATE utf8_unicode_ci  NOT NULL,
  `picture` text COLLATE utf8_unicode_ci  NOT NULL,
  `penerbit` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `author` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `files` text COLLATE utf8_unicode_ci  NOT NULL,
  `publish_at` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `halaman` varchar(10) COLLATE utf8_unicode_ci  NOT NULL,
  `isbn` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `bahasa` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `harga_sewa` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `harga_pinjam` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `harga_beli` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `qty_sewa` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `qty_pinjam` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `qty_beli` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `min_sewa` int(11) NOT NULL,
  `min_pinjam` int(11) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `books`
--

INSERT INTO `books` (`id`, `category_id`, `title`, `description`, `picture`, `penerbit`, `author`, `files`, `publish_at`, `halaman`, `isbn`, `bahasa`, `harga_sewa`, `harga_pinjam`, `harga_beli`, `qty_sewa`, `qty_pinjam`, `qty_beli`, `created_at`, `updated_at`, `min_sewa`, `min_pinjam`) VALUES
(1, 9, 'Summary of "Girl, Wash Your Face" by Rachel Hollis - Free book by QuickRead.com', 'The self-help guide for women who want to stop lying to themselves, unlock their potential, stop settling and follow their dreams.\n\n\n\nStop believing the lies about who you are so you can become who you were meant to be. In Girl, Wash Your Face, Rachel Hollis spells out all the lies that she and other women tell themselves every day. Lies like “I’ll start tomorrow,” or “I’m not good enough.” Rachel explains why these are just lies you tell yourself which prevents you from becoming the person you were meant to be. A mixture of memoir, motivational tips, and common-sense girl talk, Rachel tells you like it is. She provides the harsh truth to motivate you to unlock your potential and ultimately, stop lying to yourself.', '1_1.jpeg', 'QuickRead.com', 'Lea Schullery', 'react-native.pdf', '14 Des 2019', '22', '998787665', 'Inggris', '3', '5', '2000', '5', '5', '5', NULL, '2020-01-13 08:14:17', 0, 0),
(2, 9, 'The Zombie Chronicles - Book 1 (Free Horror)', 'Ilham Al Insani tidak menyangka sama sekali akan terjebak pada pernikahan dan hidup berumah tangga dengan seorang gadis yang bahkan tak pernah terlintas dalam angannya. Membayangkan saja tidak pernah. Apa lagi ada rasa cinta? Tidak terlintas sedikit pun olehnya. Jika rumah tangga adalah refleksi dari sebagian keimanan diri, lalu bisakah muara sakinah, mawadah, warohmah akan dapat bertepi tanpa adanya cinta yang menaungi?\r\n"Semakin lama aku membaca, semakin aku tenggelam dalam kisah hubungan yang rumit namun menyentuh, antara IIham dan Fazha. Haru, tawa, dan terkadang kesedihan ikut meliputi emosi pembacanya. Buku yang membuatku membalik lembah demi lembar karena penasaran unruk mengetahui apa yang terjadi selanjutnya. Lanjutkan, ceritanya seru banget. Gemes banget sama Fazha." (Dr. Farhan Mari Isa Zubedi Dokter, penyanyi, piblik figur, dan pemeran visual cast Ilham dalam cerita)\r\n\r\nThe Zombie Chronicles is a young adult dystopian thriller for fans of The Walking Dead and Hollowland (The Hollows, #1) by Amanda Hocking. Readers who love horror, zombies, and action-based survival stories will love this gripping YA adventure.\r\n\r\n \r\n\r\nWelcome to The Zombie Chronicles. \r\n\r\nVal - Prequel \r\nBook 1 – The Zombie Chronicles \r\nBook 2 – Race for the Cure \r\nBook 3 – Deadly City \r\nBook 4 – Poisonous Serum \r\nBook 5 – Undead Nightmare \r\nBook 6 – Revelation \r\nBook 7 – Trepidation  \r\nBook 8 – Impact  \r\n\r\nVal was bitten by a zombie and now she’s scheduled for lethal injection. Breaking all the rules, eighteen year old, Dean Walters snags an experimental serum. But it can’t be tested until Val turns into a zombie: something authorities won’t allow. Her execution is scheduled to happen before transformation is complete, giving Dean only hours to break her out. \r\n\r\nWhen their helicopter crashes straight into the heart of Zombie Land, his rescue mission becomes a fight for survival…and giving up on Val is NOT an option.\r\n\r\nThis book is a free download featuring lots of zombies, adventure, and horror during the zombie apocalypse in a post-apocalyptic world. \r\n', '1_2.jpeg', 'Dark Shadows Publishing', 'Chrissy Peebles', 'react-native.pdf', '20 Mar 2016', '264', '9978987689', 'Inggris', '5', '8', '2500', '5', '5', '5', NULL, '2020-01-13 08:14:13', 0, 0),
(3, 9, 'Summary of "15 Secrets Successful People Know About Time Management" by Kevin Kruse - Free book by QuickRead.com', 'Ilham Al Insani tidak menyangka sama sekali akan terjebak pada pernikahan dan hidup berumah tangga dengan seorang gadis yang bahkan tak pernah terlintas dalam angannya. Membayangkan saja tidak pernah. Apa lagi ada rasa cinta? Tidak terlintas sedikit pun olehnya. Jika rumah tangga adalah refleksi dari sebagian keimanan diri, lalu bisakah muara sakinah, mawadah, warohmah akan dapat bertepi tanpa adanya cinta yang menaungi?\r\n"Semakin lama aku membaca, semakin aku tenggelam dalam kisah hubungan yang rumit namun menyentuh, antara IIham dan Fazha. Haru, tawa, dan terkadang kesedihan ikut meliputi emosi pembacanya. Buku yang membuatku membalik lembah demi lembar karena penasaran unruk mengetahui apa yang terjadi selanjutnya. Lanjutkan, ceritanya seru banget. Gemes banget sama Fazha." (Dr. Farhan Mari Isa Zubedi Dokter, penyanyi, piblik figur, dan pemeran visual cast Ilham dalam cerita)\r\n\r\n', '1_3.jpeg', 'QuickRead.com', 'Chanty Romans', 'laporan.pdf', '4 Jul 2016', '240', '9989756746', 'Inggris', '3', '5', '2000', '5', '5', '5', NULL, '2020-01-13 08:21:01', 0, 0),
(4, 8, 'Summary of “Can’t Hurt Me” by David Goggins - Free book by QuickRead.com', 'How many times do you tell yourself that you’ll head to the gym tomorrow? Only to find that when tomorrow comes, you find an excuse. Imagine living life with zero excuses, what could you accomplish? Author, David Goggins, doesn’t believe in excuses and has transformed his life through the simple power of his mind. Coming from a traumatic childhood, Goggins found himself in his early twenties working as a cockroach exterminator and weighing just under 300 pounds. Despite the trauma and weight, Goggins went on to become one of the fittest people on the planet. He committed himself to join the Navy SEALs and went on to become a successful ultramarathon runner. Goggins achieved the near-impossible, and now, you can too. Find out how Goggins uses the forty-percent rule to push his body further, what it takes to run 135 miles at Badwater 135, and how Goggins continues to push himself despite several setbacks."Semakin lama aku membaca, semakin aku tenggelam dalam kisah hubungan yang rumit namun menyentuh, antara IIham dan Fazha. Haru, tawa, dan terkadang kesedihan ikut meliputi emosi pembacanya. Buku yang membuatku membalik lembah demi lembar karena penasaran unruk mengetahui apa yang terjadi selanjutnya. Lanjutkan, ceritanya seru banget. Gemes banget sama Fazha." (Dr. Farhan Mari Isa Zubedi Dokter, penyanyi, piblik figur, dan pemeran visual cast Ilham dalam cerita)\n\n', '1_5.jpeg', 'QuickRead.com', 'Lea Schullery', 'react-native.pdf', '16 Sep 2009', '88', '99786758475', 'Inggris', '3', '5', '2000', '5', '5', '5', NULL, '2020-01-13 08:27:37', 0, 0),
(5, 9, 'Summary of "The Five Love Languages" by Gary Chapman - Free book by QuickRead.com', 'The world is filled with many languages, and when we don’t speak the same one it becomes difficult to communicate. The same can be said when two people in love have different love languages. If your partner doesn’t speak your language, then they are failing to meet your emotional needs and can you leave you feeling empty and unloved. This can then lead to hatred and resentment and your marriage will suffer. Dr. Gary Chapman, however, has set out to help marriages succeed by identifying the five love languages and explaining how you can speak your partner’s language. Understanding your partner’s love language is essential for any successful marriage or relationship. Throughout The Five Love Languages, find out your primary love language, how you can speak your partner’s language, and why communication is key in any relationship.', '1_4.jpeg', 'Snowdrop Creative Partner', 'Chanty Romans', 'laporan.pdf', '8 Feb 2012', '172', '99897867857', 'Inggris', '3', '5', '2000', '5', '5', '5', NULL, '2020-01-13 08:27:41', 0, 0),
(6, 8, 'The Birth of Vengeance (Free Vampire Book Sample Chapters 1-8): Vampire Formula #1', 'For Jon Harper, adolescence has been a revolving door of bullying, torment, and isolation. Sick of constantly looking over his shoulder, Jon vows vengeance on those who have wronged him.\n\nEnter Thorn: a dark angel of destiny or Jon’s undoing? It is only with the help of this sultry new companion does Jon obtain the ability to wreak vengeance on his tormentors through the power of the vampire formula, a genetic altering drug. \n\nWith the vampire formula, the user has the ability to temporarily transform into a vampire, complete with the awesome powers afforded to the dark immortals. Jon must only choose his path: redemption or forgiveness? For a young man in the throes of young love and awakened passions, revenge is a dish best served in the dead of night.\n\nIn this all-new dark fantasy series Vampire Formula from P.A. Ross, imagine the world of vampires and forbidden love turned upside down. Will darkness and passion get the better of Jon Harper? Will the power of the night change him forever? Find out in this first installment in the series, The Birth of Vengeance!\nSink you teeth into a copy now .\n\n“The Birth of Vengeance (Vampire Formula #1)” is the first novel in a series of new vampire books.\n\nThere is a free prequel story to download, which is set a couple of years beforehand.\n\n"I Want Vengeance: Vampire Formula #0"\n\nkeywords: vampire books for teens , vampire series , supernatural , paranormal , coming of age fantasy , genetic engineering , science fiction , mashups , bad girlfriend , bullied , vampire vengeance , horror , young adult , men''s vampire book , strong female vampire , vampire books , strong female characters , department 19 , will hill, cirque du freak , darren shan, vampire hunter, action"Semakin lama aku membaca, semakin aku tenggelam dalam kisah hubungan yang rumit namun menyentuh, antara IIham dan Fazha. Haru, tawa, dan terkadang kesedihan ikut meliputi emosi pembacanya. Buku yang membuatku membalik lembah demi lembar karena penasaran unruk mengetahui apa yang terjadi selanjutnya. Lanjutkan, ceritanya seru banget. Gemes banget sama Fazha." (Dr. Farhan Mari Isa Zubedi Dokter, penyanyi, piblik figur, dan pemeran visual cast Ilham dalam cerita)\n\n', '1_6.jpeg', 'P.A. Ross', 'P.A. Ross', 'react-native.pdf', '21 Feb 2016', '348', '99789878974', 'Inggris', '3', '5', '2000', '5', '5', '5', NULL, '2020-01-13 08:27:48', 0, 0),
(7, 8, 'Silver Scorpion: Free Comic Book Special, Issue 1: Issue 1', 'SILVER SCORPION #1\nAs seen in hundreds of major media outlets around the world, such as Time, Wired, The New York Post, USA Today, Fox News, NPR, Gulf News, Asharq Al-Awsat and more, experience the origin story of the new superhero, "Silver Scorpion."\n\n"The comic book will help to establish trust and understanding between cultures, to empower young people with disabilities." ¨C President Bill Clinton, at the 2010 Clinton Global Initiative\n\nThe Silver Scorpion tells the story of a teenager, Bashir Bari, who loses his legs in a tragic accident. Consumed with anger and grief, Bashir retreats into a world of isolation, resentful of the pitiful looks and whispers of strangers. When he accidentally witnesses the murder of Tarek, a mysterious local metal smith, Bashir is unwittingly chosen as the new guardian of an ancient power that has remained hidden for centuries. With new abilities allowing him to manipulate the metal around him, Bashir must now decide how to use this gift and balance the line between justice and vengeance.', '1_7.jpeg', 'Liquid Comics', 'Ron Marz', 'react-native.pdf', '18 Des 2014', '90', '99878767874', 'Indonesia', '3', '5', '2000', '5', '5', '5', NULL, '2020-01-13 08:28:21', 0, 0),
(8, 8, 'Rumah Tangga: Jasa Publish Ebook SCP Jilid 4', 'Ilham Al Insani tidak menyangka sama sekali akan terjebak pada pernikahan dan hidup berumah tangga dengan seorang gadis yang bahkan tak pernah terlintas dalam angannya. Membayangkan saja tidak pernah. Apa lagi ada rasa cinta? Tidak terlintas sedikit pun olehnya. Jika rumah tangga adalah refleksi dari sebagian keimanan diri, lalu bisakah muara sakinah, mawadah, warohmah akan dapat bertepi tanpa adanya cinta yang menaungi?\r\n"Semakin lama aku membaca, semakin aku tenggelam dalam kisah hubungan yang rumit namun menyentuh, antara IIham dan Fazha. Haru, tawa, dan terkadang kesedihan ikut meliputi emosi pembacanya. Buku yang membuatku membalik lembah demi lembar karena penasaran unruk mengetahui apa yang terjadi selanjutnya. Lanjutkan, ceritanya seru banget. Gemes banget sama Fazha." (Dr. Farhan Mari Isa Zubedi Dokter, penyanyi, piblik figur, dan pemeran visual cast Ilham dalam cerita)\r\n\r\n', 'chanty.jpeg', 'Snowdrop Creative Partner', 'Chanty Romans', 'react-native.pdf', '1234566', '560', '99876534567', 'Indonesia', '3', '5', '2000', '5', '5', '5', NULL, '2020-01-13 08:28:27', 0, 0),
(10, 10, 'Akar Sejarah Etika Pesantren Di Nusantara', 'Islam tidak melulu berisi doktrin dan teologi, tetapi juga tentang keadaban, kebudayaan, dan peradaban. Bukti itu ditunjukkan dengan diutusnya Kanjeng Nabi Muhammad Saw. di muka bumi ini untuk memperbaiki akhlak manusia. Estafet tugas mulia itu diteruskan oleh penyebar Islam awal, terutama Walisongo dan pesantren-pesantren tradisional di Nusantara, yang di dalamnya terdiri dari empat entitas yang menyatu; kiai, santri, kurikulum, dan asrama. Keempat pilar inilah yang membentuk generasi beretika. Dalam upaya tersebut, pendidikan pesantren berpegang teguh pada ajaran Rasul, dengan menjaga tradisi sanad keilmuan yang selektif —di saat yang sama, dengan cerdiknya— mereka menanamkan Islam pada lingkungan sekitar tanpa intimidasi dan memberangus tradisi dan kearifan lokal. Hasilnya, seperti yang kita lihat di berbagai pesantren tradisional sekarang: kearifan lokal terpelihara, sementara nilai-nilai Islami mengakar dan adiluhung. Buku ini menghadirkan bukti antropologis bagaimana Islam rahmatan lil alamin bersenyawa dengan kebudayaan lokal dan hasilnya adalah Islam Nusantara.', 'sejarah1.jpg', 'IIman Real', 'Aguk Irawan M.N.', 'react-native.pdf', '23 Jan 2019', '462', ' 9786028648295', 'Indonesia', '10', '2', '200', '10', '5', '100', NULL, '2020-01-13 07:43:52', 1, 1),
(12, 10, 'Sastra dan Sejarah Indonesia', 'MENGAPA Mas Marco Kartodikromo menetang pemerintah kolonial? Apa tujuan Shamsuddin Salleh menulis roman spionase? Mengapa Tahar Ben Jelloun meminjam plot novel Pramodya Ananta Toer? Kenapa Praamoedya Ananta Toer tidak dianugerahi Hadiah Nobel? Apa idam-idaman para eksil Indonesia pasca peristiwa 1965?\r\nBuku ini menyoroti sejumlah pertanyaan seputar sastra Indonesia modern serta membahas beberapa aspek sejarah Indonesia dari abad ke-17 sampai ke-19, di Aceh, di Bima (Pulau Sumbawa), dan di Jawa.\r\nbenang merah ketiga belas karangan yang terhimpun dalam buku ini adalah pandangan seorang ahli asing yang mengamati kebudayaan Indonesia.', 'sejarah2.jpg', 'Gramedia Widiasarana Indonesia', 'Henri Chambert-loir', 'react-native.pdf', ' 26 Des 2018', '312', '9786024810900', 'Indonesia', '10', '2', '200', '10', '5', '100', NULL, '2020-01-13 07:43:48', 1, 1),
(13, 10, 'Merawat Bangsa: Sejarah Pergerakan Para Dokter Indonesia', 'SELAIN perjuangan fisik, lahirnya Republik Indonesia justru penuh dengan dinamika perjuangan ide dan gagasan. Kaum intelektual memberi sentuhan dan warna dalam proses diseminasi wawasan kebangsaan. Sejak zaman kolonial, peran ini salah satunya ternyata melekat dalam diri para dokter pribumi, yang juga disebut dokter-\r\ndokter Hindia Belanda.\r\nMelalui sekolah dokter STOVIA di Batavia dan NIAS di Surabaya, yang kelak menjadi\r\nSekolah Tinggi Kedokteran (Geneeskundige Hoogeschool), mereka tak hanya berkanjang dalam bidang kesehatan, melainkan juga masuk ke ranah pergerakan kemerdekaan. Sederet nama yang selama ini lebih dikenal sebagai pahlawan pergerakan nasional, lahir dari rahim pendidikan dokter profesional. Mereka ikut bergumul dalam masa-masa krisis pada awal lahirnya Republik ini. Siapa saja mereka; bagaimana peran dan jatuh-bangunnya perjuangan mereka dalam fase- fase kritis pembentukan bangsa Indonesia di masa kolonial dan awal kemerdekaan?\r\nBuku ini berfokus pada peran dokter-dokter Indonesia dalam pergerakan nasional di zaman kolonial. Para dokter bangsa ini bahu-membahu merawat dan memastikan Republik yang lahir dalam lingkungan revolusi fisik ini tetap hidup melalui masa-masa\r\nkrisis di awal kelahirannya. Hans Pols mendokumentasikan secara menyeluruh dan cermat peran para dokter tersebut dan mengabadikannya dalam judul yang tepat, Merawat Bangsa: Sejarah Pergerakan Para Dokter Indonesia.', 'sejarah3.jpeg', 'Penerbit Buku Kompas', 'Hans Pols', 'laporan.pdf', '26 Nov 2018', '124', '9786024125530', 'Indonesia', '10', '2', '200', '10', '5', '100', NULL, '2020-01-13 10:07:36', 1, 1);

-- --------------------------------------------------------

--
-- Table structure for table `book_categories`
--

CREATE TABLE IF NOT EXISTS `book_categories` (
  `id` bigint(20) unsigned NOT NULL,
  `book_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `book_displays`
--

CREATE TABLE IF NOT EXISTS `book_displays` (
  `id` bigint(20) unsigned NOT NULL,
  `display_id` int(11) NOT NULL,
  `book_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `book_displays`
--

INSERT INTO `book_displays` (`id`, `display_id`, `book_id`, `created_at`, `updated_at`) VALUES
(1, 1, 1, NULL, NULL),
(2, 1, 2, NULL, NULL),
(3, 1, 3, NULL, NULL),
(4, 2, 4, NULL, NULL),
(5, 2, 5, NULL, NULL),
(6, 2, 6, NULL, NULL),
(7, 2, 7, NULL, NULL),
(8, 3, 10, NULL, NULL),
(9, 3, 12, NULL, NULL),
(10, 3, 13, NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE IF NOT EXISTS `categories` (
  `id` bigint(20) unsigned NOT NULL,
  `category_name` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `category_picture` text COLLATE utf8_unicode_ci  NOT NULL,
  `category_slug` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' ON UPDATE current_timestamp(),
  `deleted_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `category_name`, `category_picture`, `category_slug`, `parent_id`, `created_at`, `updated_at`, `deleted_at`) VALUES
(1, 'Buku Guru', '', 'buku_guru', NULL, '2019-12-18 15:42:01', '2019-12-18 20:42:13', NULL),
(2, 'Buku Siswa', '', 'buku_siswa', NULL, '2019-12-18 15:42:01', '2019-12-18 20:42:13', NULL),
(3, 'Buku Non Pelajaran', '', 'buku_non_pelajaran', 1, '2019-12-19 00:00:00', '0000-00-00 00:00:00', NULL),
(4, 'Pelajaran MA', '', 'pelajaran_ma', 1, '0000-00-00 00:00:00', '0000-00-00 00:00:00', NULL),
(5, 'Pelajaran MAK', '', 'pelajaran_mak', 1, '2019-12-20 00:00:00', '0000-00-00 00:00:00', NULL),
(6, 'Pelajaran MI', '', 'pelajaran_mi', 1, '2019-12-20 00:00:00', '0000-00-00 00:00:00', NULL),
(7, 'Pelajaran MTS', '', 'pelajaran_mts', 1, '2019-12-20 00:00:00', '0000-00-00 00:00:00', NULL),
(8, 'Pelajaran SD', '', 'pelajaran_sd', 2, '2019-12-20 00:00:00', '2019-12-22 18:23:50', NULL),
(9, 'Kelas 1', '', 'kelas_1', 8, '2019-12-20 00:00:00', '0000-00-00 00:00:00', NULL),
(10, 'Kelas 2', '', 'kelas_2', 8, '2019-12-20 00:00:00', '0000-00-00 00:00:00', NULL),
(11, 'Kelas 3', '', 'kelas_3', 8, '2019-12-20 00:00:00', '2019-12-21 20:42:57', NULL),
(12, 'Kelas 1', '', 'kelas_1', 7, '2019-12-22 00:00:00', '0000-00-00 00:00:00', NULL),
(13, 'Buku Umum', '', 'buku_umum', NULL, '2019-12-18 15:42:01', '2019-12-18 20:42:13', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `chats`
--

CREATE TABLE IF NOT EXISTS `chats` (
  `id` bigint(20) unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `chats`
--

INSERT INTO `chats` (`id`, `created_at`, `updated_at`) VALUES
(1, '2020-01-14 02:39:32', '2020-01-14 02:39:32'),
(2, '2020-01-14 02:46:10', '2020-01-14 02:46:10'),
(3, '2020-01-14 02:47:11', '2020-01-14 02:47:11');

-- --------------------------------------------------------

--
-- Table structure for table `chat_messages`
--

CREATE TABLE IF NOT EXISTS `chat_messages` (
  `id` bigint(20) unsigned NOT NULL,
  `text` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `chat_id` bigint(20) unsigned NOT NULL,
  `user_id` bigint(20) unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `chat_messages`
--

INSERT INTO `chat_messages` (`id`, `text`, `chat_id`, `user_id`, `created_at`, `updated_at`) VALUES
(1, 'Hello World', 1, 1, '2020-01-15 00:28:26', '2020-01-15 00:28:26'),
(2, 'Hello World', 1, 1, '2020-01-15 00:29:47', '2020-01-15 00:29:47'),
(3, 'Hello World', 1, 1, '2020-01-15 00:29:54', '2020-01-15 00:29:54');

-- --------------------------------------------------------

--
-- Table structure for table `chat_user`
--

CREATE TABLE IF NOT EXISTS `chat_user` (
  `chat_id` bigint(20) unsigned NOT NULL,
  `user_id` bigint(20) unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `displays`
--

CREATE TABLE IF NOT EXISTS `displays` (
  `id` bigint(20) unsigned NOT NULL,
  `title_display` varchar(100) COLLATE utf8_unicode_ci  NOT NULL,
  `subtitle_display` varchar(100) COLLATE utf8_unicode_ci  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `displays`
--

INSERT INTO `displays` (`id`, `title_display`, `subtitle_display`, `created_at`, `updated_at`) VALUES
(1, 'Bisnis & Investasi', 'Rekomendasi buku untuk anda', NULL, NULL),
(2, 'Koleksi Fiksi dan Literasi', 'Rekomendasi buku cerita untuk anda', NULL, NULL),
(3, 'Sejarah Sepanjang Masa', 'Buku sejarah nasional dan internasional', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `failed_jobs`
--

CREATE TABLE IF NOT EXISTS `failed_jobs` (
  `id` bigint(20) unsigned NOT NULL,
  `connection` text COLLATE utf8_unicode_ci  NOT NULL,
  `queue` text COLLATE utf8_unicode_ci  NOT NULL,
  `payload` longtext COLLATE utf8_unicode_ci  NOT NULL,
  `exception` longtext COLLATE utf8_unicode_ci  NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `filedetails`
--

CREATE TABLE IF NOT EXISTS `filedetails` (
  `id` bigint(20) unsigned NOT NULL,
  `book_id` int(11) NOT NULL,
  `producer` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `creationdate` datetime NOT NULL,
  `pages` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `filepages`
--

CREATE TABLE IF NOT EXISTS `filepages` (
  `id` bigint(20) unsigned NOT NULL,
  `book_id` int(11) NOT NULL,
  `page_number` int(11) NOT NULL,
  `content` text COLLATE utf8_unicode_ci  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=896 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `filepages`
--

INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(1, 1, 1, 'react-native #react- native ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(2, 1, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(3, 1, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(4, 1, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(5, 1, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(6, 1, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(7, 1, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(8, 1, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(9, 1, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(10, 1, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(11, 1, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(12, 1, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(13, 1, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(14, 1, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(15, 1, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(16, 1, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(17, 1, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(18, 1, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(19, 1, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(20, 1, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(21, 1, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(22, 1, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(23, 1, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(24, 1, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(25, 1, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(26, 1, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(27, 1, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(28, 1, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(29, 1, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(30, 1, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(31, 1, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(32, 1, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(33, 1, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(34, 1, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(35, 1, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(36, 1, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(37, 1, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(38, 1, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(39, 1, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(40, 1, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(41, 1, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(42, 1, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(43, 1, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(44, 1, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(45, 1, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(46, 1, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(47, 1, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(48, 1, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(49, 1, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(50, 1, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(51, 1, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(52, 1, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(53, 1, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(54, 1, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(55, 1, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(56, 1, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(57, 1, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(58, 1, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(59, 1, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(60, 1, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(61, 1, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:09', '2020-01-14 02:20:09'),
(62, 1, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(63, 1, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(64, 1, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(65, 1, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(66, 1, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(67, 1, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(68, 1, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(69, 1, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(70, 1, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(71, 1, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(72, 1, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(73, 1, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(74, 1, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(75, 1, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(76, 1, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(77, 1, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(78, 1, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(79, 1, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(80, 1, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(81, 1, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(82, 1, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(83, 1, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(84, 1, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(85, 1, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(86, 1, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(87, 1, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(88, 1, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(89, 1, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(90, 1, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(91, 1, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(92, 1, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(93, 1, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(94, 1, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(95, 1, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(96, 1, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(97, 1, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(98, 1, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(99, 1, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(100, 1, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(101, 1, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:10', '2020-01-14 02:20:10'),
(102, 2, 1, 'react-native #react- native ', '2020-01-14 02:20:11', '2020-01-14 02:20:11');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(103, 2, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(104, 2, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(105, 2, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(106, 2, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(107, 2, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(108, 2, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(109, 2, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(110, 2, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(111, 2, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(112, 2, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(113, 2, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(114, 2, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(115, 2, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(116, 2, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(117, 2, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(118, 2, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(119, 2, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(120, 2, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(121, 2, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(122, 2, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(123, 2, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(124, 2, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(125, 2, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(126, 2, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(127, 2, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(128, 2, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(129, 2, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(130, 2, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(131, 2, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(132, 2, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(133, 2, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(134, 2, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(135, 2, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(136, 2, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(137, 2, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(138, 2, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(139, 2, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(140, 2, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(141, 2, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(142, 2, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(143, 2, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(144, 2, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(145, 2, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(146, 2, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(147, 2, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(148, 2, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(149, 2, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(150, 2, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(151, 2, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(152, 2, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(153, 2, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(154, 2, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(155, 2, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(156, 2, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(157, 2, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(158, 2, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(159, 2, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(160, 2, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(161, 2, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(162, 2, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(163, 2, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(164, 2, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(165, 2, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(166, 2, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(167, 2, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:11', '2020-01-14 02:20:11'),
(168, 2, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(169, 2, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(170, 2, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(171, 2, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(172, 2, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(173, 2, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(174, 2, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(175, 2, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(176, 2, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(177, 2, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(178, 2, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(179, 2, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(180, 2, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(181, 2, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(182, 2, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(183, 2, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(184, 2, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(185, 2, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(186, 2, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(187, 2, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(188, 2, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(189, 2, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(190, 2, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(191, 2, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(192, 2, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(193, 2, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(194, 2, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(195, 2, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(196, 2, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(197, 2, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(198, 2, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(199, 2, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(200, 2, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(201, 2, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(202, 2, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(203, 3, 1, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net LAPORAN PENELITIAN PENDAPAT MAHASISWA FAKULTAS ILMU SOSIAL DAN EKONOMI TENTANG ETIKA PERGAULAN MAHASISWA DI KAMPUS Oleh: Anang Priyanto FAKULTAS ILMU SOSIAL DAN EKONOMI UNIVERSIYAS NEGERI YOGYAKARTA 2010 PENELITIAN INI DIBIAYAI DENGAN DANA DIPA BLU UNIVERSITAS NEGERI YOGYAKARTA TAHUN 2010 SK DEKAN FISE UNY NOMOR: 137 ', '2020-01-14 02:20:12', '2020-01-14 02:20:12');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(204, 3, 2, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net TAHUN 2010, TANGGAL 19 APRIL 2010 SURAT PERJANJIAN PELAKSANAAN PENELITIAN NOMOR: 1165/H.34.14/PL/2010, TANGGAL 26 APRIL 2010   ABSTRAK PENDAPAT MAHASISWA FAKULTAS ILMU SOSIAL DAN EKONOMI TENTANG ETIKA PERGAULAN MAHASISWA DI KAMPUS Oleh: Anang Priyanto Penelitian  ini  bertujuan  untuk  mengetahui  pendapat  mahasiswa  tentang  etika pergaulan  mahasiswa  di kampus yang  sesuai dengan  moral bangsa dan  pergaulan  generasi muda  serta  bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan  mahasiswa  di kampus dilaksanakan sesuai dengan moral bangsa. Penelitian  ini  merupakan  penelitian  deskriptif  yang  mengidentifikasikan  dan mendeskripsikan  kecenderungan-kecenderungan  pendapat  mahasiswa  tentang  etika pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  kehidupan  universitas  khususnya Universitas Negeri Yogyakarta, dan responden penelitian ini adalah mahasiswa FISE UNY dengan  teknik  random  sampling  10%  dari  jumlah  populasi  sebanyak  +  480  orang mahasiswa.  Instrumen  penelitian  ini  menggunakan  angket  modifikasi  tertutup  dan  terbuka dan divalidasi secara construct validity, serta analisis datanya dengan analisis deskriptif.  Hasil  penelitian  diperoleh  bahwa  pendapat  mahasiswa  FISE  UNY  tentang  etika pergaulan  mahasiswa  di  kampus  merupakan  perilaku  yang  baik  di  lingkungan  kampus sesuai  kebiasaan  hidup  masyarakat  Indonesia  dalam  berhubungan  dengan  sesama mahasiswa  maupun  dalam  berhubungan  antara  mahasiswa  dengan  dosen  dan  karyawan kampus.  Perilaku  yang  baik  di  kampus  ini  menurut  mahasiswa,  akan  berjalan  dengan  baik apabila ada peraturan yang jelas yang mengaturnya serta penerapan sanksi yang tegas bagi yang  melanggarnya,  dan  peraturan  akademik  yang  sudah  ada  harus  dilaksanakan  dengan tegas.    Menurut  mahasiswa  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan identitas  moral bangsa dilaksanakan  dengan memperhatikan etika  pergaulan  di  masyakarat yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan  universitas  yang  telah disepakati  oleh  mahasiswa  dengan  tidak  memberatkan  mahasiswa  dan  berlaku  bagi komunitas  kampus,  baik  mahasiswa  maupun  dosen  dan  karyawan,  serta  pelaksanaannya dengan tidak dipaksakan tetapi dengan penyadaran melalui proses yang berlangsung secara bertahap. ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(205, 3, 3, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net KATA PENGANTAR Puji  syukur  kami  panjatkan  kehadiran  Tuhan  Yang  Maha  Esa  atas  karunianya sehingga  dapat  tersusunlah  laporan  penelitian  ini  dengan  baik.  Kami  menyadari  laporan penelitian  ini  jauh  dari  sempurna  dan  tanpa  bantuan  dari  berbagai  pihak  takkan  mungkin terselesaikan.  Oleh  karenanya  sudah  sepantasnyalah  jika  pada  kesempatan  ini  kami sampaikan ucapan terima kasih kepada: 1. Bapak  Sardiman  A.M.MPd  selaku  Dekan  FISE  UNY  yang  telah  membantu  dalam penyediaan dana penelitian ini; 2. Bapak  dan  Ibu  Kaprodi  dilingkungan  FISE  UNY  yang  telah  mengijinkan  peneliti menyebarluaskan angket penelitian ini kepada para mahasiswanya; 3. Para  mahasiswa  FISE  UNY  sebagai  responden  dari  semua  program  studi  yang  telah meluangkan waktu untuk mengisi angket penelitian ini; 4. Semua  pihak  yang  tidak  bisa  disebutkan  satu  persatu  yang  telah  membantu  dalam pelaksanaan penelitian ini. Semoga laporan penelitian ini bermanfaat bagi para pembacanya.                                                                                                   Yogyakarta,      Nopember 2010                                                                                                      Penyusun ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(206, 3, 4, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net DATAR ISI Halaman Judul  ................................................................................  ...... i Lembar Pengesahan ..........................................................................  ......  ii Abstrak  ........................................................................................................  iii Kata Pengantar ..................................................................................  ........  iv Daftar Isi   ....................................................................................................  v BAB I   PENDAHULUAN ...............................................................  ...... 1 A. Latar Belakang Masalah  ...................................................  .......  1 B. Rumusan Masalah   ...........................................................  .......  2 C. Tujuan Penelitian  .............................................................  ....... 2 D. Manaat Penelitian   ...........................................................  .......  3 BAB II   KAJIAN TEORI  ...............................................................  .......  4 A. Pendapat  .........................................................................  ....... 4 B. Etika Pergaulan  ...............................................................  ....... 4 C. Perilaku Pergaulan di Kampus  .................................................... 5 ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(207, 3, 5, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net D. Pancasila sebagai Identitas Moral Bangsa .................................... 7 BAB III METODE PENELITIAN   .................................................  ......... 9 A. Jenis Penelitian   ...............................................................  ........ 9 B. Populasi   ..........................................................................  ........ 9 C. Teknik Sampling   ............................................................  ........  9 D. Instrumen Penelitian  ................................................................... 9 E. Validasi Penelitian   ......................................................................  9 F. Analisis Data   .............................................................................. 10 BAB IV  HASIL PENELITIAN DAN PEMBAHASAN  ............................ 11 A. Hasil Penelitian   .......................................................................... 11 B. Pembahasan   ................................................................................  18 BAB V  PENUTUP  .....................................................................................  22 A. Kesimpulan  ................................................................................. 22 B. Saran  ........................................................................................... 22 DATAR PUSTAKA ..................................................................................... 23 LAMPIRAN ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(208, 3, 6, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB I PENDAHULUAN A. Latar Belakang Masalah Akhir-akhir  ini  banyak  isu-isu  yang  berkembang  mengenai  etika  pergaulan mahasiswa  di  kampus  terkait  dengan  persoalan  sopan  santun,  tata  krama,  etika dalam  berkomunikasi  serta  tata  cara  berpakaian  yang  pantas  dalam  pergaulan  di lingkungan kampus. Isu tersebut telah menjadi sorotan banyak pihak terutama para pimpinan  universitas  khususnya  pimpinan  Universitas  Negeri  Yogyakarta  (UNY), baik  di  tingkat  pimpinan  pusat  (kantor  rektorat)  maupun  di  tingkat  fakultas. Bahkan  isu  yang  berkembang  telah  menyangkut  pihak  luar  yang  ikut  berkomentar menanggapai tata cara berpakaian mahasiswa UNY yang dianggapnya sangat tidak tepat  dilakukan  oleh  mahasiswa  UNY  yang  nota  bene  sebagai  mahasiswa universitas penghasil calon-calon guru. Isue ini menjadi keprihatinan para pimpinan universitas  dan  ditangkap  mentah-mentah  tanpa  melakukan  konfirmasi  kepada mahasiswa atau melakukan pengamatan langsung atas kebenaran isu tersebut. Para dosenpun  banyak  yang  merasa  gerah  dan  jengkel  jika  isu  tersebut  benar  adanya. Mereka  merasa  universitas  ini  telah  ternodai  oleh  segelintir  mahasiswa  yang dikuatirkan  akan  merusak  citra  UNY  sebagai  universitas  penghasil  calon  guru  dan merusak  etika  pergaulan  bangsa  Indonesia  yang  memiliki  karakter  bangsa  yang santun  dan  menjunjung  tinggi  moral  bangsa.  Jika  tidak  segera  ditangani  akan dianggap  sebagai  sesuatu  yang  wajar  karena  perkembangan  mode  dan  jaman. Sebagai  komunitas  masyarakat  ilmiah  seharusnya  universitas  menjadi  contoh tauladan  bagi  moral  bangsa  sekaligus  pelopor  penjaga  etika  pergaulan  bangsa Indonesia.  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(209, 3, 7, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net Terlepas  dari  tanggapan  para  pimpinan  universitas  atas  isu  etika  pergaulan mahasiswa  di  kampus,  yang  jelas  UNY  telah  mengeluarkan  sebuah  peraturan rektor  tentang  Etika  dan  Tata  Tertib  Pergaulan  Mahasiswa  di  Kampus.(Peraturan Rektor  Nomor  03  Tahun  2009).  Peraturan  rektor  ini  telah  banyak  memuat  segala hal  tentang  etika  pergaulan  mahasiswa  di  kampus  yang  telah  disepakati  bersama antara  para  pimpinan  universitas  dengan  perwakilan  mahasiswa  UNY.  Bahkan dalam  peraturan  rektor  tersebut  telah  disepakati  pula  pencantuman  sanksi  bagi yang  melanggar  etika  pergaulan  di  kampus  yang  dikriteriakan  bersama  itu.( lihat Pasal  12  –  14  Peraturan  Rektor  No.03  Th  2009).  Seharusnya  sebagai  mahasiswa UNY  khususnya  mahasiswa  FISE  UNY  yang  berkecimpung  di  bidang  sosial tentunya  tidaklah  asing  lagi  berhadapan  dengan  persoalan-persoalan  etika,  moral bahkan  komunikasi  personal  serta  persoalan-persoalan  tata  krama  pergaulan  di masyarakat  yang  sesuai  dengan  identitas  moral  bangsa  Indonesia.  Mahasiswa sebagai  generasi  muda  juga  memiliki  idealisme  pergaulan  yang  sesuai  dengan dunianya  namun  juga  tidak  terlepas  dari  koridor  status  bangsa  Indonesia  yang memiliki  identitas  moral  bangsa  yang  luhur.  Oleh  karenanya  bagaimanapun berkembangnya pergaulan generasi muda harus selalu mencirikan identitas nasional sebagai  bangsa  Indonesia  yang  miliki  identitas  moral  yang  luhur  dalam  wadah negara kesatuan Republik Indonesia yang berasaskan Pancasila. Bilamana  isu-isu  yang  berkembang  di  lingkungan  kampus  UNY  sebagaimana diuraikan  di  atas  benar,  berarti  tidak  semua  mahasiswa  sependapat  dengan ketentuan  etika  pergaulan  mahasiswa  di  kampus  sebagaimana  diatur  dalam peraturan rektor di atas.  B. Rumusan Masalah Berdasarkan  latar  belakang  masalah  di  atas  dapat  dirumuskan  masalah  sebagai berikut: a. Bagaimana  pendapat  mahasiswa tentang etika pergaulan  mahasiswa di kampus yang sesuai dengan moral bangsa dan pergaulan generasi muda? ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(210, 3, 8, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net b. Bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan  mahasiswa  di kampus dilaksanakan dengan baik sesuai dengan identitas moral bangsa? C. Tujuan Penelitian Tujuan penelitian ini adalah: a. Mengetahui pendapat mahasiswa tentang etika pergaulan mahasiswa di kampus yang sesuai dengan moral bangsa dan pergaulan generasi muda. b. Mengetahui  bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan mahasiswa di kampus dilaksanakan sesuai dengan moral bangsa. D. Manfaat Penelitian Manfaat penelitian ini adalah: a. Sebagai  bahan  pengambilan  kebijakan  pimpinan  UNY  untuk  melakukan evaluasi  etika  pergaulan  mahasiswa  di  kampus  yang  tepat,  serta  untuk mengantisipasi  dan  melestarikan  identitas  moral  bangsa  yang  sesuai  dengan pergaulan  mahasiswa  serta  ciri  khas  UNY  sebagai  lembaga  penghasil  calon guru. b. Sebagai bahan kajian pembentukan karakter bangsa yang  sesuai perkembangan pergaulan generasi muda.  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(211, 3, 9, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB II KAJIAN TEORI A. Pendapat Kamus  Besar  Bahasa  Indonesia  menyatakan  bahwa  pendapat  adalah  (1) pikiran, anggapan, (2) buah pikiran atau perkiraan tentang suatu hal (seperti orang, peristiwa).(Kamus  Besar  Bahasa  Indonesia,  2001).  Dengan  demikian  yang dimaksud  pendapat  mahasiswa  adalah  (1)  pikiran,  anggapan  mahasiswa,  (2)  buah pikiran  atau  perkiraan  tentang  sesuatu  hal  dari  mahasiswa.  Jadi  pendapat mahasiswa tentang etika pergaulan mahasiswa di kampus adalah pikiran, anggapan mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  atau  buah  pikiran  atau perkiraan dari mahasiswa tentang etika pergaulan mahasiswa di kampus.  B. Etika Pergaulan Etika  berasal  dari  bahasa  Yunani  kuno ethos ,  yang  dalam  bentuk  tunggalnya mempunyai  arti:  tempat  tinggal  yang  biasa,  padang  rumput,  kandang,  kebiasaan, adat,  akhlak,  watak,  perasaan,  sikap,  cara  berpikir.  Dalam  bentuk  jamaknya,  etika mempunyai arti adat kebiasaan. (K. Bertens, 2005: 4). Dalam Kamus Besar Bahasa Indonesia  (2001)  etika  diartikan  ilmu  tentang  apa  yang  baik  dan  apa  yang  buruk dan  tentang  hak  dan  kewajiban  moral  (akhlak).  Sedangkan  etiket  diartikan  tata cara  (adat  sopan  santun  dan  sebagainya)  di  masyarakat  beradab  dalam  memelihara ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(212, 3, 10, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net hubungan  baik  antara  sesama  manusianya.  Etis  adalah  (1)  berhubungan  (sesuai) dengan etika, (2) sesuai dengan asas perilaku yang disepakati secara umum.  Etika  pergaulan  berasal  dari  kata  etika  dan  pergaulan.  Pengertian  etika  telah diuraikan  di  atas,  sedangkan  arti  pergaulan  menurut  Kamus  Besar  Bahasa Indonesia  (  2001)  adalah  hal  pertemanan.  Oleh  karenanya  etika  pergaulan  dapat diartikan  sebagai  adat  kebiasaan  tentang  perilaku  yang  disepakati  bersama  sebagai sesuatu  yang  baik  dalam  hal  pertemanan.  Maksudnya  tidak  lain  adalah  kebiasaan yang  baik  dalam  menjalin  hubungan  sebagai  teman.  Etika  pergaulan  sebagai  suatu kebiasaan  memiliki  sifat  khusus,  baik  dalam  bentuk  maupun  keluasannya.  Etika pergaulan  sangat  berhubungan  dengan  perilaku  individu  dalam  menjalin  hubungan dengan  individu  lain  di  masyarakat,  dan  perilaku  tersebut  tidaklah  bersifat universal,  karena  memiliki  kekhususan  yang  menjadi  ciri  masyarakat  yang bersangkutan.  Meskipun  demikian  tidaklah  semua  perilaku  bersifat  kedaerahan, tetapi  ada  pula  perilaku  yang  bersifat  universal  sebagai  ciri  manusia  yang bermartabat,  seperti  perilaku  menghargai  hak  asasi  manusia  dengan  tidak  berbuat kekerasan  kepada  sesama  manusia.  Skinner  sebagaimana  dikutip  oleh  Bimo Walgito  (1990:  17)  membagi  perilaku  menjadi  perilaku  yang  alami  ( innate behavior ) dan perilaku operan ( operant behavior ). Perilaku yang alami merupakan perilaku  refleksif  yang  dibawa  oleh  organisme  sejak  lahir,  yang  terjadi  sebagai refleksi  secara  spontan  terhadap  stimulus  yang  mengenai  organisme  yang bersangkutan.  Perilaku  ini  tterjadi  secara  otomatis  tidak  diperintah  oleh  pusat susunan  syaraf  atau  otak.  Sedangkan  perilaku  operan  dikendalikan  oleh  pusat kesadaran  atau  otak,  yang  sering  juga  disebut  sebagai  perilaku  psikologis.  Pada manusia  perilaku  psikologis  merupakan perilaku yang paling  dominan atau dengan kata  lain  perilaku  manusia  merupakan  perilaku  yang  dibentuk,  perilaku  yang diperoleh, perilaku yang dipelajari melalui proses belajar. Oleh  karenanya  etika  pergaulan  mahasiswa  di  kampus  dapat  diartikan  sebagai adat kebiasaan perilaku yang baik yang disepekati bersama dalam berinteraksi antar mahasiswa  di  kampus  sebagai  aktualisasi  hak  dan  kewajiban  moral  dalam ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(213, 3, 11, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net masyarakat  yang  beradab.  Ukuran  masyarakat  yang  beradab  tentunya  masyarakat yang menjunjung tinggi nilai-nilai asas kerohanian bangsa yakni Pancasila.  C. Perilaku Pergaulan di Kampus Pergaulan  di  kampus  sangat  berhubungan  dengan  perilaku  individu  sebagai bagian  masyarakat  kampus.  Perilaku  individu  tersebut  amatlah  beragam,  namun keberagaman  itu  tentunya  dalam  batas-batas  yang  sesuai  dengan  norma  moral masyarakat  kampus  yang  sudah  ditetapkan  dalam  kebiasaan  kampus.  Perilaku mahasiswa  selaku  individu  manusia  sebagian  besar  perilakunya  berupa  perilaku yang dibentuk. Bimo Walgito (1990: 18 – 19) mengemukakan bahwa pembentukan perilaku dapat dilakukan dengan berbagai cara, antara lain: a. Pembentukan perilaku dengan kondisioning atau kebiasaan,  yakni  dengan cara membiasakan diri untuk berperilaku sesuai yang diharapkan; b. Pembentukan  perilaku  dengan  pengertian,  yakni  dengan  cara  yang  sesuai dengan teori belajar kognitif, bahwa belajar dengan disertai adanya pengertian. Misalnya  contoh  bahwa  naik  motor  harus  pakai  helm,  karena  helm  untuk keamanan diri.    c. Pembentukan  perilaku  dengan  menggunakan  model  atau  contoh,  yakni pembentukan  perilaku  dengan  cara  yang  didasarkan  pada  model  atau  contoh. Misalnya  perilaku  pemimpin  yang  dijadikan  panutan  atau  contoh  bagi  yang dipimpinnya. Dengan  demikian  dari  berbagai  cara  pembentukan  perilaku  dapat  diketahui perilaku-perilaku  yang  berhubungan  dengan  pergaulan  mahasiswa  di  kampus. Perilaku-perilaku  tersebut  sangatlah  beragam  sesuai  dengan  macamnya  pergaulan yang  dilakukan  mahasiswa  di  kampus.  Pergaulan  mahasiswa  di  kampus berhubungan  dengan  perilaku  komunikasi  antara  mahasiswa  dengan  dosen,  antara mahasiswa  dengan  mahasiswa  dan  antara  mahasiswa  dengan  pegawai  universitas, Dengan  perilaku  yang  ditampilkan  menjadikan  seseorang  akan  mendapat  penilaian di  mata  orang  lain  dan  masyarakat.  Penilaian  itu  mengarah  pada  hal-hal  yang  baik maupun  yang  buruk  diukur  dari  etika  hidup  yang  disepakati  bersama  dalam ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(214, 3, 12, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net masyarakat  yang  bersangkutan.  Perilaku  komunikasi  yang  dapat  menimbulkan penilaian  biasanya  menyangkut  perilaku  mengenai  cara-cara  berbicara,  bertegur sapa,  dan  berpenampilan  di  lingkungan  di  mana  perilaku  itu  diaktualisasikan. Perilaku baik dan buruk  atau  tindakan  baik  dan  buruk penilaiannya hanyalah  dapat dilakukan  oleh  seseorang  ataupun  masyarakat.  Apabila  tindakan  yang  dinilai  baik dan  buruk  itu  dilakukan  dengan  sadar  atas  pilihan,  artinya  dengan  sengaja,  maka penilaian terhadapnya disebut penilaian etis atau moral. (Poedjawiyatna, 2003: 14). Perilaku  pergaulan  di  kampus  merupakan  perlaku  yang  berbeda  dengan perilaku  di  masyarakat  umum.  Lingkungan  kampus  merupakan  lingkungan masyarakat  ilmiah,  yang  dalam  berperilaku  selalu  dikaitkan  pada  hal-hal  ilmiah akademik.  Segala  perilaku  anggota  masyarakat  kampus  terikat  pada  koridor  etika pergaulan  di  kampus  yang  telah  menjadi  patokan  bagi  semua  warga  kampus. Lebih-lebih jika kampus itu sebagai pencetak calon-calon guru bahwa guru di mata masyarakat  dianggap  sebagai  profesi  yang  paling  mulia  dan  dijadikan  sebagai panutan  dalam  berperilaku  di  masyarakat.  Tentunya  kampus  yang  demikian  juga harus  menjadi  panutan  dan  contoh  berperilaku  yang  baik  bagi  anggota  masyarakat umum.  Namun  demikian  anggota  masyarakat  kampus  juga  sebagian  besar  sebagai bagian  atau  menjadi  anggota  dari  masyarakat  umum,  sehingga  segala  perilakunya sudah  pasti  juga  terbawa  dari  perilaku  sebagaimana  hidup  di  masyarakat.  Hal seperti  ini  sangatlah  berpengaruh  dalam  rutinitas  yang  terjadi  sehari-hari  di lingkungan  kampus.  Bila  masyarakat  kampus  sebagai  masyarakat  khusus seharusnya juga memiliki norma-norma pergaulan yang khas. D. Pancasila sebagai Identitas Moral Bangsa Pancasila  sebagai  ideologi  negara  Republik  Indonesia  mempunyai  kedudukan sebagai ideologi terbuka, maksudnya adalah bahwa nilai-nilai dan cita-citanya tidak dipaksakan dari luar melainkan digali dari harta kekayaan rohani, moral dan budaya masyarakat  Indonesia.  Oleh  karenanya  Pancasila  dapat  dikatakan  sebagai kepribadian  bangsa  Indonesia,  yakni  memberikan  corak  yang  khas  kepada  bangsa Indonesia  dan  tak  dapat  dipisahkan  dengan  bangsa  Indonesia  serta  merupakan  ciri ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(215, 3, 13, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net yang  melekat  pada  bangsa  Indonesia  yang  membedakan  dengan  bangsa  lain. Dengan  demikian  sebagai  kepribadian  bangsa  Indonesia,  Pancasila  dapat  pula dikatakan  merupakan  identitas  moral  bangsa  Indonesia.  Moral  dapat  diartikan merupakan ajaran-ajaran ataupun wejangan-wejangan, patokan-patokan, kumpulan peraturan,  baik  lisan  maupun  tertulis  tentang  bagaimana  manusia  hidup  dan bertindak  agar  menjadi  manusia  yang  baik  (Kaelan,  2008.  93).  Pancasila  sebagai moral  bangsa  dapat  diartikan  bahwa  Pancasila  menjadi  ajaran-ajaran, patokan-patokan  bagaimana  manusia  hidup  dan  bertindak  agar  menjadi  manusia yang baik. Oleh karenanya Pancasila sebagai identitas moral bangsa dapat diartikan bahwa  Pancasila  merupakan  ciri  patokan  atau  pedoman  hidup  yang  baik  bangsa Indonesia.  ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(216, 3, 14, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB III METODE PENELITIAN A. Jenis Penelitian Penelitian  ini  merupakan  penelitian  deskriptif  dikarenakan  hasil  penelitian  ini hanyalah  mengidentifikasikan  dan  mendeskripsikan  kecenderungan-kecenderungan pendapat  mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan kehidupan universitas khususnya Universitas Negeri Yogyakarta. B. Populasi Populasi  penelitian  ini  adalah  seluruh  mahasiswa  Fakultas  Ilmu  Sosial  dan  Ekonomi Universitas Negeri Yogyakarta yang terdaftar sebagai mahasiswa hingga tahun 2010. C. Teknik Sampling Teknik  sampling  yang  digunakan  dalam  penelitian  ini  adalah random  sampling. Setiap  mahasiswa  program  studi  yang  terdaftar  di  lingkungan  FISE  diambil  sebagai sampel secara acak dengan jumlah minimal 10% dari jumlah mahasiswa terdaftar di FISE UNY. Hal ini didasarkan pada keterbatasan dana dan waktu penelitian yang ditentukan. D. Instrumen Penelitian Instrumen  penelitian  ini  berupa  angket,  dalam  bentuk  baik  tertutup  berupa  pilihan pendapat  tentang  etika  pergaulan  di  kampus  maupun  angket  terbuka  yang  berupa  isian jawaban  dari  responden  atas  pertanyaan-pertanyaan  yang  terkait  dengan  masalah penelitian. E. Validasi Instrumen ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(217, 3, 15, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net Validasi instrumen menggunakan konstruk validasi dengan merujuk pada kajian teori yang relevan dengan permasalahan penelitian. F. Analisis Data Analisis data penelitian ini mengunakan analisis statistik deskriptif berupa identifikasi prosentase  kecenderungan-kecenderungan  pendapat  mahasiswa  tentang  etika  pergaulan mahasiswa  di  kampus  dan  analisis  kualitatif  berupa  uraian  pendapat  mahasiswa  tentang bagaimana  etika  pergaulan  mahasiswa  di  kampus  dilaksanakan  dengan  baik  sesuai dengan identitas moral bangsa. ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(218, 3, 16, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB IV HASIL PENELITIAN DAN PEMBAHASAN A. Hasil Penelitian Penelitian  ini  dilakukan  pada  bulan  Juni  sampai  dengan  Agustus  2010  terhadap mahasiswa  yang  terdaftar  di  Fakultas  Ilmu  Sosial  dan  Ekonomi  (FISE)  Universitas Negeri  Yogyakarta  (UNY)  selaku  populasi  yang  berjumlah  4832  orang,  dengan responden yang sesuai dengan teknik sampling yang digunakan berjumlah 485 orang.  Data  penelitian  ini  diperoleh  dari  angket  (quesioner)  yang  diberikan  kepada responden  berupa  angket  gabungan  terbuka  dan  tertutup  untuk  menjaring  data  tentang pandapat mahasiswa tentang  etika pergaulan mahasiswa di  kampus. Dari instrumen yang diberikan  kepada  responden  sebanyak  480  angket  dan  diterima  kembali  kepada  peneliti berjumlah 392  angket.  Tidak kembalinya  jumlah  angket  sesuai dengan jumlah yang telah diedarkan  kepada  responden  ada  beberapa  kemungkinan  yang  menurut  peneliti  menjadi kendalanya  yaitu,  waktu  penelitian  yang  singkat,  saat  akhir  kuliah  semester  menjelang ujian  semester,  menyita  waktu  responden  untuk  mengisi  angket  yang  bersangkutan,  dan tidak adanya reward  untuk responden yang mengisi angket (karena terbatasnya dana). Hasil  yang  diperoleh  dari  penelitian  ini  adalah  responden  sebagian  besar  bertempat tinggal  di:  kost  ada  57,6%,  sedangkan  yang  bersama  orang  tua  ada  31,2%,  dan  ikut saudara  sebanyak  11,2%.  Sebagian  besar  responden  mengetahui  tentang  etika  secara berurutan  berasal  dari:  orang  tua  kandung,  kemudian  dari  belajar  di  sekolah,  dari pengalaman hidup dan dari kebiasaan hidup. Dari  data  yang  diperoleh  dapat  diidentifikasi  beberapa  pendapat  mahasiswa  tentang etika pergaulan mahasiswa di kampus, antara lain: 1. Etika Pergaulan Mahasiswa di Kampus: ', '2020-01-14 02:20:12', '2020-01-14 02:20:12'),
(219, 3, 17, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net a. Bila  berpapasan  dengan  dosen  di  kampus,  menurut  sebagian  besar  mahasiswa sebaiknya  beri  salam  dengan  menundukkan  kepala  (74,4%  dari  seluruh  jumlah responden), dan sebagian kecil mahasiswa berpendapat pura-pura tidak tahu karena mahasiswa  anggap  dosen  yang  bersangkutan  juga  tidak  kenal  mahasiswa  tersebut (2,4%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  cium tangan,  jika  kenal  menyapa,  menundukkan  kepala  sembari  tersenyum,  beri  salam dengan jabat tangan. b. Berpakaian saat kuliah menurut mahasiswa sebaiknya rapi dan pantas pakai (75,2% dari  seluruh  jumlah  responden),  modis  dan  trendy  (6,4%  dari  seluruh  jumlah responden),  berpakaian  sesuai  dengan  bentuk  badan  (4%  dari  seluruh  jumlah responden).,  dan  memakai  seragam  yang  ditentukan  (3,2%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  berpakaian  yang  nyawan  dan menutup aurat. c. Bila  menghadap  dosen  untuk  berkonsultasi,  menurut  mahaiswa  sebaiknya melakukan  konfirmasi  terlebih  dahulu  kepada  dosen  yang  bersangkutan  mengenai kesediaannya  (60,8%  dari  seluruh  jumlah  responden),  konfirmasi  jadwal keberadaan  dosen  yang  bersangkutan  untuk  menentukan  waktu  yang  tepat berkonsultasi  (33,6%  dari  seluruh  jumlah  responden),  menanyakan  teman  terlebih dahulu  untuk  mengetahui  gaya  atau  kebiasaan  dosen  yang  bersangkutan  dalam membimbing  (3,2%  dari  seluruh  jumlah  responden),  langsung  mendatangi  dosen yang  bersangkutan  untuk  berkonsultasi  (2,4%  dari  seluruh  jumlah  responden). Beberapa mahasiswa menambahkan, harus sopan dan tidak mengganggu. d. Pendapat  mahasiswa  saat  bercakap-cakap  dengan  teman  dikampus  harus diperhatikan:  dalam  berbicara  perlu  dijaga  volume  suara  agar  tidak  mengganggu kuliah (50,4% dari seluruh jumlah responden), bebas berbicara sebagai jaminan hak kebebasan berpendapat (17,6% dari seluruh jumlah responden), tidak mendominasi pembicaraan  (15,2%  dari  seluruh  jumlah  responden),  isi  pembicaraan  tidak menyangkut  hal-hal  rahasia  biar  didengar  orang  lain  (5,6%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  dalam  bercakap-cakap  dengan tata  cara  penyampaian  yang baik, tata krama yang  baik,  bila  mengganggu  meminta ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(220, 3, 18, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net maaf,  menggunakan  bahasa  yang  sopan,  topik  yang  dibicarakan  tidak  berbau  sara, politik dan sex. e. Datang  ke  kampus  untuk  kegiatan  akademik  selain  kuliah  sebaiknya:  berpakaian rapi  tidak  memakai  baju  kaos  dan  harus  memakai  sepatu  (48,8%  dari  seluruh jumlah responden), berperilaku yang baik dan boleh berpakaian seadanya asal tidak menggangu  (20%  dari  seluruh  jumlah  responden),  berpakaian  rapi  dan  boleh memakai  sandal  (12,8%  dari  seluruh  jumlah  responden),  tak  perlu  memperhatikan penampilan  diri,  yang  penting  mengikuti  kegiatan  (2,4%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  tetap  menutup  aurat,  berpakaian yang rapi dan sopan. f. Berkomunikasi dengan dosen lewat telepon: memberi salam terlebih dahulu dengan meminta  maaf  bila  mengganggu  (78,4%  dari  seluruh  jumlah  responden),  pada  saat yang tidak mengganggu waktu kerja dosen yang bersangkutan (12,8% dari seluruh jumlah  responden),  menanyakan  terlebih  dahulu  kesediaannya  untuk  berbicara (5,6%  dari  seluruh  jumlah  responden),  berbicara  langsung  maksud  dan  tujuannya (4,8%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: memberi  salam  dan  minta  maaf  bila  mengganggu  kemudian  mengemukakan masud dan tujuannya. g. Berjalan  bersama  pacar  di  kampus:  selalu  memperhatikan  tata  cara  berbicara  yang wajar sebagai teman (34,4% dari seluruh jumlah responden), jaga jarak yang wajar agar tidak diketahui umum bahwa anda sedang pacaran (26,4% dari seluruh jumlah responden),  bergandengan  tangan  untuk  menunjukkan  kepada  umum  hubungan anda  (3,2%  dari  seluruh  jumlah  responden),  tidak  usah  memperhatikan  orang  lain yang  penting  perlakukan  pacar  dengan  mesra  (3,2%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  menjaga  sopan  santun  dan  tata krama, biasa saja selayaknya teman, berjalan sewajarnya tidak melanggar  etika  dan tidak  mengganggu  orang  lain,  sewajarnya  tidak  terlalu  berlebihan,  dan  tetap pacaran. h. Akan  membuang  sampah  di  kampus  sebaiknya:  di  tempat  sampah  yang  disediakan (81,6%  dari  seluruh  jumlah  responden),  tidak  dilakukan  karena  tidak  ada  tempat ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(221, 3, 19, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net sampah  yang  disediakan  (4,8%  dari  seluruh  jumlah  responden),  dibuang  ke  luar kampus  sembarangan  (2,4%  dari  seluruh  jumlah  responden),  di  sembarang  tempat karena  tidak  ada  tempat  sampah  yang  disediakan  (0,8%  dari  seluruh  jumlah responden). i. Untuk  melampiaskan  kejenuhan  saat  perkuliahan,  boleh  melakukan:  berbicara dengan  teman  dekat  anda  (41,6%  dari  seluruh  jumlah  responden),  usul  kepada dosen yang bersangkutan untuk merubah metode pembelajaran (30,4% dari seluruh jumlah  responden),  corat-coret  meja  dan  kursi  kuliah  (0,8%  dari  seluruh  jumlah responden),  corat-corat  tembok  ruang  kuliah  (0,8%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  mencorat-coret,  menggambar, menulis di buku sendiri, baca buku, keluar sebentar pamit kepada dosen untuk cari udara segar. j. Bila  ada  teman  yang  tidak  rapi  berpakaian  saat  kuliah,  sebaiknya:  dosen  menegur dan  mengingatkan  (36%  dari  seluruh  jumlah  responden),  dosen  melarang  yang bersangkutan  mengikuti  kuliah  (9,6%  dari  seluruh  jumlah  responden),  pengurus fakultas  atau  program  studi  menegur  dan  memberikan  sanksi  (6,4%  dari  seluruh jumlah  responden), anda  menegur  yang  bersangkutan untuk  merapikan  pakaiannya (24%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  untuk membiarkan  saja  karena  hak  yang  bersangkutan,  sama-sama  dewasa  sudah  tahu mana yang baik dan yang tidak baik, memberi masukan kepada yang bersangkutan, agar  dosen  menegurnya,  sebaiknya  teman  dan  pengurus  fakultas  menegurnya  agar yang bersangkutan berubah, dan diam saja. k. Potongan  rambut  mahasiswa  laki-laki  sebaiknya:  pendek  dan  rapi  (46,4%  dari seluruh  jumlah  responden),  boleh  panjang  asalkan  rapi  (23,2%  dari  seluruh  jumlah responden),  boleh  panjang  seperti  rambut  wanita  (3,2%  dari  seluruh  jumlah responden),  boleh  gundul  (2,4%  dari  seluruh  jumlah  responden),  pendek  seperti tentara (0,8%  dari seluruh jumlah responden).  Beberapa  mahasiswa  menambahkan asal rapi. l. Sebagai  mahasiswa  putri  bila  memakai  baju  dengan  celana  panjang  sebaiknya:  rapi dan  pantas  dipakainya  (53,6%  dari  seluruh  jumlah  responden),  tidak  terlalu  ketat ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(222, 3, 20, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net (21,6%  dari  seluruh  jumlah  responden),  sesuai  sebagai  baju  dan  celana  panjang wanita  (10,4%  dari  seluruh  jumlah  responden),  tidak  terlalu  longgar  (4,8%  dari seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  rapi,  pantas dipakai dan tidak ketat, sopan, nyaman dipakai. m. Mahasiswa  yang  terlambat  masuk  kuliah  sebaiknya:  meminta  maaf  kepada  dosen yang bersangkutan dengan sopan (69,6% dari seluruh jumlah responden), langsung masuk  asal  belum  lama  terlambatnya  (9,6%  dari  seluruh  jumlah  responden),  tidak usah  masuk  karena akan  mengganggu  (3,2%),  dosen melarang mahasiswa  tersebut untuk  mengikuti  kuliah  (0,8%  dari  seluruh  jumlah  responden).  Beberapa mahasiswa  menambahkan:  menjelaskan  alasan  keterlambatan,  meminta  maaf kepada dosenyang bersangkutan dan tidak bikin suasana rame, masuk saja. n. Perilaku  dan  penampilan  mahasiswa  juga  meniru  perilaku  dan  penampilan dosennya,  menurut  pendapat mahasiswa:  ya  sebagian kecil  mahasiswa  (29,6% dari seluruh  jumlah  responden),  tidak  semua  mahasiswa  (26,4%  dari  seluruh  jumlah responden),  tidak  semuanya  ditiru  oleh  mahasiswa  (25,6%  dari  seluruh  jumlah responden),  ya  sebagian  besar  mahasiswa  (9,6%  dari  seluruh  jumlah  responden). Beberapa mahasiswa menambahkan: tidak semuanya begitu. o. Mahasiswa  meminta  pelayanan  administrasi  akademik  dan  kemahasiswaan  kepada pegawai/karyawan  sebaiknya:  memohon dengan kata-kata  yang  sopan  (60,8% dari seluruh  jumlah  responden),  cukup  menyerahkan  syarat-syarat  yang  diperlukan (12%  dari  seluruh  jumlah  responden),  tidak  perlu  banyak  memohon  dan  bertanya asal  sudah  memenuhi  persyaratannya  (11,2%  dari  seluruh  jumlah  responden), memerintahkan  untuk  segera  dilayani  karena  memang  sudah  tugasnya  (2,4%  dari seluruh jumlah responden). p. Menduduki meja sebagai kursi yang ada di kampus: tidak boleh, karena kurang etis (56%  dari  seluruh  jumlah  responden),  tidak  boleh,  karena  bukan  kursi  (16%  dari seluruh  jumlah  responden),  boleh,  asalkan  kursi  yang  disediakan  sudah  terpakai semua  (8,8%  dari  seluruh  jumlah  responden),  boleh,  asalkan  tidak  ada  kursi  lain (5,6%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan,  boleh ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(223, 3, 21, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net tergantung  waktunya,  lagian  dosen  kadang  duduk  di  meja  waktu  mengajar,  tidak sesuai dan tidak boleh karena meja bukan untuk duduk. q. Mahasiswa yang berperilaku tidak sopan selama kuliah harus dijatuhi sanksi: perlu, tetapi  sanksinya  harus  yang  mendidik  (39,2%  dari  seluruh  jumlah  responden), perlu,  sebab untuk  memberi pelajaran  agar tidak mengulang  perbuatan  lagi  (24,8% dari  seluruh  jumlah  responden),  tidak  perlu,  cukup  diperingatkan  saja  (20,8%  dari seluruh jumlah responden), tidak perlu (4% dari seluruh jumlah responden). Beberapa mahasiswa menambahkan tidak perlu, diberi nasehat saja oleh dosen agar merubah kebiasaan buruknya, diberi sanksi moral saja. r. Mahasiswa mengisi waktu  luang  di  kampus  sebaiknya: diskusi  tugas kuliah  dengan teman di tempat yang  disediakan (36% dari  seluruh  jumlah  responden), ngobrol di taman  kampus  (32%  dari  seluruh  jumlah  responden),  belajar  di  perpustakaan (26,4%  dari  seluruh  jumlah  responden),  konsultasi  dosen  untuk  tugas  dan  materi kuliah  (8%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: untuk  kegiatan  organisasi,  pergi  ke  kost/HIMA,  membaca  koran  dan  tabloit, mengerjakan tugas. s. Mahasiswa  akan  terbiasa  berperilaku  baik  apabila:  penerapan  peraturan  akademik dan  peraturan  tata  tertib  laksanakan  dengan  tegas  (32,8%  dari  seluruh  jumlah responden),  sarana  dan  prasaran  kegiatan  dan  pembelajaran  di  kampus  tersedia dengan  baik  (24,8%  dari  seluruh  jumlah  responden),  dosen  juga  berperilaku  baik dan  dapat  dijadikan  panutan  (24%  dari  seluruh  jumlah  responden),  ada  peraturan tata  tertib  yang  jelas  dan  mudah  diketahui  setiap  mahasiswa  (19,2%  dari  seluruh jumlah  responden).  Beberapa  mahasiswa  menambahkan:  lingkungan  mendukung dan peraturannya tidak menekan mahasiswa. t. Berpapasan  dengan  dosen  di  kampus,  sebaiknya:  memberi  salam  karena  dosen yang  bersangkutan  anda  kenal  (52,8%  dari  seluruh  jumlah  responden),  cukup menganggukkan  kepala  kepada  dosen  tersebut  (25,6%  dari  seluruh  jumlah responden),  bersikap  biasa  saja  tidak  perlu  memandang  dosen  yang  bersangkutan (1,6%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(224, 3, 22, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net menganggukkan  kepala  dan  tersenyum,  memberi  salam  meskipun  tidak mengenalnya, menyapa dengan senyum. 2. Pelaksanaan  Etika  Pergaulan  Mahasiswa  di  Kampus  yang  sesuai  dengan  Identitas Moral Bangsa a. Pergaulan di kampus sebaiknya mengedepankan dan memperhatikan tatanan suatu sopan santun terhadap semua orang. b. Menjadi  orang  yang  Pancasilais  tidak  sepenuhnya  berfaham  barat,  jangan primordialisme,  erotisme  yang  secara  fanatik  berlebihan  dan  yang  sesuai  dengan ajaran agama. c. Etika  pergaulan  mahasiswa  sebaiknya  dilakukan  secara  wajar,  terlebih  pergaulan beda  jenis  sehingga  tidak  menimbulkan  fitnah/guncingan.  Bisa  menjaga  apa  yang seharusnya  tidak  dilakukan  (teriak-teriak,  bergandengan  lawan  jenis  dan sebagainya) d. Rapi, sopan tidak dipaksa e. Mentaati  aturan  yang  diberikan  oleh  kampus  dan  dapat  berperilaku  sopan  serta saling  menghargai  sesama  orang  dan  dapat  menjadi  panutan  untuk  adik-adik  yang baru. f. Bergaul sesuai dengan norma dan batas wajar sesuai adat ketimuran g. Jangan  dengan  paksaan  tetapi  dengan  penyadaran,  bertahap,  jangan  langsung karena  semua  perlu  proses,  pembimbing  harus  sabar  karena  semua  orang  memiliki cara pandang masing-masing. h. Pergaulan mahasiswa di kampus harus sesuai dengan norma dan etika pergaulan di masyarakat  maupun  sesuai  dengan  peraturan  yang  telah  ditetapkan  kampus,  selain harus  disosialisasikan  kepada  mahasiswa  mengenai  etika  pergaulan  karena  banyak juga mahasiswa yang kurang bisa menerapkan etika pergaulan di kampus. i. Cukup melaksanakan peraturan yang sudah ada j. Berpakaian sopan, bertingkah laku baik dan disiplin k. Dosen harus memberi contoh yang baik dalam etika maupun keprofesionalan l. Moral  tidak  melulu  diseragamkan  dengan  sebuah  simbol.  Moral  adanya  di  hati, bukan fisik, sandal tidak berpengaruh terhadap kapasitas otak dan intelegensia. ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(225, 3, 23, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net m. Menerapkan  beberapa  aturan  yang  tidak  terlalu  mengekang  mahasiswa, pelanggaran harus diberi sanksi yang sesuai pelanggarannya n. Sesuai  peraturan  yang  berlaku  yang  telah  disepakati  mahasiswa  dan  tidak membebani mahasiswa o. Sesuai  peraturan  yang  dikeluarkan  pihak  kampus  terutama  masalah  etika  dalam berpakaian untuk menunjang proses pembelajaran. Seluruh civitas akademika diberi pelajaran moral tak terkecuali dosen dan para pejabat-pejabat jajaran universitas. p. Sesuai dengan apa yang telah diajarkan, sesuai norma etika dan moral kebangsaan q. Berpakaian  rapi  dan  sopan,  sering  mengunjungi  perpustakaan,  tidak membeda-bedakan teman, dan berprestasi r. Sesuai dengan etika dan moral yang ada dalam masyarakat s. Bergaul  tanpa  membedakan  sara,  saling  bertegur  sapa  ketika  bertemu, menghormati  yang  lebih  tua  (kakak  angkatan)  tidak  semena-mena  pada  yang  lebih muda (adik angkatan). t. Beretika berdasarkan agama yang dianutnya, mematuhi peraturan universitas, antar mahasiswa  dengan  dosen  harus  dibenahi  supaya  dosen  tidak  diremehkan,  antara sesama mahasiswa harap wajar saja B. Pembahasan 1. Etika pergaulan mahasiswa di kampus Dari  data  sebagaimana  diuraikan  dalam  sub  bab  hasil  penelitian  di  atas  dapat diketahui  bahwa  sebagian  besar  mahasiswa  menganggap  bahwa  etika  pergaulan mahasiswa  di  kampus  harus  dilaksanakan  sesuai  dengan  sopan  santun,  adat  kebiasaan hidup  yang  baik,    jadi  lebih  mengartikan  sebagai  etiket.  Hal  ini  dapat  dirinci  sebagai berikut: a. Apabila  mahasiswa  berpapasan  dengan  dosen  di  kampus  beri  salam  dan menundukkan kepala (74,4%); b. Selama  kegiatan  kuliah  di  kampus  mahasiswa  harus  berpakaian  yang  rapi  dan  pantas pakai (75,2%); ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(226, 3, 24, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net c. Apabila  akan  menghadap  dosen  untuk  berkosultasi  sebaiknya  konfirmasi  dahulu kepada dosen yang bersangkutan atas kesediaannya untuk ditemui (60,8%); d. Apabila  mahasiswa  bercakap-cakap  di  kampus  perlu  dijaga  volume  suara  agar  tidak mengganggu kuliah (50,4%); e. Apabila  datang  ke  kampus  untuk  kegiatan  akademik  selain  kuliah  harus  berpakaian rapi, tidak memakai kaos dan memakai sepatu (48,8%); f. Apabila  berkomunikasi  dengan  dosen  lewat  telepon  dengan  memberi  salam  terlebih dahulu dan meminta maaf bila mengganggu (78,4%); g. Apabila  berjalan  bersama  pacar  di  kampus:  selalu  memperhatikan  tata  cara  berbicara yang wajar sebagai teman (34,4%); h. Apabila  akan  membuang  sampah  di  kampus  sebaiknya:  di  tempat  sampah  yang disediakan (81,6%); i. Untuk melampiaskan kejenuhan saat perkuliahan, boleh melakukan: berbicara dengan teman dekat (41,6%); j. Apabila  ada  teman yang  tidak  rapi berpakaian saat kuliah, sebaiknya: dosen  menegur dan mengingatkan (36%); k. Potongan rambut mahasiswa laki-laki sebaiknya: pendek dan rapi (46,4%); l. Mahasiswa  putri  apabila  memakai  baju  dengan  celana  panjang  sebaiknya:  rapi  dan pantas dipakainya (53,6%); m. Mahasiswa  yang  terlambat  masuk  kuliah  sebaiknya:  meminta  maaf  kepada  dosen yang bersangkutan dengan sopan (69,6%); n. Perilaku  dan  penampilan  mahasiswa  sebagian  kecil  meniru  perilaku  dan  penampilan dosennya (29,6%); o. Mahasiswa  yang  meminta  pelayanan  administrasi  akademik  dan  kemahasiswaan kepada  pegawai/karyawan  sebaiknya:  memohon  dengan  kata-kata  yang  sopan (60,8%); ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(227, 3, 25, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net p. Menduduki  meja  sebagai  kursi  yang  ada  di  kampus:  tidak  boleh,  karena  kurang  etis (56%); q. Mahasiswa  yang  berperilaku  tidak  sopan  selama  kuliah  harus  dijatuhi  sanksi,  tetapi sanksinya harus yang mendidik (39,2%); r. Mahasiswa  mengisi  waktu  luang  di  kampus  sebaiknya  dengan  diskusi  tugas  kuliah bersama teman di tempat yang disediakan (36%); s. Mahasiswa akan terbiasa berperilaku baik apabila: penerapan peraturan akademik dan peraturan tata tertib laksanakan dengan tegas (32,8%); t. Bila  berpapasan  dengan  dosen  di  kampus,  sebaiknya:  memberi  salam  karena  dosen yang bersangkutan anda kenal (52,8%). Etika  pergaulan  mahasiswa  di  kampus  menurut  mahasiswa  sebaiknya  ditetapkan oleh  pihak  kampus  sebagai  peraturan  pergaulan  di  lingkungan  kampus  dengan  sanksi yang  mendidik.  Yang  menarik  menurut  mahasiswa  adalah  bahwa  perilaku  mahasiswa  di kampus  hanya  sebagian  kecil  yang  meniru  perilaku  dosen,  dan  dosen  diharapkan  aktif untuk menegur mahasiswa apabila ada mahasiswa yang berperilaku tidak baik di kampus. Sedangkan  menurut  mahasiswa  bahwa  pelaksanaan  etika  pergaulan  mahasiswa  di kampus  yang  sesuai  dengan  identitas  moral  bangsa  harus  dengan  mengedepankan  sopan santun,  sesuai  dengan  ajaran  agama,  nilai-nilai  Pancasila  dan  dituangkan  dalam  bentuk peraturan kampus (universitas) yang disosialisasikan kepada seluruh mahasiswa. Dengan  demikian  dari  hasil  penelitian  di  atas  dapat  dikemukakan  bahwa  pendapat mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  ternyata  sebagian  besar mahasiswa  FISE  UNY  menyatakan  bahwa  etika  pergaulan  mahasiswa  di  kampus merupakan  perilaku  yang  baik  di  lingkungan  kampus  sesuai  kebiasaan  hidup  masyarakat Indonesia  dalam  berhubungan  dengan  sesama  mahasiswa  maupun  dalam  berhubungan antara mahasiswa dengan dosen dan karyawan kampus. Perilaku yang baik di kampus ini menurut  mahasiswa,  akan  berjalan  dengan  baik  apabila  ada  peraturan  yang  jelas  yang mengaturnya  serta  penerapan  sanksi  yang  tegas  bagi  yang  melanggarnya,  dan  peraturan akademik yang sudah ada harus dilaksanakan dengan tegas.   ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(228, 3, 26, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net 2. Pelaksanaan  Etika  Pergaulan  Mahasiswa  di  Kampus  yang  sesuai  dengan  Identitas Moral Bangsa Pelaksanaan  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas moral  bangsa  menurut  mahasiswa  dengan  memperhatikan  etika  pergaulan  di  masyakarat yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan  universitas  yang  telah disepakati  oleh  mahasiswa  dengan  tidak  memberatkan  mahasiswa  dan  peraturan  ini berlaku  bagi  komunitas  kampus,  baik  mahasiswa  maupun  dosen  dan  karyawan.. Pelaksanaan  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas  moral bangsa  dengan  tidak  dipaksakan  tetapi  dengan  penyadaran  melalui  proses  yang berlangsung secara bertahap. ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(229, 3, 27, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB V PENUTUP A. Kesimpulan Dari  hasil  penelitian  dan  pembahasan  di  atas  dapat  ditarik  kesimpulan  bahwa pendapat mahasiswa FISE UNY tentang: 1. Etika pergaulan mahasiswa di  kampus  adalah  bahwa etika pergaulan  mahasiswa di kampus  merupakan  perilaku  yang  baik  di  lingkungan  kampus  sesuai  kebiasaan hidup  masyarakat  Indonesia  dalam  berhubungan  dengan  sesama  mahasiswa maupun  dalam  berhubungan  antara  mahasiswa  dengan  dosen  dan  karyawan kampus.  Perilaku  yang  baik  di  kampus  ini  menurut  mahasiswa,  akan  berjalan dengan  baik  apabila  ada  peraturan  yang  jelas  yang  mengaturnya  serta  penerapan sanksi  yang  tegas  bagi  yang  melanggarnya,  dan  peraturan  akademik  yang  sudah ada harus dilaksanakan dengan tegas.   2. Etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas  moral  bangsa menurut  mahasiswa  dilaksanakan  dengan  memperhatikan  etika  pergaulan  di masyakarat  yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan universitas  yang  telah  disepakati  oleh  mahasiswa  dengan  tidak  memberatkan mahasiswa  dan  peraturan  ini  berlaku  bagi  komunitas  kampus,  baik  mahasiswa maupun  dosen  dan  karyawan..  Pelaksanaannya  dengan  tidak  dipaksakan  tetapi dengan penyadaran melalui proses yang berlangsung secara bertahap. B. Saran ', '2020-01-14 02:20:13', '2020-01-14 02:20:13');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(230, 3, 28, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net 1. Perlu  sosialisasi  Peraturan  Rektor  UNY  Nomor  3  Tahun  2009  ke  seluruh  sivitas akademika UNY terutama mahasiswa agar dapat dijadikan panduan dalam pergaulan di lingkungan kampus. 2. Segera  dipersiapkan  sarana  dan  prasarana  yang  terkait  berlakunya  Peraturan  Rektor UNY  Nomor  3  Tahun  2009  agar  jika  terjadi  pelanggaran  tidak  berlarut-larut penyelesaiannya. 3. Kuliah  Pendidikan  Pancasila  harus  dapat  menjadi  sarana  pembentukan  perilaku mahasiswa yang Pancasilais di kampus UNY. DAFTAR PUSTAKA Bimo Walgito (1991).  Psikologi Sosial (Suatu Pengantar).  Andi Offset. Yogyakarta. Franz  Magnis  Suseno  (1998).  Model  Pendekatan  Etika.   Penerbit  Kanisius. Yogyakarta. Kaelan (1987). Pancasila Yuridis Kenegaraan.  Liberty. Yogyakarta. --------- (2008).  Pendidikan Pancasila. Paradigma. Yogyakarta. K. Bertens (2005).  Etika. PT Gramedia Utama. Jakarta. Larry  May,  Shari  Collins-Chobanian,  Kai  Wong  (2001). Etika  Terapan  I  Sebuah Pendekatan Multikultur.  PT Tiara Wacana. Yogyakarta. Poedjawijatna (2003). Etika Filsafat Tingkah Laku.  Rineka Cipta. Jakarta Suharsimi  Arikunto  (1992). Prosedur  Penelitian  Suatu  Pendekatan  Praktik.   Rineka Cipta. Jakarta. ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(231, 3, 29, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net ', '2020-01-14 02:20:13', '2020-01-14 02:20:13'),
(232, 4, 1, 'react-native #react- native ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(233, 4, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(234, 4, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(235, 4, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(236, 4, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(237, 4, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(238, 4, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(239, 4, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(240, 4, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(241, 4, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(242, 4, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(243, 4, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(244, 4, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(245, 4, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(246, 4, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(247, 4, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(248, 4, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(249, 4, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(250, 4, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(251, 4, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(252, 4, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(253, 4, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(254, 4, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(255, 4, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(256, 4, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(257, 4, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(258, 4, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(259, 4, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(260, 4, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(261, 4, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(262, 4, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(263, 4, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(264, 4, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(265, 4, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(266, 4, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(267, 4, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(268, 4, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(269, 4, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(270, 4, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(271, 4, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(272, 4, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(273, 4, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(274, 4, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(275, 4, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(276, 4, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(277, 4, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(278, 4, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(279, 4, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(280, 4, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(281, 4, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(282, 4, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(283, 4, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(284, 4, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(285, 4, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(286, 4, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(287, 4, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(288, 4, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(289, 4, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(290, 4, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(291, 4, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(292, 4, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(293, 4, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(294, 4, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(295, 4, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(296, 4, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(297, 4, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(298, 4, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(299, 4, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(300, 4, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(301, 4, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(302, 4, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(303, 4, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(304, 4, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(305, 4, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(306, 4, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:14', '2020-01-14 02:20:14'),
(307, 4, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(308, 4, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(309, 4, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(310, 4, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(311, 4, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(312, 4, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(313, 4, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(314, 4, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(315, 4, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(316, 4, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(317, 4, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(318, 4, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(319, 4, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(320, 4, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(321, 4, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(322, 4, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(323, 4, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(324, 4, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(325, 4, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(326, 4, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(327, 4, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(328, 4, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(329, 4, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(330, 4, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(331, 4, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(332, 4, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(333, 5, 1, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net LAPORAN PENELITIAN PENDAPAT MAHASISWA FAKULTAS ILMU SOSIAL DAN EKONOMI TENTANG ETIKA PERGAULAN MAHASISWA DI KAMPUS Oleh: Anang Priyanto FAKULTAS ILMU SOSIAL DAN EKONOMI UNIVERSIYAS NEGERI YOGYAKARTA 2010 PENELITIAN INI DIBIAYAI DENGAN DANA DIPA BLU UNIVERSITAS NEGERI YOGYAKARTA TAHUN 2010 SK DEKAN FISE UNY NOMOR: 137 ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(334, 5, 2, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net TAHUN 2010, TANGGAL 19 APRIL 2010 SURAT PERJANJIAN PELAKSANAAN PENELITIAN NOMOR: 1165/H.34.14/PL/2010, TANGGAL 26 APRIL 2010   ABSTRAK PENDAPAT MAHASISWA FAKULTAS ILMU SOSIAL DAN EKONOMI TENTANG ETIKA PERGAULAN MAHASISWA DI KAMPUS Oleh: Anang Priyanto Penelitian  ini  bertujuan  untuk  mengetahui  pendapat  mahasiswa  tentang  etika pergaulan  mahasiswa  di kampus yang  sesuai dengan  moral bangsa dan  pergaulan  generasi muda  serta  bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan  mahasiswa  di kampus dilaksanakan sesuai dengan moral bangsa. Penelitian  ini  merupakan  penelitian  deskriptif  yang  mengidentifikasikan  dan mendeskripsikan  kecenderungan-kecenderungan  pendapat  mahasiswa  tentang  etika pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  kehidupan  universitas  khususnya Universitas Negeri Yogyakarta, dan responden penelitian ini adalah mahasiswa FISE UNY dengan  teknik  random  sampling  10%  dari  jumlah  populasi  sebanyak  +  480  orang mahasiswa.  Instrumen  penelitian  ini  menggunakan  angket  modifikasi  tertutup  dan  terbuka dan divalidasi secara construct validity, serta analisis datanya dengan analisis deskriptif.  Hasil  penelitian  diperoleh  bahwa  pendapat  mahasiswa  FISE  UNY  tentang  etika pergaulan  mahasiswa  di  kampus  merupakan  perilaku  yang  baik  di  lingkungan  kampus sesuai  kebiasaan  hidup  masyarakat  Indonesia  dalam  berhubungan  dengan  sesama mahasiswa  maupun  dalam  berhubungan  antara  mahasiswa  dengan  dosen  dan  karyawan kampus.  Perilaku  yang  baik  di  kampus  ini  menurut  mahasiswa,  akan  berjalan  dengan  baik apabila ada peraturan yang jelas yang mengaturnya serta penerapan sanksi yang tegas bagi yang  melanggarnya,  dan  peraturan  akademik  yang  sudah  ada  harus  dilaksanakan  dengan tegas.    Menurut  mahasiswa  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan identitas  moral bangsa dilaksanakan  dengan memperhatikan etika  pergaulan  di  masyakarat yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan  universitas  yang  telah disepakati  oleh  mahasiswa  dengan  tidak  memberatkan  mahasiswa  dan  berlaku  bagi komunitas  kampus,  baik  mahasiswa  maupun  dosen  dan  karyawan,  serta  pelaksanaannya dengan tidak dipaksakan tetapi dengan penyadaran melalui proses yang berlangsung secara bertahap. ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(335, 5, 3, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net KATA PENGANTAR Puji  syukur  kami  panjatkan  kehadiran  Tuhan  Yang  Maha  Esa  atas  karunianya sehingga  dapat  tersusunlah  laporan  penelitian  ini  dengan  baik.  Kami  menyadari  laporan penelitian  ini  jauh  dari  sempurna  dan  tanpa  bantuan  dari  berbagai  pihak  takkan  mungkin terselesaikan.  Oleh  karenanya  sudah  sepantasnyalah  jika  pada  kesempatan  ini  kami sampaikan ucapan terima kasih kepada: 1. Bapak  Sardiman  A.M.MPd  selaku  Dekan  FISE  UNY  yang  telah  membantu  dalam penyediaan dana penelitian ini; 2. Bapak  dan  Ibu  Kaprodi  dilingkungan  FISE  UNY  yang  telah  mengijinkan  peneliti menyebarluaskan angket penelitian ini kepada para mahasiswanya; 3. Para  mahasiswa  FISE  UNY  sebagai  responden  dari  semua  program  studi  yang  telah meluangkan waktu untuk mengisi angket penelitian ini; 4. Semua  pihak  yang  tidak  bisa  disebutkan  satu  persatu  yang  telah  membantu  dalam pelaksanaan penelitian ini. Semoga laporan penelitian ini bermanfaat bagi para pembacanya.                                                                                                   Yogyakarta,      Nopember 2010                                                                                                      Penyusun ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(336, 5, 4, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net DATAR ISI Halaman Judul  ................................................................................  ...... i Lembar Pengesahan ..........................................................................  ......  ii Abstrak  ........................................................................................................  iii Kata Pengantar ..................................................................................  ........  iv Daftar Isi   ....................................................................................................  v BAB I   PENDAHULUAN ...............................................................  ...... 1 A. Latar Belakang Masalah  ...................................................  .......  1 B. Rumusan Masalah   ...........................................................  .......  2 C. Tujuan Penelitian  .............................................................  ....... 2 D. Manaat Penelitian   ...........................................................  .......  3 BAB II   KAJIAN TEORI  ...............................................................  .......  4 A. Pendapat  .........................................................................  ....... 4 B. Etika Pergaulan  ...............................................................  ....... 4 C. Perilaku Pergaulan di Kampus  .................................................... 5 ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(337, 5, 5, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net D. Pancasila sebagai Identitas Moral Bangsa .................................... 7 BAB III METODE PENELITIAN   .................................................  ......... 9 A. Jenis Penelitian   ...............................................................  ........ 9 B. Populasi   ..........................................................................  ........ 9 C. Teknik Sampling   ............................................................  ........  9 D. Instrumen Penelitian  ................................................................... 9 E. Validasi Penelitian   ......................................................................  9 F. Analisis Data   .............................................................................. 10 BAB IV  HASIL PENELITIAN DAN PEMBAHASAN  ............................ 11 A. Hasil Penelitian   .......................................................................... 11 B. Pembahasan   ................................................................................  18 BAB V  PENUTUP  .....................................................................................  22 A. Kesimpulan  ................................................................................. 22 B. Saran  ........................................................................................... 22 DATAR PUSTAKA ..................................................................................... 23 LAMPIRAN ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(338, 5, 6, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB I PENDAHULUAN A. Latar Belakang Masalah Akhir-akhir  ini  banyak  isu-isu  yang  berkembang  mengenai  etika  pergaulan mahasiswa  di  kampus  terkait  dengan  persoalan  sopan  santun,  tata  krama,  etika dalam  berkomunikasi  serta  tata  cara  berpakaian  yang  pantas  dalam  pergaulan  di lingkungan kampus. Isu tersebut telah menjadi sorotan banyak pihak terutama para pimpinan  universitas  khususnya  pimpinan  Universitas  Negeri  Yogyakarta  (UNY), baik  di  tingkat  pimpinan  pusat  (kantor  rektorat)  maupun  di  tingkat  fakultas. Bahkan  isu  yang  berkembang  telah  menyangkut  pihak  luar  yang  ikut  berkomentar menanggapai tata cara berpakaian mahasiswa UNY yang dianggapnya sangat tidak tepat  dilakukan  oleh  mahasiswa  UNY  yang  nota  bene  sebagai  mahasiswa universitas penghasil calon-calon guru. Isue ini menjadi keprihatinan para pimpinan universitas  dan  ditangkap  mentah-mentah  tanpa  melakukan  konfirmasi  kepada mahasiswa atau melakukan pengamatan langsung atas kebenaran isu tersebut. Para dosenpun  banyak  yang  merasa  gerah  dan  jengkel  jika  isu  tersebut  benar  adanya. Mereka  merasa  universitas  ini  telah  ternodai  oleh  segelintir  mahasiswa  yang dikuatirkan  akan  merusak  citra  UNY  sebagai  universitas  penghasil  calon  guru  dan merusak  etika  pergaulan  bangsa  Indonesia  yang  memiliki  karakter  bangsa  yang santun  dan  menjunjung  tinggi  moral  bangsa.  Jika  tidak  segera  ditangani  akan dianggap  sebagai  sesuatu  yang  wajar  karena  perkembangan  mode  dan  jaman. Sebagai  komunitas  masyarakat  ilmiah  seharusnya  universitas  menjadi  contoh tauladan  bagi  moral  bangsa  sekaligus  pelopor  penjaga  etika  pergaulan  bangsa Indonesia.  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(339, 5, 7, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net Terlepas  dari  tanggapan  para  pimpinan  universitas  atas  isu  etika  pergaulan mahasiswa  di  kampus,  yang  jelas  UNY  telah  mengeluarkan  sebuah  peraturan rektor  tentang  Etika  dan  Tata  Tertib  Pergaulan  Mahasiswa  di  Kampus.(Peraturan Rektor  Nomor  03  Tahun  2009).  Peraturan  rektor  ini  telah  banyak  memuat  segala hal  tentang  etika  pergaulan  mahasiswa  di  kampus  yang  telah  disepakati  bersama antara  para  pimpinan  universitas  dengan  perwakilan  mahasiswa  UNY.  Bahkan dalam  peraturan  rektor  tersebut  telah  disepakati  pula  pencantuman  sanksi  bagi yang  melanggar  etika  pergaulan  di  kampus  yang  dikriteriakan  bersama  itu.( lihat Pasal  12  –  14  Peraturan  Rektor  No.03  Th  2009).  Seharusnya  sebagai  mahasiswa UNY  khususnya  mahasiswa  FISE  UNY  yang  berkecimpung  di  bidang  sosial tentunya  tidaklah  asing  lagi  berhadapan  dengan  persoalan-persoalan  etika,  moral bahkan  komunikasi  personal  serta  persoalan-persoalan  tata  krama  pergaulan  di masyarakat  yang  sesuai  dengan  identitas  moral  bangsa  Indonesia.  Mahasiswa sebagai  generasi  muda  juga  memiliki  idealisme  pergaulan  yang  sesuai  dengan dunianya  namun  juga  tidak  terlepas  dari  koridor  status  bangsa  Indonesia  yang memiliki  identitas  moral  bangsa  yang  luhur.  Oleh  karenanya  bagaimanapun berkembangnya pergaulan generasi muda harus selalu mencirikan identitas nasional sebagai  bangsa  Indonesia  yang  miliki  identitas  moral  yang  luhur  dalam  wadah negara kesatuan Republik Indonesia yang berasaskan Pancasila. Bilamana  isu-isu  yang  berkembang  di  lingkungan  kampus  UNY  sebagaimana diuraikan  di  atas  benar,  berarti  tidak  semua  mahasiswa  sependapat  dengan ketentuan  etika  pergaulan  mahasiswa  di  kampus  sebagaimana  diatur  dalam peraturan rektor di atas.  B. Rumusan Masalah Berdasarkan  latar  belakang  masalah  di  atas  dapat  dirumuskan  masalah  sebagai berikut: a. Bagaimana  pendapat  mahasiswa tentang etika pergaulan  mahasiswa di kampus yang sesuai dengan moral bangsa dan pergaulan generasi muda? ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(340, 5, 8, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net b. Bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan  mahasiswa  di kampus dilaksanakan dengan baik sesuai dengan identitas moral bangsa? C. Tujuan Penelitian Tujuan penelitian ini adalah: a. Mengetahui pendapat mahasiswa tentang etika pergaulan mahasiswa di kampus yang sesuai dengan moral bangsa dan pergaulan generasi muda. b. Mengetahui  bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan mahasiswa di kampus dilaksanakan sesuai dengan moral bangsa. D. Manfaat Penelitian Manfaat penelitian ini adalah: a. Sebagai  bahan  pengambilan  kebijakan  pimpinan  UNY  untuk  melakukan evaluasi  etika  pergaulan  mahasiswa  di  kampus  yang  tepat,  serta  untuk mengantisipasi  dan  melestarikan  identitas  moral  bangsa  yang  sesuai  dengan pergaulan  mahasiswa  serta  ciri  khas  UNY  sebagai  lembaga  penghasil  calon guru. b. Sebagai bahan kajian pembentukan karakter bangsa yang  sesuai perkembangan pergaulan generasi muda.  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(341, 5, 9, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB II KAJIAN TEORI A. Pendapat Kamus  Besar  Bahasa  Indonesia  menyatakan  bahwa  pendapat  adalah  (1) pikiran, anggapan, (2) buah pikiran atau perkiraan tentang suatu hal (seperti orang, peristiwa).(Kamus  Besar  Bahasa  Indonesia,  2001).  Dengan  demikian  yang dimaksud  pendapat  mahasiswa  adalah  (1)  pikiran,  anggapan  mahasiswa,  (2)  buah pikiran  atau  perkiraan  tentang  sesuatu  hal  dari  mahasiswa.  Jadi  pendapat mahasiswa tentang etika pergaulan mahasiswa di kampus adalah pikiran, anggapan mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  atau  buah  pikiran  atau perkiraan dari mahasiswa tentang etika pergaulan mahasiswa di kampus.  B. Etika Pergaulan Etika  berasal  dari  bahasa  Yunani  kuno ethos ,  yang  dalam  bentuk  tunggalnya mempunyai  arti:  tempat  tinggal  yang  biasa,  padang  rumput,  kandang,  kebiasaan, adat,  akhlak,  watak,  perasaan,  sikap,  cara  berpikir.  Dalam  bentuk  jamaknya,  etika mempunyai arti adat kebiasaan. (K. Bertens, 2005: 4). Dalam Kamus Besar Bahasa Indonesia  (2001)  etika  diartikan  ilmu  tentang  apa  yang  baik  dan  apa  yang  buruk dan  tentang  hak  dan  kewajiban  moral  (akhlak).  Sedangkan  etiket  diartikan  tata cara  (adat  sopan  santun  dan  sebagainya)  di  masyarakat  beradab  dalam  memelihara ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(342, 5, 10, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net hubungan  baik  antara  sesama  manusianya.  Etis  adalah  (1)  berhubungan  (sesuai) dengan etika, (2) sesuai dengan asas perilaku yang disepakati secara umum.  Etika  pergaulan  berasal  dari  kata  etika  dan  pergaulan.  Pengertian  etika  telah diuraikan  di  atas,  sedangkan  arti  pergaulan  menurut  Kamus  Besar  Bahasa Indonesia  (  2001)  adalah  hal  pertemanan.  Oleh  karenanya  etika  pergaulan  dapat diartikan  sebagai  adat  kebiasaan  tentang  perilaku  yang  disepakati  bersama  sebagai sesuatu  yang  baik  dalam  hal  pertemanan.  Maksudnya  tidak  lain  adalah  kebiasaan yang  baik  dalam  menjalin  hubungan  sebagai  teman.  Etika  pergaulan  sebagai  suatu kebiasaan  memiliki  sifat  khusus,  baik  dalam  bentuk  maupun  keluasannya.  Etika pergaulan  sangat  berhubungan  dengan  perilaku  individu  dalam  menjalin  hubungan dengan  individu  lain  di  masyarakat,  dan  perilaku  tersebut  tidaklah  bersifat universal,  karena  memiliki  kekhususan  yang  menjadi  ciri  masyarakat  yang bersangkutan.  Meskipun  demikian  tidaklah  semua  perilaku  bersifat  kedaerahan, tetapi  ada  pula  perilaku  yang  bersifat  universal  sebagai  ciri  manusia  yang bermartabat,  seperti  perilaku  menghargai  hak  asasi  manusia  dengan  tidak  berbuat kekerasan  kepada  sesama  manusia.  Skinner  sebagaimana  dikutip  oleh  Bimo Walgito  (1990:  17)  membagi  perilaku  menjadi  perilaku  yang  alami  ( innate behavior ) dan perilaku operan ( operant behavior ). Perilaku yang alami merupakan perilaku  refleksif  yang  dibawa  oleh  organisme  sejak  lahir,  yang  terjadi  sebagai refleksi  secara  spontan  terhadap  stimulus  yang  mengenai  organisme  yang bersangkutan.  Perilaku  ini  tterjadi  secara  otomatis  tidak  diperintah  oleh  pusat susunan  syaraf  atau  otak.  Sedangkan  perilaku  operan  dikendalikan  oleh  pusat kesadaran  atau  otak,  yang  sering  juga  disebut  sebagai  perilaku  psikologis.  Pada manusia  perilaku  psikologis  merupakan perilaku yang paling  dominan atau dengan kata  lain  perilaku  manusia  merupakan  perilaku  yang  dibentuk,  perilaku  yang diperoleh, perilaku yang dipelajari melalui proses belajar. Oleh  karenanya  etika  pergaulan  mahasiswa  di  kampus  dapat  diartikan  sebagai adat kebiasaan perilaku yang baik yang disepekati bersama dalam berinteraksi antar mahasiswa  di  kampus  sebagai  aktualisasi  hak  dan  kewajiban  moral  dalam ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(343, 5, 11, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net masyarakat  yang  beradab.  Ukuran  masyarakat  yang  beradab  tentunya  masyarakat yang menjunjung tinggi nilai-nilai asas kerohanian bangsa yakni Pancasila.  C. Perilaku Pergaulan di Kampus Pergaulan  di  kampus  sangat  berhubungan  dengan  perilaku  individu  sebagai bagian  masyarakat  kampus.  Perilaku  individu  tersebut  amatlah  beragam,  namun keberagaman  itu  tentunya  dalam  batas-batas  yang  sesuai  dengan  norma  moral masyarakat  kampus  yang  sudah  ditetapkan  dalam  kebiasaan  kampus.  Perilaku mahasiswa  selaku  individu  manusia  sebagian  besar  perilakunya  berupa  perilaku yang dibentuk. Bimo Walgito (1990: 18 – 19) mengemukakan bahwa pembentukan perilaku dapat dilakukan dengan berbagai cara, antara lain: a. Pembentukan perilaku dengan kondisioning atau kebiasaan,  yakni  dengan cara membiasakan diri untuk berperilaku sesuai yang diharapkan; b. Pembentukan  perilaku  dengan  pengertian,  yakni  dengan  cara  yang  sesuai dengan teori belajar kognitif, bahwa belajar dengan disertai adanya pengertian. Misalnya  contoh  bahwa  naik  motor  harus  pakai  helm,  karena  helm  untuk keamanan diri.    c. Pembentukan  perilaku  dengan  menggunakan  model  atau  contoh,  yakni pembentukan  perilaku  dengan  cara  yang  didasarkan  pada  model  atau  contoh. Misalnya  perilaku  pemimpin  yang  dijadikan  panutan  atau  contoh  bagi  yang dipimpinnya. Dengan  demikian  dari  berbagai  cara  pembentukan  perilaku  dapat  diketahui perilaku-perilaku  yang  berhubungan  dengan  pergaulan  mahasiswa  di  kampus. Perilaku-perilaku  tersebut  sangatlah  beragam  sesuai  dengan  macamnya  pergaulan yang  dilakukan  mahasiswa  di  kampus.  Pergaulan  mahasiswa  di  kampus berhubungan  dengan  perilaku  komunikasi  antara  mahasiswa  dengan  dosen,  antara mahasiswa  dengan  mahasiswa  dan  antara  mahasiswa  dengan  pegawai  universitas, Dengan  perilaku  yang  ditampilkan  menjadikan  seseorang  akan  mendapat  penilaian di  mata  orang  lain  dan  masyarakat.  Penilaian  itu  mengarah  pada  hal-hal  yang  baik maupun  yang  buruk  diukur  dari  etika  hidup  yang  disepakati  bersama  dalam ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(344, 5, 12, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net masyarakat  yang  bersangkutan.  Perilaku  komunikasi  yang  dapat  menimbulkan penilaian  biasanya  menyangkut  perilaku  mengenai  cara-cara  berbicara,  bertegur sapa,  dan  berpenampilan  di  lingkungan  di  mana  perilaku  itu  diaktualisasikan. Perilaku baik dan buruk  atau  tindakan  baik  dan  buruk penilaiannya hanyalah  dapat dilakukan  oleh  seseorang  ataupun  masyarakat.  Apabila  tindakan  yang  dinilai  baik dan  buruk  itu  dilakukan  dengan  sadar  atas  pilihan,  artinya  dengan  sengaja,  maka penilaian terhadapnya disebut penilaian etis atau moral. (Poedjawiyatna, 2003: 14). Perilaku  pergaulan  di  kampus  merupakan  perlaku  yang  berbeda  dengan perilaku  di  masyarakat  umum.  Lingkungan  kampus  merupakan  lingkungan masyarakat  ilmiah,  yang  dalam  berperilaku  selalu  dikaitkan  pada  hal-hal  ilmiah akademik.  Segala  perilaku  anggota  masyarakat  kampus  terikat  pada  koridor  etika pergaulan  di  kampus  yang  telah  menjadi  patokan  bagi  semua  warga  kampus. Lebih-lebih jika kampus itu sebagai pencetak calon-calon guru bahwa guru di mata masyarakat  dianggap  sebagai  profesi  yang  paling  mulia  dan  dijadikan  sebagai panutan  dalam  berperilaku  di  masyarakat.  Tentunya  kampus  yang  demikian  juga harus  menjadi  panutan  dan  contoh  berperilaku  yang  baik  bagi  anggota  masyarakat umum.  Namun  demikian  anggota  masyarakat  kampus  juga  sebagian  besar  sebagai bagian  atau  menjadi  anggota  dari  masyarakat  umum,  sehingga  segala  perilakunya sudah  pasti  juga  terbawa  dari  perilaku  sebagaimana  hidup  di  masyarakat.  Hal seperti  ini  sangatlah  berpengaruh  dalam  rutinitas  yang  terjadi  sehari-hari  di lingkungan  kampus.  Bila  masyarakat  kampus  sebagai  masyarakat  khusus seharusnya juga memiliki norma-norma pergaulan yang khas. D. Pancasila sebagai Identitas Moral Bangsa Pancasila  sebagai  ideologi  negara  Republik  Indonesia  mempunyai  kedudukan sebagai ideologi terbuka, maksudnya adalah bahwa nilai-nilai dan cita-citanya tidak dipaksakan dari luar melainkan digali dari harta kekayaan rohani, moral dan budaya masyarakat  Indonesia.  Oleh  karenanya  Pancasila  dapat  dikatakan  sebagai kepribadian  bangsa  Indonesia,  yakni  memberikan  corak  yang  khas  kepada  bangsa Indonesia  dan  tak  dapat  dipisahkan  dengan  bangsa  Indonesia  serta  merupakan  ciri ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(345, 5, 13, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net yang  melekat  pada  bangsa  Indonesia  yang  membedakan  dengan  bangsa  lain. Dengan  demikian  sebagai  kepribadian  bangsa  Indonesia,  Pancasila  dapat  pula dikatakan  merupakan  identitas  moral  bangsa  Indonesia.  Moral  dapat  diartikan merupakan ajaran-ajaran ataupun wejangan-wejangan, patokan-patokan, kumpulan peraturan,  baik  lisan  maupun  tertulis  tentang  bagaimana  manusia  hidup  dan bertindak  agar  menjadi  manusia  yang  baik  (Kaelan,  2008.  93).  Pancasila  sebagai moral  bangsa  dapat  diartikan  bahwa  Pancasila  menjadi  ajaran-ajaran, patokan-patokan  bagaimana  manusia  hidup  dan  bertindak  agar  menjadi  manusia yang baik. Oleh karenanya Pancasila sebagai identitas moral bangsa dapat diartikan bahwa  Pancasila  merupakan  ciri  patokan  atau  pedoman  hidup  yang  baik  bangsa Indonesia.  ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(346, 5, 14, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB III METODE PENELITIAN A. Jenis Penelitian Penelitian  ini  merupakan  penelitian  deskriptif  dikarenakan  hasil  penelitian  ini hanyalah  mengidentifikasikan  dan  mendeskripsikan  kecenderungan-kecenderungan pendapat  mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan kehidupan universitas khususnya Universitas Negeri Yogyakarta. B. Populasi Populasi  penelitian  ini  adalah  seluruh  mahasiswa  Fakultas  Ilmu  Sosial  dan  Ekonomi Universitas Negeri Yogyakarta yang terdaftar sebagai mahasiswa hingga tahun 2010. C. Teknik Sampling Teknik  sampling  yang  digunakan  dalam  penelitian  ini  adalah random  sampling. Setiap  mahasiswa  program  studi  yang  terdaftar  di  lingkungan  FISE  diambil  sebagai sampel secara acak dengan jumlah minimal 10% dari jumlah mahasiswa terdaftar di FISE UNY. Hal ini didasarkan pada keterbatasan dana dan waktu penelitian yang ditentukan. D. Instrumen Penelitian Instrumen  penelitian  ini  berupa  angket,  dalam  bentuk  baik  tertutup  berupa  pilihan pendapat  tentang  etika  pergaulan  di  kampus  maupun  angket  terbuka  yang  berupa  isian jawaban  dari  responden  atas  pertanyaan-pertanyaan  yang  terkait  dengan  masalah penelitian. E. Validasi Instrumen ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(347, 5, 15, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net Validasi instrumen menggunakan konstruk validasi dengan merujuk pada kajian teori yang relevan dengan permasalahan penelitian. F. Analisis Data Analisis data penelitian ini mengunakan analisis statistik deskriptif berupa identifikasi prosentase  kecenderungan-kecenderungan  pendapat  mahasiswa  tentang  etika  pergaulan mahasiswa  di  kampus  dan  analisis  kualitatif  berupa  uraian  pendapat  mahasiswa  tentang bagaimana  etika  pergaulan  mahasiswa  di  kampus  dilaksanakan  dengan  baik  sesuai dengan identitas moral bangsa. ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(348, 5, 16, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB IV HASIL PENELITIAN DAN PEMBAHASAN A. Hasil Penelitian Penelitian  ini  dilakukan  pada  bulan  Juni  sampai  dengan  Agustus  2010  terhadap mahasiswa  yang  terdaftar  di  Fakultas  Ilmu  Sosial  dan  Ekonomi  (FISE)  Universitas Negeri  Yogyakarta  (UNY)  selaku  populasi  yang  berjumlah  4832  orang,  dengan responden yang sesuai dengan teknik sampling yang digunakan berjumlah 485 orang.  Data  penelitian  ini  diperoleh  dari  angket  (quesioner)  yang  diberikan  kepada responden  berupa  angket  gabungan  terbuka  dan  tertutup  untuk  menjaring  data  tentang pandapat mahasiswa tentang  etika pergaulan mahasiswa di  kampus. Dari instrumen yang diberikan  kepada  responden  sebanyak  480  angket  dan  diterima  kembali  kepada  peneliti berjumlah 392  angket.  Tidak kembalinya  jumlah  angket  sesuai dengan jumlah yang telah diedarkan  kepada  responden  ada  beberapa  kemungkinan  yang  menurut  peneliti  menjadi kendalanya  yaitu,  waktu  penelitian  yang  singkat,  saat  akhir  kuliah  semester  menjelang ujian  semester,  menyita  waktu  responden  untuk  mengisi  angket  yang  bersangkutan,  dan tidak adanya reward  untuk responden yang mengisi angket (karena terbatasnya dana). Hasil  yang  diperoleh  dari  penelitian  ini  adalah  responden  sebagian  besar  bertempat tinggal  di:  kost  ada  57,6%,  sedangkan  yang  bersama  orang  tua  ada  31,2%,  dan  ikut saudara  sebanyak  11,2%.  Sebagian  besar  responden  mengetahui  tentang  etika  secara berurutan  berasal  dari:  orang  tua  kandung,  kemudian  dari  belajar  di  sekolah,  dari pengalaman hidup dan dari kebiasaan hidup. Dari  data  yang  diperoleh  dapat  diidentifikasi  beberapa  pendapat  mahasiswa  tentang etika pergaulan mahasiswa di kampus, antara lain: 1. Etika Pergaulan Mahasiswa di Kampus: ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(349, 5, 17, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net a. Bila  berpapasan  dengan  dosen  di  kampus,  menurut  sebagian  besar  mahasiswa sebaiknya  beri  salam  dengan  menundukkan  kepala  (74,4%  dari  seluruh  jumlah responden), dan sebagian kecil mahasiswa berpendapat pura-pura tidak tahu karena mahasiswa  anggap  dosen  yang  bersangkutan  juga  tidak  kenal  mahasiswa  tersebut (2,4%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  cium tangan,  jika  kenal  menyapa,  menundukkan  kepala  sembari  tersenyum,  beri  salam dengan jabat tangan. b. Berpakaian saat kuliah menurut mahasiswa sebaiknya rapi dan pantas pakai (75,2% dari  seluruh  jumlah  responden),  modis  dan  trendy  (6,4%  dari  seluruh  jumlah responden),  berpakaian  sesuai  dengan  bentuk  badan  (4%  dari  seluruh  jumlah responden).,  dan  memakai  seragam  yang  ditentukan  (3,2%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  berpakaian  yang  nyawan  dan menutup aurat. c. Bila  menghadap  dosen  untuk  berkonsultasi,  menurut  mahaiswa  sebaiknya melakukan  konfirmasi  terlebih  dahulu  kepada  dosen  yang  bersangkutan  mengenai kesediaannya  (60,8%  dari  seluruh  jumlah  responden),  konfirmasi  jadwal keberadaan  dosen  yang  bersangkutan  untuk  menentukan  waktu  yang  tepat berkonsultasi  (33,6%  dari  seluruh  jumlah  responden),  menanyakan  teman  terlebih dahulu  untuk  mengetahui  gaya  atau  kebiasaan  dosen  yang  bersangkutan  dalam membimbing  (3,2%  dari  seluruh  jumlah  responden),  langsung  mendatangi  dosen yang  bersangkutan  untuk  berkonsultasi  (2,4%  dari  seluruh  jumlah  responden). Beberapa mahasiswa menambahkan, harus sopan dan tidak mengganggu. d. Pendapat  mahasiswa  saat  bercakap-cakap  dengan  teman  dikampus  harus diperhatikan:  dalam  berbicara  perlu  dijaga  volume  suara  agar  tidak  mengganggu kuliah (50,4% dari seluruh jumlah responden), bebas berbicara sebagai jaminan hak kebebasan berpendapat (17,6% dari seluruh jumlah responden), tidak mendominasi pembicaraan  (15,2%  dari  seluruh  jumlah  responden),  isi  pembicaraan  tidak menyangkut  hal-hal  rahasia  biar  didengar  orang  lain  (5,6%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  dalam  bercakap-cakap  dengan tata  cara  penyampaian  yang baik, tata krama yang  baik,  bila  mengganggu  meminta ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(350, 5, 18, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net maaf,  menggunakan  bahasa  yang  sopan,  topik  yang  dibicarakan  tidak  berbau  sara, politik dan sex. e. Datang  ke  kampus  untuk  kegiatan  akademik  selain  kuliah  sebaiknya:  berpakaian rapi  tidak  memakai  baju  kaos  dan  harus  memakai  sepatu  (48,8%  dari  seluruh jumlah responden), berperilaku yang baik dan boleh berpakaian seadanya asal tidak menggangu  (20%  dari  seluruh  jumlah  responden),  berpakaian  rapi  dan  boleh memakai  sandal  (12,8%  dari  seluruh  jumlah  responden),  tak  perlu  memperhatikan penampilan  diri,  yang  penting  mengikuti  kegiatan  (2,4%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  tetap  menutup  aurat,  berpakaian yang rapi dan sopan. f. Berkomunikasi dengan dosen lewat telepon: memberi salam terlebih dahulu dengan meminta  maaf  bila  mengganggu  (78,4%  dari  seluruh  jumlah  responden),  pada  saat yang tidak mengganggu waktu kerja dosen yang bersangkutan (12,8% dari seluruh jumlah  responden),  menanyakan  terlebih  dahulu  kesediaannya  untuk  berbicara (5,6%  dari  seluruh  jumlah  responden),  berbicara  langsung  maksud  dan  tujuannya (4,8%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: memberi  salam  dan  minta  maaf  bila  mengganggu  kemudian  mengemukakan masud dan tujuannya. g. Berjalan  bersama  pacar  di  kampus:  selalu  memperhatikan  tata  cara  berbicara  yang wajar sebagai teman (34,4% dari seluruh jumlah responden), jaga jarak yang wajar agar tidak diketahui umum bahwa anda sedang pacaran (26,4% dari seluruh jumlah responden),  bergandengan  tangan  untuk  menunjukkan  kepada  umum  hubungan anda  (3,2%  dari  seluruh  jumlah  responden),  tidak  usah  memperhatikan  orang  lain yang  penting  perlakukan  pacar  dengan  mesra  (3,2%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  menjaga  sopan  santun  dan  tata krama, biasa saja selayaknya teman, berjalan sewajarnya tidak melanggar  etika  dan tidak  mengganggu  orang  lain,  sewajarnya  tidak  terlalu  berlebihan,  dan  tetap pacaran. h. Akan  membuang  sampah  di  kampus  sebaiknya:  di  tempat  sampah  yang  disediakan (81,6%  dari  seluruh  jumlah  responden),  tidak  dilakukan  karena  tidak  ada  tempat ', '2020-01-14 02:20:15', '2020-01-14 02:20:15'),
(351, 5, 19, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net sampah  yang  disediakan  (4,8%  dari  seluruh  jumlah  responden),  dibuang  ke  luar kampus  sembarangan  (2,4%  dari  seluruh  jumlah  responden),  di  sembarang  tempat karena  tidak  ada  tempat  sampah  yang  disediakan  (0,8%  dari  seluruh  jumlah responden). i. Untuk  melampiaskan  kejenuhan  saat  perkuliahan,  boleh  melakukan:  berbicara dengan  teman  dekat  anda  (41,6%  dari  seluruh  jumlah  responden),  usul  kepada dosen yang bersangkutan untuk merubah metode pembelajaran (30,4% dari seluruh jumlah  responden),  corat-coret  meja  dan  kursi  kuliah  (0,8%  dari  seluruh  jumlah responden),  corat-corat  tembok  ruang  kuliah  (0,8%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  mencorat-coret,  menggambar, menulis di buku sendiri, baca buku, keluar sebentar pamit kepada dosen untuk cari udara segar. j. Bila  ada  teman  yang  tidak  rapi  berpakaian  saat  kuliah,  sebaiknya:  dosen  menegur dan  mengingatkan  (36%  dari  seluruh  jumlah  responden),  dosen  melarang  yang bersangkutan  mengikuti  kuliah  (9,6%  dari  seluruh  jumlah  responden),  pengurus fakultas  atau  program  studi  menegur  dan  memberikan  sanksi  (6,4%  dari  seluruh jumlah  responden), anda  menegur  yang  bersangkutan untuk  merapikan  pakaiannya (24%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  untuk membiarkan  saja  karena  hak  yang  bersangkutan,  sama-sama  dewasa  sudah  tahu mana yang baik dan yang tidak baik, memberi masukan kepada yang bersangkutan, agar  dosen  menegurnya,  sebaiknya  teman  dan  pengurus  fakultas  menegurnya  agar yang bersangkutan berubah, dan diam saja. k. Potongan  rambut  mahasiswa  laki-laki  sebaiknya:  pendek  dan  rapi  (46,4%  dari seluruh  jumlah  responden),  boleh  panjang  asalkan  rapi  (23,2%  dari  seluruh  jumlah responden),  boleh  panjang  seperti  rambut  wanita  (3,2%  dari  seluruh  jumlah responden),  boleh  gundul  (2,4%  dari  seluruh  jumlah  responden),  pendek  seperti tentara (0,8%  dari seluruh jumlah responden).  Beberapa  mahasiswa  menambahkan asal rapi. l. Sebagai  mahasiswa  putri  bila  memakai  baju  dengan  celana  panjang  sebaiknya:  rapi dan  pantas  dipakainya  (53,6%  dari  seluruh  jumlah  responden),  tidak  terlalu  ketat ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(352, 5, 20, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net (21,6%  dari  seluruh  jumlah  responden),  sesuai  sebagai  baju  dan  celana  panjang wanita  (10,4%  dari  seluruh  jumlah  responden),  tidak  terlalu  longgar  (4,8%  dari seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  rapi,  pantas dipakai dan tidak ketat, sopan, nyaman dipakai. m. Mahasiswa  yang  terlambat  masuk  kuliah  sebaiknya:  meminta  maaf  kepada  dosen yang bersangkutan dengan sopan (69,6% dari seluruh jumlah responden), langsung masuk  asal  belum  lama  terlambatnya  (9,6%  dari  seluruh  jumlah  responden),  tidak usah  masuk  karena akan  mengganggu  (3,2%),  dosen melarang mahasiswa  tersebut untuk  mengikuti  kuliah  (0,8%  dari  seluruh  jumlah  responden).  Beberapa mahasiswa  menambahkan:  menjelaskan  alasan  keterlambatan,  meminta  maaf kepada dosenyang bersangkutan dan tidak bikin suasana rame, masuk saja. n. Perilaku  dan  penampilan  mahasiswa  juga  meniru  perilaku  dan  penampilan dosennya,  menurut  pendapat mahasiswa:  ya  sebagian kecil  mahasiswa  (29,6% dari seluruh  jumlah  responden),  tidak  semua  mahasiswa  (26,4%  dari  seluruh  jumlah responden),  tidak  semuanya  ditiru  oleh  mahasiswa  (25,6%  dari  seluruh  jumlah responden),  ya  sebagian  besar  mahasiswa  (9,6%  dari  seluruh  jumlah  responden). Beberapa mahasiswa menambahkan: tidak semuanya begitu. o. Mahasiswa  meminta  pelayanan  administrasi  akademik  dan  kemahasiswaan  kepada pegawai/karyawan  sebaiknya:  memohon dengan kata-kata  yang  sopan  (60,8% dari seluruh  jumlah  responden),  cukup  menyerahkan  syarat-syarat  yang  diperlukan (12%  dari  seluruh  jumlah  responden),  tidak  perlu  banyak  memohon  dan  bertanya asal  sudah  memenuhi  persyaratannya  (11,2%  dari  seluruh  jumlah  responden), memerintahkan  untuk  segera  dilayani  karena  memang  sudah  tugasnya  (2,4%  dari seluruh jumlah responden). p. Menduduki meja sebagai kursi yang ada di kampus: tidak boleh, karena kurang etis (56%  dari  seluruh  jumlah  responden),  tidak  boleh,  karena  bukan  kursi  (16%  dari seluruh  jumlah  responden),  boleh,  asalkan  kursi  yang  disediakan  sudah  terpakai semua  (8,8%  dari  seluruh  jumlah  responden),  boleh,  asalkan  tidak  ada  kursi  lain (5,6%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan,  boleh ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(353, 5, 21, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net tergantung  waktunya,  lagian  dosen  kadang  duduk  di  meja  waktu  mengajar,  tidak sesuai dan tidak boleh karena meja bukan untuk duduk. q. Mahasiswa yang berperilaku tidak sopan selama kuliah harus dijatuhi sanksi: perlu, tetapi  sanksinya  harus  yang  mendidik  (39,2%  dari  seluruh  jumlah  responden), perlu,  sebab untuk  memberi pelajaran  agar tidak mengulang  perbuatan  lagi  (24,8% dari  seluruh  jumlah  responden),  tidak  perlu,  cukup  diperingatkan  saja  (20,8%  dari seluruh jumlah responden), tidak perlu (4% dari seluruh jumlah responden). Beberapa mahasiswa menambahkan tidak perlu, diberi nasehat saja oleh dosen agar merubah kebiasaan buruknya, diberi sanksi moral saja. r. Mahasiswa mengisi waktu  luang  di  kampus  sebaiknya: diskusi  tugas kuliah  dengan teman di tempat yang  disediakan (36% dari  seluruh  jumlah  responden), ngobrol di taman  kampus  (32%  dari  seluruh  jumlah  responden),  belajar  di  perpustakaan (26,4%  dari  seluruh  jumlah  responden),  konsultasi  dosen  untuk  tugas  dan  materi kuliah  (8%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: untuk  kegiatan  organisasi,  pergi  ke  kost/HIMA,  membaca  koran  dan  tabloit, mengerjakan tugas. s. Mahasiswa  akan  terbiasa  berperilaku  baik  apabila:  penerapan  peraturan  akademik dan  peraturan  tata  tertib  laksanakan  dengan  tegas  (32,8%  dari  seluruh  jumlah responden),  sarana  dan  prasaran  kegiatan  dan  pembelajaran  di  kampus  tersedia dengan  baik  (24,8%  dari  seluruh  jumlah  responden),  dosen  juga  berperilaku  baik dan  dapat  dijadikan  panutan  (24%  dari  seluruh  jumlah  responden),  ada  peraturan tata  tertib  yang  jelas  dan  mudah  diketahui  setiap  mahasiswa  (19,2%  dari  seluruh jumlah  responden).  Beberapa  mahasiswa  menambahkan:  lingkungan  mendukung dan peraturannya tidak menekan mahasiswa. t. Berpapasan  dengan  dosen  di  kampus,  sebaiknya:  memberi  salam  karena  dosen yang  bersangkutan  anda  kenal  (52,8%  dari  seluruh  jumlah  responden),  cukup menganggukkan  kepala  kepada  dosen  tersebut  (25,6%  dari  seluruh  jumlah responden),  bersikap  biasa  saja  tidak  perlu  memandang  dosen  yang  bersangkutan (1,6%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(354, 5, 22, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net menganggukkan  kepala  dan  tersenyum,  memberi  salam  meskipun  tidak mengenalnya, menyapa dengan senyum. 2. Pelaksanaan  Etika  Pergaulan  Mahasiswa  di  Kampus  yang  sesuai  dengan  Identitas Moral Bangsa a. Pergaulan di kampus sebaiknya mengedepankan dan memperhatikan tatanan suatu sopan santun terhadap semua orang. b. Menjadi  orang  yang  Pancasilais  tidak  sepenuhnya  berfaham  barat,  jangan primordialisme,  erotisme  yang  secara  fanatik  berlebihan  dan  yang  sesuai  dengan ajaran agama. c. Etika  pergaulan  mahasiswa  sebaiknya  dilakukan  secara  wajar,  terlebih  pergaulan beda  jenis  sehingga  tidak  menimbulkan  fitnah/guncingan.  Bisa  menjaga  apa  yang seharusnya  tidak  dilakukan  (teriak-teriak,  bergandengan  lawan  jenis  dan sebagainya) d. Rapi, sopan tidak dipaksa e. Mentaati  aturan  yang  diberikan  oleh  kampus  dan  dapat  berperilaku  sopan  serta saling  menghargai  sesama  orang  dan  dapat  menjadi  panutan  untuk  adik-adik  yang baru. f. Bergaul sesuai dengan norma dan batas wajar sesuai adat ketimuran g. Jangan  dengan  paksaan  tetapi  dengan  penyadaran,  bertahap,  jangan  langsung karena  semua  perlu  proses,  pembimbing  harus  sabar  karena  semua  orang  memiliki cara pandang masing-masing. h. Pergaulan mahasiswa di kampus harus sesuai dengan norma dan etika pergaulan di masyarakat  maupun  sesuai  dengan  peraturan  yang  telah  ditetapkan  kampus,  selain harus  disosialisasikan  kepada  mahasiswa  mengenai  etika  pergaulan  karena  banyak juga mahasiswa yang kurang bisa menerapkan etika pergaulan di kampus. i. Cukup melaksanakan peraturan yang sudah ada j. Berpakaian sopan, bertingkah laku baik dan disiplin k. Dosen harus memberi contoh yang baik dalam etika maupun keprofesionalan l. Moral  tidak  melulu  diseragamkan  dengan  sebuah  simbol.  Moral  adanya  di  hati, bukan fisik, sandal tidak berpengaruh terhadap kapasitas otak dan intelegensia. ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(355, 5, 23, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net m. Menerapkan  beberapa  aturan  yang  tidak  terlalu  mengekang  mahasiswa, pelanggaran harus diberi sanksi yang sesuai pelanggarannya n. Sesuai  peraturan  yang  berlaku  yang  telah  disepakati  mahasiswa  dan  tidak membebani mahasiswa o. Sesuai  peraturan  yang  dikeluarkan  pihak  kampus  terutama  masalah  etika  dalam berpakaian untuk menunjang proses pembelajaran. Seluruh civitas akademika diberi pelajaran moral tak terkecuali dosen dan para pejabat-pejabat jajaran universitas. p. Sesuai dengan apa yang telah diajarkan, sesuai norma etika dan moral kebangsaan q. Berpakaian  rapi  dan  sopan,  sering  mengunjungi  perpustakaan,  tidak membeda-bedakan teman, dan berprestasi r. Sesuai dengan etika dan moral yang ada dalam masyarakat s. Bergaul  tanpa  membedakan  sara,  saling  bertegur  sapa  ketika  bertemu, menghormati  yang  lebih  tua  (kakak  angkatan)  tidak  semena-mena  pada  yang  lebih muda (adik angkatan). t. Beretika berdasarkan agama yang dianutnya, mematuhi peraturan universitas, antar mahasiswa  dengan  dosen  harus  dibenahi  supaya  dosen  tidak  diremehkan,  antara sesama mahasiswa harap wajar saja B. Pembahasan 1. Etika pergaulan mahasiswa di kampus Dari  data  sebagaimana  diuraikan  dalam  sub  bab  hasil  penelitian  di  atas  dapat diketahui  bahwa  sebagian  besar  mahasiswa  menganggap  bahwa  etika  pergaulan mahasiswa  di  kampus  harus  dilaksanakan  sesuai  dengan  sopan  santun,  adat  kebiasaan hidup  yang  baik,    jadi  lebih  mengartikan  sebagai  etiket.  Hal  ini  dapat  dirinci  sebagai berikut: a. Apabila  mahasiswa  berpapasan  dengan  dosen  di  kampus  beri  salam  dan menundukkan kepala (74,4%); b. Selama  kegiatan  kuliah  di  kampus  mahasiswa  harus  berpakaian  yang  rapi  dan  pantas pakai (75,2%); ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(356, 5, 24, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net c. Apabila  akan  menghadap  dosen  untuk  berkosultasi  sebaiknya  konfirmasi  dahulu kepada dosen yang bersangkutan atas kesediaannya untuk ditemui (60,8%); d. Apabila  mahasiswa  bercakap-cakap  di  kampus  perlu  dijaga  volume  suara  agar  tidak mengganggu kuliah (50,4%); e. Apabila  datang  ke  kampus  untuk  kegiatan  akademik  selain  kuliah  harus  berpakaian rapi, tidak memakai kaos dan memakai sepatu (48,8%); f. Apabila  berkomunikasi  dengan  dosen  lewat  telepon  dengan  memberi  salam  terlebih dahulu dan meminta maaf bila mengganggu (78,4%); g. Apabila  berjalan  bersama  pacar  di  kampus:  selalu  memperhatikan  tata  cara  berbicara yang wajar sebagai teman (34,4%); h. Apabila  akan  membuang  sampah  di  kampus  sebaiknya:  di  tempat  sampah  yang disediakan (81,6%); i. Untuk melampiaskan kejenuhan saat perkuliahan, boleh melakukan: berbicara dengan teman dekat (41,6%); j. Apabila  ada  teman yang  tidak  rapi berpakaian saat kuliah, sebaiknya: dosen  menegur dan mengingatkan (36%); k. Potongan rambut mahasiswa laki-laki sebaiknya: pendek dan rapi (46,4%); l. Mahasiswa  putri  apabila  memakai  baju  dengan  celana  panjang  sebaiknya:  rapi  dan pantas dipakainya (53,6%); m. Mahasiswa  yang  terlambat  masuk  kuliah  sebaiknya:  meminta  maaf  kepada  dosen yang bersangkutan dengan sopan (69,6%); n. Perilaku  dan  penampilan  mahasiswa  sebagian  kecil  meniru  perilaku  dan  penampilan dosennya (29,6%); o. Mahasiswa  yang  meminta  pelayanan  administrasi  akademik  dan  kemahasiswaan kepada  pegawai/karyawan  sebaiknya:  memohon  dengan  kata-kata  yang  sopan (60,8%); ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(357, 5, 25, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net p. Menduduki  meja  sebagai  kursi  yang  ada  di  kampus:  tidak  boleh,  karena  kurang  etis (56%); q. Mahasiswa  yang  berperilaku  tidak  sopan  selama  kuliah  harus  dijatuhi  sanksi,  tetapi sanksinya harus yang mendidik (39,2%); r. Mahasiswa  mengisi  waktu  luang  di  kampus  sebaiknya  dengan  diskusi  tugas  kuliah bersama teman di tempat yang disediakan (36%); s. Mahasiswa akan terbiasa berperilaku baik apabila: penerapan peraturan akademik dan peraturan tata tertib laksanakan dengan tegas (32,8%); t. Bila  berpapasan  dengan  dosen  di  kampus,  sebaiknya:  memberi  salam  karena  dosen yang bersangkutan anda kenal (52,8%). Etika  pergaulan  mahasiswa  di  kampus  menurut  mahasiswa  sebaiknya  ditetapkan oleh  pihak  kampus  sebagai  peraturan  pergaulan  di  lingkungan  kampus  dengan  sanksi yang  mendidik.  Yang  menarik  menurut  mahasiswa  adalah  bahwa  perilaku  mahasiswa  di kampus  hanya  sebagian  kecil  yang  meniru  perilaku  dosen,  dan  dosen  diharapkan  aktif untuk menegur mahasiswa apabila ada mahasiswa yang berperilaku tidak baik di kampus. Sedangkan  menurut  mahasiswa  bahwa  pelaksanaan  etika  pergaulan  mahasiswa  di kampus  yang  sesuai  dengan  identitas  moral  bangsa  harus  dengan  mengedepankan  sopan santun,  sesuai  dengan  ajaran  agama,  nilai-nilai  Pancasila  dan  dituangkan  dalam  bentuk peraturan kampus (universitas) yang disosialisasikan kepada seluruh mahasiswa. Dengan  demikian  dari  hasil  penelitian  di  atas  dapat  dikemukakan  bahwa  pendapat mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  ternyata  sebagian  besar mahasiswa  FISE  UNY  menyatakan  bahwa  etika  pergaulan  mahasiswa  di  kampus merupakan  perilaku  yang  baik  di  lingkungan  kampus  sesuai  kebiasaan  hidup  masyarakat Indonesia  dalam  berhubungan  dengan  sesama  mahasiswa  maupun  dalam  berhubungan antara mahasiswa dengan dosen dan karyawan kampus. Perilaku yang baik di kampus ini menurut  mahasiswa,  akan  berjalan  dengan  baik  apabila  ada  peraturan  yang  jelas  yang mengaturnya  serta  penerapan  sanksi  yang  tegas  bagi  yang  melanggarnya,  dan  peraturan akademik yang sudah ada harus dilaksanakan dengan tegas.   ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(358, 5, 26, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net 2. Pelaksanaan  Etika  Pergaulan  Mahasiswa  di  Kampus  yang  sesuai  dengan  Identitas Moral Bangsa Pelaksanaan  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas moral  bangsa  menurut  mahasiswa  dengan  memperhatikan  etika  pergaulan  di  masyakarat yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan  universitas  yang  telah disepakati  oleh  mahasiswa  dengan  tidak  memberatkan  mahasiswa  dan  peraturan  ini berlaku  bagi  komunitas  kampus,  baik  mahasiswa  maupun  dosen  dan  karyawan.. Pelaksanaan  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas  moral bangsa  dengan  tidak  dipaksakan  tetapi  dengan  penyadaran  melalui  proses  yang berlangsung secara bertahap. ', '2020-01-14 02:20:16', '2020-01-14 02:20:16');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(359, 5, 27, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB V PENUTUP A. Kesimpulan Dari  hasil  penelitian  dan  pembahasan  di  atas  dapat  ditarik  kesimpulan  bahwa pendapat mahasiswa FISE UNY tentang: 1. Etika pergaulan mahasiswa di  kampus  adalah  bahwa etika pergaulan  mahasiswa di kampus  merupakan  perilaku  yang  baik  di  lingkungan  kampus  sesuai  kebiasaan hidup  masyarakat  Indonesia  dalam  berhubungan  dengan  sesama  mahasiswa maupun  dalam  berhubungan  antara  mahasiswa  dengan  dosen  dan  karyawan kampus.  Perilaku  yang  baik  di  kampus  ini  menurut  mahasiswa,  akan  berjalan dengan  baik  apabila  ada  peraturan  yang  jelas  yang  mengaturnya  serta  penerapan sanksi  yang  tegas  bagi  yang  melanggarnya,  dan  peraturan  akademik  yang  sudah ada harus dilaksanakan dengan tegas.   2. Etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas  moral  bangsa menurut  mahasiswa  dilaksanakan  dengan  memperhatikan  etika  pergaulan  di masyakarat  yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan universitas  yang  telah  disepakati  oleh  mahasiswa  dengan  tidak  memberatkan mahasiswa  dan  peraturan  ini  berlaku  bagi  komunitas  kampus,  baik  mahasiswa maupun  dosen  dan  karyawan..  Pelaksanaannya  dengan  tidak  dipaksakan  tetapi dengan penyadaran melalui proses yang berlangsung secara bertahap. B. Saran ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(360, 5, 28, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net 1. Perlu  sosialisasi  Peraturan  Rektor  UNY  Nomor  3  Tahun  2009  ke  seluruh  sivitas akademika UNY terutama mahasiswa agar dapat dijadikan panduan dalam pergaulan di lingkungan kampus. 2. Segera  dipersiapkan  sarana  dan  prasarana  yang  terkait  berlakunya  Peraturan  Rektor UNY  Nomor  3  Tahun  2009  agar  jika  terjadi  pelanggaran  tidak  berlarut-larut penyelesaiannya. 3. Kuliah  Pendidikan  Pancasila  harus  dapat  menjadi  sarana  pembentukan  perilaku mahasiswa yang Pancasilais di kampus UNY. DAFTAR PUSTAKA Bimo Walgito (1991).  Psikologi Sosial (Suatu Pengantar).  Andi Offset. Yogyakarta. Franz  Magnis  Suseno  (1998).  Model  Pendekatan  Etika.   Penerbit  Kanisius. Yogyakarta. Kaelan (1987). Pancasila Yuridis Kenegaraan.  Liberty. Yogyakarta. --------- (2008).  Pendidikan Pancasila. Paradigma. Yogyakarta. K. Bertens (2005).  Etika. PT Gramedia Utama. Jakarta. Larry  May,  Shari  Collins-Chobanian,  Kai  Wong  (2001). Etika  Terapan  I  Sebuah Pendekatan Multikultur.  PT Tiara Wacana. Yogyakarta. Poedjawijatna (2003). Etika Filsafat Tingkah Laku.  Rineka Cipta. Jakarta Suharsimi  Arikunto  (1992). Prosedur  Penelitian  Suatu  Pendekatan  Praktik.   Rineka Cipta. Jakarta. ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(361, 5, 29, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net ', '2020-01-14 02:20:16', '2020-01-14 02:20:16'),
(362, 6, 1, 'react-native #react- native ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(363, 6, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(364, 6, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(365, 6, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(366, 6, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(367, 6, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(368, 6, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(369, 6, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(370, 6, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(371, 6, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(372, 6, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(373, 6, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(374, 6, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(375, 6, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(376, 6, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(377, 6, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(378, 6, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(379, 6, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(380, 6, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(381, 6, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(382, 6, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(383, 6, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(384, 6, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(385, 6, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(386, 6, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(387, 6, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(388, 6, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(389, 6, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(390, 6, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(391, 6, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(392, 6, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(393, 6, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(394, 6, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(395, 6, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(396, 6, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(397, 6, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(398, 6, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(399, 6, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(400, 6, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(401, 6, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(402, 6, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(403, 6, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(404, 6, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(405, 6, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(406, 6, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(407, 6, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(408, 6, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(409, 6, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(410, 6, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(411, 6, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(412, 6, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(413, 6, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(414, 6, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(415, 6, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(416, 6, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(417, 6, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(418, 6, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(419, 6, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(420, 6, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(421, 6, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(422, 6, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(423, 6, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(424, 6, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(425, 6, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(426, 6, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(427, 6, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(428, 6, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(429, 6, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(430, 6, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(431, 6, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(432, 6, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(433, 6, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(434, 6, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:17', '2020-01-14 02:20:17'),
(435, 6, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(436, 6, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(437, 6, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(438, 6, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(439, 6, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(440, 6, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(441, 6, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(442, 6, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(443, 6, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(444, 6, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(445, 6, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(446, 6, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(447, 6, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(448, 6, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(449, 6, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(450, 6, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(451, 6, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(452, 6, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(453, 6, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(454, 6, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(455, 6, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(456, 6, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(457, 6, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(458, 6, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(459, 6, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(460, 6, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(461, 6, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(462, 6, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:18', '2020-01-14 02:20:18'),
(463, 7, 1, 'react-native #react- native ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(464, 7, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(465, 7, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(466, 7, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(467, 7, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(468, 7, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(469, 7, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(470, 7, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(471, 7, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(472, 7, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(473, 7, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(474, 7, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(475, 7, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(476, 7, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(477, 7, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(478, 7, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(479, 7, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(480, 7, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(481, 7, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(482, 7, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(483, 7, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(484, 7, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(485, 7, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(486, 7, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(487, 7, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(488, 7, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(489, 7, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(490, 7, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(491, 7, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(492, 7, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(493, 7, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(494, 7, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(495, 7, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(496, 7, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(497, 7, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(498, 7, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(499, 7, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(500, 7, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(501, 7, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(502, 7, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(503, 7, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(504, 7, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(505, 7, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(506, 7, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(507, 7, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(508, 7, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(509, 7, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(510, 7, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(511, 7, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(512, 7, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(513, 7, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(514, 7, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(515, 7, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(516, 7, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(517, 7, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(518, 7, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(519, 7, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(520, 7, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(521, 7, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(522, 7, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(523, 7, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(524, 7, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(525, 7, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(526, 7, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(527, 7, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(528, 7, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(529, 7, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(530, 7, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(531, 7, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(532, 7, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(533, 7, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(534, 7, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(535, 7, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(536, 7, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(537, 7, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(538, 7, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(539, 7, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(540, 7, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:19', '2020-01-14 02:20:19'),
(541, 7, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(542, 7, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(543, 7, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(544, 7, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(545, 7, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(546, 7, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(547, 7, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(548, 7, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(549, 7, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(550, 7, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(551, 7, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(552, 7, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(553, 7, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(554, 7, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(555, 7, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(556, 7, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(557, 7, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(558, 7, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(559, 7, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(560, 7, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(561, 7, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(562, 7, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(563, 7, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:20', '2020-01-14 02:20:20'),
(564, 8, 1, 'react-native #react- native ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(565, 8, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(566, 8, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(567, 8, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(568, 8, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(569, 8, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(570, 8, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(571, 8, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(572, 8, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(573, 8, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(574, 8, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(575, 8, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(576, 8, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(577, 8, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(578, 8, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(579, 8, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(580, 8, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(581, 8, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(582, 8, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(583, 8, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(584, 8, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(585, 8, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(586, 8, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(587, 8, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(588, 8, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(589, 8, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(590, 8, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(591, 8, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(592, 8, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(593, 8, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(594, 8, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(595, 8, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(596, 8, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(597, 8, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(598, 8, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(599, 8, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(600, 8, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(601, 8, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(602, 8, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(603, 8, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(604, 8, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(605, 8, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(606, 8, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(607, 8, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(608, 8, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(609, 8, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(610, 8, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(611, 8, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(612, 8, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(613, 8, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(614, 8, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(615, 8, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(616, 8, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(617, 8, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(618, 8, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(619, 8, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(620, 8, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(621, 8, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(622, 8, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(623, 8, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(624, 8, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(625, 8, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(626, 8, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(627, 8, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(628, 8, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(629, 8, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(630, 8, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(631, 8, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(632, 8, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(633, 8, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(634, 8, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(635, 8, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(636, 8, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(637, 8, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(638, 8, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(639, 8, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(640, 8, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(641, 8, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(642, 8, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(643, 8, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(644, 8, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(645, 8, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:21', '2020-01-14 02:20:21'),
(646, 8, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(647, 8, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(648, 8, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(649, 8, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(650, 8, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(651, 8, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(652, 8, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(653, 8, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(654, 8, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(655, 8, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(656, 8, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(657, 8, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(658, 8, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(659, 8, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(660, 8, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(661, 8, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(662, 8, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(663, 8, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(664, 8, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:22', '2020-01-14 02:20:22'),
(665, 10, 1, 'react-native #react- native ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(666, 10, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(667, 10, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(668, 10, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(669, 10, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(670, 10, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(671, 10, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(672, 10, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(673, 10, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(674, 10, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(675, 10, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(676, 10, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(677, 10, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(678, 10, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(679, 10, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(680, 10, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(681, 10, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(682, 10, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(683, 10, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(684, 10, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(685, 10, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(686, 10, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(687, 10, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(688, 10, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(689, 10, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(690, 10, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(691, 10, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(692, 10, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(693, 10, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(694, 10, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(695, 10, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(696, 10, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(697, 10, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(698, 10, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(699, 10, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(700, 10, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(701, 10, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(702, 10, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(703, 10, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(704, 10, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(705, 10, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(706, 10, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(707, 10, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(708, 10, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(709, 10, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(710, 10, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(711, 10, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(712, 10, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(713, 10, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(714, 10, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(715, 10, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(716, 10, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(717, 10, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(718, 10, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(719, 10, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(720, 10, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(721, 10, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(722, 10, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(723, 10, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(724, 10, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(725, 10, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(726, 10, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(727, 10, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(728, 10, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(729, 10, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(730, 10, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(731, 10, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(732, 10, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(733, 10, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(734, 10, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(735, 10, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(736, 10, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(737, 10, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(738, 10, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(739, 10, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(740, 10, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(741, 10, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(742, 10, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(743, 10, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(744, 10, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(745, 10, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(746, 10, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(747, 10, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(748, 10, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(749, 10, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(750, 10, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:23', '2020-01-14 02:20:23'),
(751, 10, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(752, 10, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(753, 10, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(754, 10, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(755, 10, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(756, 10, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(757, 10, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(758, 10, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(759, 10, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(760, 10, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(761, 10, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(762, 10, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(763, 10, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(764, 10, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(765, 10, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(766, 12, 1, 'react-native #react- native ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(767, 12, 2, 'Table of Contents About 1 Chapter 1: Getting started with react-native 2 Remarks 2 Examples 2 Setup for Mac 2 Setup for Windows 14 Setup for Linux (Ubuntu) 15 Start the terminal and run the following commands to install nodeJS: 15 If node command is unavailable 15 Alternatives NodeJS instalations: 16 check if you have the current version 16 Run the npm to install the react-native 16 Android SDK or Android Studio 16 Android SDK e ENV 16 Example app init 17 Obs: Always check if the version on android/app/build.gradle is the same as the Build Tool 17 Open Android AVD to set up a virtual android. Execute the command line: 18 Chapter 2: Android - Hardware Back Button 19 Examples 19 Detect Hardware back button presses in Android 19 Example of BackAndroid along with Navigator 19 Example of Hardware back button detection using BackHandler 20 Hardware back button handling using BackHandler and Navigation Properties (without using d 20 Chapter 3: Animation API 22 Examples 22 Animate an Image 22 Chapter 4: Command Line Instructions 23 Examples 23 Check version installed 23 Upgrade existing project to latest RN version 23 ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(768, 12, 3, 'Logging 23 Initialize and getting started with React Native project 23 Start React Native Packager 24 Add android project for your app 24 Chapter 5: Components 25 Examples 25 Basic Component 25 Stateful Component 25 Stateless Component 25 Chapter 6: Create a shareable APK for android 27 Introduction 27 Remarks 27 Examples 27 Create a key to sign the APK 27 Once the key is generated, use it to generate the installable build: 27 Generate the build using gradle 27 Upload or share the generated APK 27 Chapter 7: Custom Fonts 29 Examples 29 Steps to use custom fonts in React Native (Android) 29 Steps to use custom fonts in React Native (iOS) 29 Custom fonts for both Android and IOS 30 Android 31 iOS 31 Chapter 8: Debugging 33 Syntax 33 Examples 33 Start Remote JS Debugging in Android 33 Using console.log() 33 Chapter 9: ESLint in react-native 34 Introduction 34 Examples 34 ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(769, 12, 4, 'How to start 34 Chapter 10: Hello World 35 Examples 35 Editing index.ios.js or index.android.js 35 Hello world! 35 Chapter 11: HTTP Requests 36 Syntax 36 Remarks 36 Examples 36 WebSockets 36 HTTP with the fetch API 36 Networking with XMLHttpRequest 37 Using Promises with the fetch API and Redux 37 Web Socket with Socket.io 38 Http with axios 39 Chapter 12: Images 41 Examples 41 Image Module 41 Image Example 41 Conditional Image Source 41 Using variable for image path 41 To fit an Image 42 Chapter 13: Integration with Firebase for Authentication 43 Introduction 43 Examples 43 React Native - ListView with Firebase 43 Authentication In React Native Using Firebase 44 Chapter 14: Layout 46 Examples 46 Flexbox 46 flexDirection 46 Alignment axis 47 ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(770, 12, 5, 'Alignment 49 Flex size 49 Chapter 15: Linking Native API 50 Introduction 50 Examples 50 Outgoing Links 50 URI Schemes 50 Incomming Links 51 Chapter 16: ListView 52 Examples 52 Simple Example 52 Chapter 17: Modal 53 Introduction 53 Parameters 53 Examples 53 Modal Basic Example 53 Transparent Modal Example 54 Chapter 18: Multiple props rendering 56 Examples 56 render multiple variables 56 Chapter 19: Native Modules 57 Examples 57 Create your Native Module (IOS) 57 Introduction 57 Example 57 Chapter 20: Navigator Best Practices 59 Examples 59 Navigator 59 Use react-navigation for navigation in react native apps 61 react-native Navigation with react-native-router-flux 62 Chapter 21: Navigator with buttons injected from pages 64 ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(771, 12, 6, 'Examples 64 Introduction 64 Full commented example 64 Chapter 22: Platform Module 68 Examples 68 Find the OS Type/Version 68 Chapter 23: Props 69 Introduction 69 Examples 69 What are props? 69 Use of props 69 PropTypes 70 Default Props 71 Chapter 24: PushNotification 72 Introduction 72 Remarks 72 Examples 72 Push Notification Simple Setup 72 Navigating to scene from Notification 74 Chapter 25: RefreshControl with ListView 77 Remarks 77 Examples 77 Refresh Control 77 onRefresh function Example 77 Refresh Control with ListView Full Example 77 Chapter 26: Render Best Practises 80 Introduction 80 Examples 80 Functions in JSX 80 Chapter 27: Routing 82 Introduction 82 ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(772, 12, 7, 'Examples 82 Navigator component 82 Chapter 28: Run an app on device (Android Version) 83 Remarks 83 Examples 83 Running an app on Android Device. 83 Chapter 29: State 84 Syntax 84 Examples 84 setState 84 Full Example 84 Initialize State 86 Chapter 30: Styling 87 Introduction 87 Syntax 87 Remarks 87 Examples 87 Styling using inline styles 87 Styling using a stylesheet 87 Adding multiple styles 88 Conditional Styling 88 Chapter 31: Unit Testing 90 Introduction 90 Examples 90 Unit testing with jest 90 Unit Test In React Native Using Jest 91 Chapter 32: WebView 92 Introduction 92 Examples 92 Simple component using webview 92 Credits 93 ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(773, 12, 8, 'About You can share this PDF with anyone you feel could benefit from it, downloaded the latest version  from:  react-native It is an unofficial and free react-native ebook created for educational purposes. All the content is  extracted from  Stack Overflow Documentation , which is written by many hardworking individuals at  Stack Overflow. It is neither affiliated with Stack Overflow nor official react-native. The content is released under Creative Commons BY-SA, and the list of contributors to each  chapter are provided in the credits section at the end of this book. Images may be copyright of  their respective owners unless otherwise specified. All trademarks and registered trademarks are  the property of their respective company owners. Use the content presented in this book at your own risk; it is not guaranteed to be correct nor  accurate, please send your feedback and corrections to  info@zzzprojects.com https://riptutorial.com/ 1  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(774, 12, 9, 'Chapter 1: Getting started with react-native Remarks React Native lets you build mobile apps using only JavaScript. It uses the same design as React,  letting you compose a rich mobile UI from declarative components. With React Native, you don''t build a “mobile web app”, an “HTML5 app”, or a “hybrid app”. You  build a real mobile app that''s indistinguishable from an app built using Objective-C or Java. React  Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just  put those building blocks together using JavaScript and React. It is open-source and maintained by Facebook. Website• Documentation• GitHub Repository• Source:  React Native website Examples Setup for Mac Installing package manager Homebrew  brew Paste that at a Terminal prompt. /usr/bin/ruby -e &#34;$(curl -fsSL  https://raw.githubusercontent.com/Homebrew/install/master/install)&#34; Installing Xcode IDE Download it using link below or find it on Mac App Store https://developer.apple.com/download/ NOTE:  If you have  Xcode-beta.app  installed along with production version of  Xcode.app , make sure you are using production version of  xcodebuild  tool. You can  set it with: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ Installing Android environment Git  git *If you have installed XCode, Git is already installed, otherwise run the following• https://riptutorial.com/ 2  ', '2020-01-14 02:20:24', '2020-01-14 02:20:24'),
(775, 12, 10, 'brew install git  Latest JDK• Android Studio Choose a Custom installation• https://riptutorial.com/ 3  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(776, 12, 11, 'https://riptutorial.com/ 4  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(777, 12, 12, 'Choose both Performance and Android Virtual Device https://riptutorial.com/ 5  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(778, 12, 13, 'https://riptutorial.com/ 6  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(779, 12, 14, 'After installation, choose Configure -> SDK Manager from the Android Studio welcome  window. https://riptutorial.com/ 7  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(780, 12, 15, 'https://riptutorial.com/ 8  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(781, 12, 16, 'In the SDK Platforms window, choose Show Package Details and under Android 6.0  (Marshmallow), make sure that Google APIs, Intel x86 Atom System Image, Intel x86  Atom_64 System Image, and Google APIs Intel x86 Atom_64 System Image are checked. https://riptutorial.com/ 9  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(782, 12, 17, 'https://riptutorial.com/ 10  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(783, 12, 18, 'In the SDK Tools window, choose Show Package Details and under Android SDK Build  Tools, make sure that Android SDK Build-Tools 23.0.1 is selected. https://riptutorial.com/ 11  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(784, 12, 19, 'https://riptutorial.com/ 12  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(785, 12, 20, 'Environment Variable  ANDROID_HOME Ensure the ANDROID_HOME environment variable points to your existing Android SDK. To  do that, add this to your ~/.bashrc, ~/.bash_profile (or whatever your shell uses) and re-open  your terminal: If you installed the SDK without Android Studio, then it may be something like:  /usr/local/opt/android-sdk export ANDROID_HOME=~/Library/Android/sdk• Dependencies for Mac You will need Xcode for iOS and Android Studio for android, node.js, the React Native command  line tools, and Watchman. We recommend installing node and watchman via Homebrew. brew install node  brew install watchman Watchman  is a tool by Facebook for watching changes in the filesystem. It is highly  recommended you install it for better performance. It is optional. Node comes with npm, which lets you install the React Native command line interface. npm install -g react-native-cli If you get a permission error, try with sudo: sudo npm install -g react-native-cli. For iOS the easiest way to install Xcode is via the Mac App Store. And for android download and  install Android Studio. If you plan to make changes in Java code, we recommend Gradle Daemon which speeds up the  build. Testing your React Native Installation Use the React Native command line tools to generate a new React Native project called  "AwesomeProject", then run react-native run-ios inside the newly created folder. react-native init AwesomeProject  cd AwesomeProject  react-native run-ios You should see your new app running in the iOS Simulator shortly. react-native run-ios is just one  way to run your app - you can also run it directly from within Xcode or Nuclide. https://riptutorial.com/ 13  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(786, 12, 21, 'Modifying your app Now that you have successfully run the app, let''s modify it. Open index.ios.js or index.android.js in your text editor of choice and edit some lines.• Hit Command  + R in your iOS Simulator to reload the app and see your change! That''s it!• Congratulations! You''ve successfully run and modified your first React Native app. source:  Getting Started - React-Native Setup for Windows Note: You cannot develop react-native apps for iOS on Windows, only react-native android apps. The official setup docs for react-native on windows can be  found here . If you need more details  there is a  granular guide here . Tools/Environment Windows 10• command line tool (eg Powershell or windows command line)• Chocolatey  ( steps to setup via PowerShell )• The JDK (version 8)• Android Studio• An Intel machine with Virtualization technology enabled for HAXM (optional, only needed if  you want to use an emulator)• 1) Setup your machine for react native development Start the command line as an administrator run the following commands: choco install nodejs.install  choco install python2 Restart command line as an administrator so you can run npm npm install -g react-native-cli After running the last command copy the directory that react-native was installed in. You will need  this for Step 4. I tried this on two computers in one case it was:  C:\\Program Files (x86)\\Nodist\\v- x64\\6.2.2 . In the other it was:  C:\\Users\\admin\\AppData\\Roaming\\npm 2) Set your Environment Variables A Step by Step guide with images can be found here for this section. Open the Environment Variables window by navigating to: [Right click] "Start" menu -> System -> Advanced System Settings -> Environment Variables https://riptutorial.com/ 14  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(787, 12, 22, 'In the bottom section find the "Path" System Variable and add the location that react-native was  installed to in step 1. If you haven''t added an ANDROID_HOME environment variable you will have to do that here too.  While still in the "Environment Variables" window, add a new System Variable with the name  "ANDROID_HOME" and value as the path to your android sdk. Then restart the command line as an admin so you can run react-native commands in it. 3) Create your project  In command line, navigate to the folder you want to place your project and  run the following command: react-native init ProjectName 4) Run your project  Start an emulator from android studio Navigate to the root directory of your  project in command line and run it: cd ProjectName  react-native run-android You may run into dependency issues. For example, there may be an error that you do not have  the correct build tools version. To fix this you will have to open  the sdk manager in Android Studio   and download the build tools from there. Congrats! To refresh the ui you can press the  r  key twice while in the emulator and running the app. To see  developer options you can press  ctrl + m . Setup for Linux (Ubuntu) 1) Setup Node.JS Start the terminal and run the following  commands to install nodeJS: curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -    sudo apt-get install nodejs If node command is unavailable sudo ln -s /usr/bin/nodejs /usr/bin/node https://riptutorial.com/ 15  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(788, 12, 23, 'Alternatives NodeJS instalations: curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -  sudo apt-get install -y nodejs or curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -  sudo apt-get install -y nodejs check if you have the current version node -v  Run the npm to install the react-native sudo npm install -g react-native-cli 2) Setup Java sudo apt-get install lib32stdc++6 lib32z1 openjdk-7-jdk 3) Setup Android Studio: Android SDK or Android Studio http://developer.android.com/sdk/index.html Android SDK e ENV export ANDROID_HOME=/YOUR/LOCAL/ANDROID/SDK  export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools 4) Setup emulator: On the terminal run the command android Select "SDK Platforms" from within the SDK Manager and you should see a blue checkmark next  to "Android 7.0 (Nougat)". In case it is not, click on the checkbox and then "Apply". https://riptutorial.com/ 16  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(789, 12, 24, '5) Start a project Example app init react-native init ReactNativeDemo && cd ReactNativeDemo Obs: Always check if the version on  android/app/build.gradle  is the  same as the Build Tools downloaded on your android SDK android {      compileSdkVersion XX      buildToolsVersion &#34;XX.X.X&#34;  ... 6) Run the project https://riptutorial.com/ 17  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(790, 12, 25, 'Open Android AVD to set up a virtual android. Execute the  command line: android avd Follow the instructions to create a virtual device and start it Open another terminal and run the command lines: react-native run-android  react-native start Read Getting started with react-native online:  https://riptutorial.com/react-native/topic/857/getting- started-with-react-native https://riptutorial.com/ 18  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(791, 12, 26, 'Chapter 2: Android - Hardware Back Button Examples Detect Hardware back button presses in Android BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, function() {      if (!this.onMainScreen()) {          this.goBack();          return true;      }      return false;  }); Note:  this.onMainScreen()  and  this.goBack()  are not built in functions, you also need to implement  those. ( https://github.com/immidi/react- native/commit/ed7e0fb31d842c63e8b8dc77ce795fac86e0f712) Example of BackAndroid along with Navigator This is an example on how to use React Native''s  BackAndroid  along with the  Navigator . componentWillMount  registers an event listener to handle the taps on the back button. It checks if  there is another view in the history stack, and if there is one, it goes back -otherwise it keeps the  default behaviour. More information on the  BackAndroid  docs  and the  Navigator  docs . import React, { Component } from &#39;react&#39;; // eslint-disable-line no-unused-vars    import {    BackAndroid,    Navigator,  } from &#39;react-native&#39;;    import SceneContainer from &#39;./Navigation/SceneContainer&#39;;  import RouteMapper from &#39;./Navigation/RouteMapper&#39;;    export default class AppContainer extends Component {      constructor(props) {      super(props);        this.navigator;    }      componentWillMount() {      BackAndroid.addEventListener(&#39;hardwareBackPress&#39;, () => {        if (this.navigator && this.navigator.getCurrentRoutes().length > 1) {          this.navigator.pop();          return true;        }  https://riptutorial.com/ 19  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(792, 12, 27, '      return false;      });    }      renderScene(route, navigator) {      this.navigator = navigator;        return (         {            if (route.index > 0) {              navigator.pop();            }          }}          {...this.props} />      );    }      render() {      return (              );    }  }; Example of Hardware back button detection using BackHandler Since BackAndroid is deprecated. Use BackHandler instead of BackAndroid. import { BackHandler } from &#39;react-native&#39;;    {...}    ComponentWillMount(){      BackHandler.addEventListener(&#39;hardwareBackPress&#39;,()=>{        if (!this.onMainScreen()) {          this.goBack();          return true;        }        return false;      });    }  Hardware back button handling using BackHandler and Navigation Properties  (without using deprecated BackAndroid & deprecated Navigator) This example will show you back navigation which is expected generally in most of the flows. You  will have to add following code to every screen depending on expected behavior. There are 2  https://riptutorial.com/ 20  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(793, 12, 28, 'cases: If there are more than 1 screen on stack, device back button will show previous screen.1.  If there is only 1 screen on stack, device back button will exit app.2.  Case 1: Show previous screen import { BackHandler } from &#39;react-native&#39;;    constructor(props) {      super(props)      this.handleBackButtonClick = this.handleBackButtonClick.bind(this);  }    componentWillMount() {      BackHandler.addEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    componentWillUnmount() {      BackHandler.removeEventListener(&#39;hardwareBackPress&#39;, this.handleBackButtonClick);  }    handleBackButtonClick() {      this.props.navigation.goBack(null);      return true;  } Important:  Don''t forget to bind method in constructor and to remove listener in  componentWillUnmount. Case 2: Exit App In this case, no need to handle anything on that screen where you want to exit app. Important:  This should be only screen on stack. Read Android - Hardware Back Button online:  https://riptutorial.com/react- native/topic/4668/android---hardware-back-button https://riptutorial.com/ 21  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(794, 12, 29, 'Chapter 3: Animation API Examples Animate an Image class AnimatedImage extends Component {      constructor(props){          super(props)          this.state = {              logoMarginTop: new Animated.Value(200)          }      }      componentDidMount(){          Animated.timing(              this.state.logoMarginTop,              { toValue: 100 }          ).start()      }      render () {        return (                                         )      }  } This example is animating the image position by changing the margin. Read Animation API online:  https://riptutorial.com/react-native/topic/4415/animation-api https://riptutorial.com/ 22  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(795, 12, 30, 'Chapter 4: Command Line Instructions Examples Check version installed $ react-native -v Example Output react-native-cli: 0.2.0  react-native: n/a - not inside a React Native project directory //Output from  different  folder  react-native: react-native: 0.30.0 // Output from the react native project directory Upgrade existing project to latest RN version In the app folder find  package.json  and modify the following line to include the latest version, save  the file and close. &#34;react-native&#34;: &#34;0.32.0&#34; In terminal: $ npm install Followed by $ react-native upgrade Logging Android $ react-native log-android iOS $ react-native log-ios Initialize and getting started with React Native project To initialize https://riptutorial.com/ 23  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(796, 12, 31, 'react-native init MyAwesomeProject To initialize with a specific version of React Native react-native init --version=&#34;0.36.0&#34; MyAwesomeProject To Run for Android cd MyAwesomeProject  react-native run-android To Run for iOS cd MyAwesomeProject  react-native run-ios Start React Native Packager $ react-native start On latest version of React Native, no need to run the packager. It will run automatically. By default this starts the server at port 8081. To specify which port the server is on $ react-native start --port PORTNUMBER Add android project for your app If you either have apps generated with pre-android support or just did that on purpose, you can  always add android project to your app. $ react-native android This will generate  android  folder and  index.android.js  inside your app. Read Command Line Instructions online:  https://riptutorial.com/react-native/topic/2117/command- line-instructions https://riptutorial.com/ 24  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(797, 12, 32, 'Chapter 5: Components Examples Basic Component import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    render () {      return (                   I&#39;m a basic Component               )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateful Component These components will have changing States. import React, { Component } from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    class Example extends Component {    constructor (props) {      super(props)      this.state = {        name: &#34;Sriraman&#34;      }    }    render () {      return (                   Hi, {this.state.name}              )    }  }    AppRegistry.registerComponent(&#39;Example&#39;, () => Example) Stateless Component As the name implies, Stateless Components do not have any local state. They are also known as  Dumb Components . Without any local state, these components do not need lifecycle methods or  much of the boilerplate that comes with a stateful component. https://riptutorial.com/ 25  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(798, 12, 33, 'Class syntax is not required, you can simply do  const name = ({props}) => ( ... ) . Generally  stateless components are more concise as a result. Beneath is an example of two stateless components  App  and  Title , with a demonstration of  passing props between components: import React from &#39;react&#39;  import { View, Text, AppRegistry } from &#39;react-native&#39;    const Title = ({Message}) => (    {Message}  )    const App = () => (                )    AppRegistry.registerComponent(&#39;App&#39;, () => App) This is the recommended pattern for components, when possible. As in the future optimisations  can be made for these components, reducing memory allocations and unnecessary checks. Read Components online:  https://riptutorial.com/react-native/topic/5532/components https://riptutorial.com/ 26  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(799, 12, 34, 'Chapter 6: Create a shareable APK for  android Introduction Steps to create an APK (signed and unsigned) which you can install on a device using CLI and  share as well: Problem statement:  I''ve built my app, I can run it on my local emulator (and also on my android  device by changing debug server). But, I want to build an apk that I can send to someone without  access to development server and I want them to be able to test application. Remarks A more detailed description is also mentioned here:  https://facebook.github.io/react- native/docs/signed-apk-android.html Examples Create a key to sign the APK keytool -genkey -v -keystore my-app-key.keystore -alias my-app-alias -keyalg RSA -keysize 2048  -validity 10000 Use a password when prompted Once the key is generated, use it to generate the installable build: react-native bundle --platform android --dev false --entry-file index.android.js \\  --bundle-output android/app/src/main/assets/index.android.bundle \\  --assets-dest android/app/src/main/res/ Generate the build using gradle cd android && ./gradlew assembleRelease Upload or share the generated APK Upload the APK to your phone. The -r flag will replace the existing app (if it exists) adb install -r ./app/build/outputs/apk/app-release-unsigned.apk The shareable signed APK is located at: https://riptutorial.com/ 27  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(800, 12, 35, './app/build/outputs/apk/app-release.apk Read Create a shareable APK for android online:  https://riptutorial.com/react- native/topic/8964/create-a-shareable-apk-for-android https://riptutorial.com/ 28  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(801, 12, 36, 'Chapter 7: Custom Fonts Examples Steps to use custom fonts in React Native (Android) Paste your fonts file inside  android/app/src/main/assets/fonts/font_name.ttf1.  Recompile the Android app by running  react-native run-android2.  Now, You can use  fontFamily: &#39;font_name&#39;  in your React Native Styles3.  Steps to use custom fonts in React Native (iOS) 1. Include the font in your Xcode project. 2. Make sure that they are included in the Target Membership column Click on the font from the navigator, and check if the font included. 3. Check if the font included as Resource in your bundle click on your Xcode project file, select "Build Phases, select "Copy Bundle Resources". Check if  your font is added. https://riptutorial.com/ 29  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(802, 12, 37, '4. Include the font in Application Plist (Info.plist) from the application main folder open Info.plist, click on "Information Property List", and then click  the plus sign (+). from drop down list choose "Fonts provided by application". 5. Add Font name in Fonts provided by application expand Fonts Provided by Application and add the Font Name exactly to value column Use it in the Application       Welcome to React Native!   6.  Custom fonts for both Android and IOS Create a folder in your project folder, and add your fonts to it. Example:• https://riptutorial.com/ 30  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(803, 12, 38, 'Example: Here we added a folder in root called "mystuff", then "fonts", and inside it we  placed our fonts: ○○ Add the below code in  package.json . {      ...        &#34;rnpm&#34;: {          &#34;assets&#34;: [            &#34;path/to/fontfolder&#34;          ]      },        ...  } For the example above, our package.json would now have a path of "mystuff/fonts": &#34;rnpm&#34;: {    &#34;assets&#34;: [      &#34;mystuff/fonts&#34;    ]  }○• Run  react-native link  command.• Using custom fonts on project below code       My Text   Where  FONT-NAME  is the prefix platform specific. Android FONT-NAME is the words before the extension in file. Example: Your font''s file name is  Roboto-Regular.ttf , so you would set  fontFamily: Roboto-Regular . iOS• https://riptutorial.com/ 31  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(804, 12, 39, 'FONT-NAME is "Full Name" found after right clicking, on the font file, then clicking on "Get  Info". ( Source:  https://stackoverflow.com/a/16788493/2529614  ), in the screenshot below,  the file name is  MM Proxima Nova Ultra bold.otf , however "Full Name" is "Proxima Nova  Semibold", thus you would set  fontFamily: Proxima Nova Semibold . Screenshot -  Run  react-native run-ios  or  react-native run-android  again (this will recompile with the  resources)• Read Custom Fonts online:  https://riptutorial.com/react-native/topic/4341/custom-fonts https://riptutorial.com/ 32  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(805, 12, 40, 'Chapter 8: Debugging Syntax debugger;• Examples Start Remote JS Debugging in Android You can start the remote debugging from Developer menu. After selecting the enable remote  debugging it will open Google Chrome, So that you can log the output into your console. You can  also write debugger syntax into your js code. Using console.log() You can print log message in the terminal using  console.log() . To do so, open a new terminal and  run following command for Android: react-native log-android or following command if you are using iOS: react-native log-ios You will now start to see all the log message in this terminal Read Debugging online:  https://riptutorial.com/react-native/topic/5105/debugging https://riptutorial.com/ 33  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(806, 12, 41, 'Chapter 9: ESLint in react-native Introduction This is the topic for ESLint rules explanation for react-native. Examples How to start It''s highly recommended to use ESLint in your project on react-native. ESLint is a tool for code  validation using specific rules provided by community. For react-native you can use rulesets for javascript, react and react-native. Common ESLint rules with motivation and explanations for javascript you can find here:  https://github.com/eslint/eslint/tree/master/docs/rules  . You can simply add ready ruleset from  ESLint developers by adding in your .eslintr.json to ''extends'' node ''eslint:recommended''. (  "extends": ["eslint:recommended"] ) More about ESLint configuring you can read here:  http://eslint.org/docs/developer-guide/development-environment  . It''s recommended to read full  doc about this extremely useful tool. Next, full docs about rules for ES Lint react plugin you can find here:  https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules  . Important note: not all  rules from react are relative to react-native. For example: react/display-name and react/no- unknown-property for example. Another rules are ''must have'' for every project on react-native,  such as react/jsx-no-bind and react/jsx-key. Be very careful with choosing your own ruleset. And finaly, there is a plugin explicidly for react-native:  https://github.com/intellicode/eslint-plugin- react-native  Note: If you split your styles in separate file, rule react-native/no-inline-styles will not  work. For correct working of this tool in react-native env you might need to set value or ''env'' in your  config to this: "env": { "browser": true, "es6": true, "amd": true }, ESLint is a key tool for development of high quality product. Read ESLint in react-native online:  https://riptutorial.com/react-native/topic/10650/eslint-in-react- native https://riptutorial.com/ 34  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(807, 12, 42, 'Chapter 10: Hello World Examples Editing index.ios.js or index.android.js Open  index.ios.js  or  index.android.js  and delete everything between the    . After  that, write   Hello World!   and run the emulator. You should see  Hello World!  written on the screen! Congrats! You''ve successfully written your first Hello World! Hello world! import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text } from &#39;react-native&#39;;    class HelloWorldApp extends Component {    render() {      return (        Hello world!      );    }  }    AppRegistry.registerComponent(&#39;HelloWorldApp&#39;, () => HelloWorldApp); Read Hello World online:  https://riptutorial.com/react-native/topic/3779/hello-world https://riptutorial.com/ 35  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(808, 12, 43, 'Chapter 11: HTTP Requests Syntax fetch(url, options)[.then(...)[.catch(...)]]• Remarks The Fetch API is the most commonly used API for HTTP requests. It is modern, flexible and  it uses promises.• The XMLHttpRequest API is also used for HTTP requests and is mainly included so that  developers may use their favorite existing libraries, like  ApiSauce .• The Websocket API may be used for "live" data in real time scenarios, such as in chat  applications.• Examples WebSockets var ws = new WebSocket(&#39;ws://host.com/path&#39;);    ws.onopen = () => {    // connection opened      ws.send(&#39;something&#39;); // send a message  };    ws.onmessage = (e) => {    // a message was received    console.log(e.data);  };    ws.onerror = (e) => {    // an error occurred    console.log(e.message);  };    ws.onclose = (e) => {    // connection closed    console.log(e.code, e.reason);  }; HTTP with the fetch API It should be noted that Fetch  does not support progress callbacks . See:  https://github.com/github/fetch/issues/89 . The alternative is to use XMLHttpRequest  https://developer.mozilla.org/en- US/docs/Web/Events/progress . https://riptutorial.com/ 36  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(809, 12, 44, 'fetch(&#39;https://mywebsite.com/mydata.json&#39;).then(json => console.log(json));    fetch(&#39;/login&#39;, {    method: &#39;POST&#39;,    body: form,    mode: &#39;cors&#39;,    cache: &#39;default&#39;,  }).then(session => onLogin(session), failure => console.error(failure)); More details about fetch can be found at  MDN Networking with XMLHttpRequest var request = new XMLHttpRequest();  request.onreadystatechange = (e) => {    if (request.readyState !== 4) {      return;    }      if (request.status === 200) {      console.log(&#39;success&#39;, request.responseText);    } else {      console.warn(&#39;error&#39;);    }  };    request.open(&#39;GET&#39;, &#39;https://mywebsite.com/endpoint/&#39;);  request.send(); Using Promises with the fetch API and Redux Redux is the most common state management library used with React-Native. The following  example demonstrates how to use the fetch API and dispatch changes to your applications state  reducer using redux-thunk. export const fetchRecipes = (action) => {    return (dispatch, getState) => {      fetch(&#39;/recipes&#39;, {          method: &#39;POST&#39;,          headers: {            &#39;Accept&#39;: &#39;application/json&#39;,            &#39;Content-Type&#39;: &#39;application/json&#39;          },          body: JSON.stringify({            recipeName,            instructions,            ingredients          })      })      .then((res) => {        // If response was successful parse the json and dispatch an update        if (res.ok) {          res.json().then((recipe) => {            dispatch({              type: &#39;UPDATE_RECIPE&#39;,              recipe  https://riptutorial.com/ 37  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(810, 12, 45, '          });          });        } else {          // response wasn&#39;t successful so dispatch an error          res.json().then((err) => {            dispatch({              type: &#39;ERROR_RECIPE&#39;,              message: err.reason,              status: err.status            });          });        }      })      .catch((err) => {        // Runs if there is a general JavaScript error.        dispatch(error(&#39;There was a problem with the request.&#39;));      });    };  }; Web Socket with Socket.io Install  socket.io-client npm i socket.io-client --save Import module import SocketIOClient from &#39;socket.io-client/dist/socket.io.js&#39; Initialize in your constructor constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);    } Now in order to use your socket connection properly, you should bind your functions in constructor  too. Let''s assume that we have to build a simple application, which will send a ping to a server via  socket after every 5 seconds (consider this as ping), and then the application will get a reply from  the server. To do so, let''s first create these two functions: _sendPing(){      //emit a dong message to socket server      socket.emit(&#39;ding&#39;);  }    _getReply(data){      //get reply from socket server, log it to console      console.log(&#39;Reply from server:&#39; + data);  } Now, we need to bind these two functions in our constructor: https://riptutorial.com/ 38  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(811, 12, 46, 'constructor(props){      super(props);      this.socket = SocketIOClient(&#39;http://server:3000&#39;);        //bind the functions      this._sendPing = this._sendPing.bind(this);      this._getReply = this._getReply.bind(this);  } After that, we also need to link _getReply function with the socket in order to receive the message  from the socket server. To do this we need to attach our _getReply function with socket object.  Add the following line to our constructor: this.socket.on(&#39;dong&#39;, this._getReply); Now, whenever socket server emits with the ''dong'' your application will able to receive it. Http with axios Configure For web request you can also use library  axios . It''s easy to configure. For this purpose you can create file axios.js for example: import * as axios from &#39;axios&#39;;    var instance = axios.create();  instance.defaults.baseURL = serverURL;  instance.defaults.timeout = 20000;]  //...  //and other options    export { instance as default }; and then use it in any file you want. Requests To avoid using pattern ''Swiss knife'' for every service on your backend you can create separate file  with methods for this within folder for integration functionality: import axios from &#39;../axios&#39;;  import {      errorHandling  } from &#39;../common&#39;;    const UserService = {          getCallToAction() {          return axios.get(&#39;api/user/dosomething&#39;).then(response => response.data)              .catch(errorHandling);      },  }  export default UserService; https://riptutorial.com/ 39  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(812, 12, 47, 'Testing There is a special lib for testing axios:  axios-mock-adapter . With this lib you can set to axios any responce you want for testing it. Also you can configure  some special errors for your axois''es methods. You can add it to your axios.js file created in  prevous step: import MockAdapter from &#39;axios-mock-adapter&#39;;    var mock = new MockAdapter(instance);  mock.onAny().reply(500); for example. Redux Store Sometimes you need to add to headers authorize token, that you probably store in your redux  store. In this case you''ll need another file, interceptors.js with this function: export function getAuthToken(storeContainer) {      return config => {          let store = storeContainer.getState();          config.headers[&#39;Authorization&#39;] = store.user.accessToken;          return config;      };  } Next in constructor of your root component you can add this: axios.interceptors.request.use(getAuthToken(this.state.store)); and then all your requests will be followed with your authorization token. As you can see axios is very simple, configurable and useful library for applications based on  react-native. Read HTTP Requests online:  https://riptutorial.com/react-native/topic/2375/http-requests https://riptutorial.com/ 40  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(813, 12, 48, 'Chapter 12: Images Examples Image Module You''re going to have to import  Image  from the  react-native  package like so then use it: import { Image } from &#39;react&#39;;     You can also use a local image with a slightly different syntax but same logic like so: import { Image } from &#39;react&#39;;     Note:- You should give height, width to the image otherwise it won''t show. Image Example class ImageExample extends Component {    render() {      return (                                );    }  } Conditional Image Source  If the path is available in  imagePath  then it will be assigned to source else the default image path  will be assigned. Using variable for image path let imagePath = require(&#34;../../assets/list.png&#34;);  https://riptutorial.com/ 41  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(814, 12, 49, '   From external resource:  To fit an Image  Try also  cover ,  stretch ,  repeat  and  center  parameters. Read Images online:  https://riptutorial.com/react-native/topic/3956/images https://riptutorial.com/ 42  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(815, 12, 50, 'Chapter 13: Integration with Firebase for  Authentication Introduction //Replace firebase values with your app api values import firebase from ''firebase''; componentWillMount() { firebase.initializeApp({ apiKey: "yourAPIKey", authDomain:  "authDomainNAme", databaseURL: "yourDomainBaseURL", projectId: "yourProjectID",  storageBucket: "storageBUcketValue", messagingSenderId: "senderIdValue" });  firebase.auth().signInWithEmailAndPassword(email, password) .then(this.onLoginSuccess) }) } Examples React Native - ListView with Firebase This is what I do when I''m working with Firebase and I want to use ListView. Use a parent component to retrieve the data from Firebase (Posts.js): Posts.js import PostsList from &#39;./PostsList&#39;;    class Posts extends Component{      constructor(props) {          super(props);          this.state = {              posts: []          }      }        componentWillMount() {          firebase.database().ref(&#39;Posts/&#39;).on(&#39;value&#39;, function(data) {              this.setState({ posts: data.val() });          });      }        render() {          return       }  } PostsList.js class PostsList extends Component {      constructor(props) {          super(props);          this.state = {  https://riptutorial.com/ 43  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(816, 12, 51, '            dataSource: new ListView.DataSource({                  rowHasChanged: (row1, row2) => row1 !== row2              }),          }      }        getDataSource(posts: Array): ListView.DataSource {          if(!posts) return;          return this.state.dataSource.cloneWithRows(posts);      }        componentDidMount() {          this.setState({dataSource: this.getDataSource(this.props.posts)});      }        componentWillReceiveProps(props) {          this.setState({dataSource: this.getDataSource(props.posts)});      }        renderRow = (post) => {          return (                                {post.title}                  {post.content}                        );      }        render() {          return(                        );      }  } I want to point out that in  Posts.js , I''m not importing  firebase  because you only need to import it  once, in the main component of your project (where you have the navigator) and use it anywhere. This is the solution someone suggested in a question I asked when I was struggling with  ListView. I thought it would be nice to share it. Source: [ http://stackoverflow.com/questions/38414289/react-native-listview-not-rendering-data- from-firebase][1] Authentication In React Native Using Firebase Replace firebase values with your app api values: import firebase from &#39;firebase&#39;;  componentWillMount() {  firebase.initializeApp({    apiKey: &#34;yourAPIKey&#34;,    authDomain: &#34;authDomainNAme&#34;,  https://riptutorial.com/ 44  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(817, 12, 52, '  databaseURL: &#34;yourDomainBaseURL&#34;,    projectId: &#34;yourProjectID&#34;,    storageBucket: &#34;storageBUcketValue&#34;,    messagingSenderId: &#34;senderIdValue&#34;  });      firebase.auth().signInWithEmailAndPassword(email, password)    .then(this.onLoginSuccess)    .catch(() => {      firebase.auth().createUserWithEmailAndPassword(email, password)        .then(this.onLoginSuccess)        .catch(this.onLoginFail)    })  } Read Integration with Firebase for Authentication online:  https://riptutorial.com/react- native/topic/6391/integration-with-firebase-for-authentication https://riptutorial.com/ 45  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(818, 12, 53, 'Chapter 14: Layout Examples Flexbox Flexbox is a layout mode providing for the arrangement of elements on a page such that the  elements behave predictably when the page layout must accommodate different screen sizes and  different display devices. By default flexbox arranges children in a column. But you can change it  to row using  flexDirection: &#39;row&#39; . flexDirection const Direction = (props)=>{    return (                                                                                      )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: &#39;#AED581&#39;,    }  }); https://riptutorial.com/ 46  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(819, 12, 54, 'Alignment axis const AlignmentAxis = (props)=>{    return (                                                                    )  }    const styles = StyleSheet.create({    container: {      flex:1,      backgroundColor: `#69B8CC`,    },    text:{      color: &#39;white&#39;,      textAlign:&#39;center&#39;    }  https://riptutorial.com/ 47  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(820, 12, 55, '}); https://riptutorial.com/ 48  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(821, 12, 56, 'Alignment const Alignment = (props)=>{ Flex size const FlexSize = (props)=>{ More about Facebook''s flexbox implementation  here . Read Layout online:  https://riptutorial.com/react-native/topic/1267/layouthttps://riptutorial.com/ 49  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(822, 12, 57, 'Chapter 15: Linking Native API Introduction Linking API enables you to both send and receive links between applications. For example,  opening the Phone app with number dialed in or opening the Google Maps and starting a  navigation to a chosen destination. You can also utilise Linking to make your app able to respond  to links opening it from other applications. To use  Linking  you need to first import it from  react-native import {Linking} from &#39;react-native&#39; Examples Outgoing Links To open a link call openURL. Linking.openURL(url)  .catch(err => console.error(&#39;An error occurred &#39;, err)) The preferred method is to check if any installed app can handle a given URL beforehand. Linking.canOpenURL(url)  .then(supported => {    if (!supported) {      console.log(&#39;Unsupported URL: &#39; + url)    } else {      return Linking.openURL(url)    }  }).catch(err => console.error(&#39;An error occurred &#39;, err)) URI Schemes Target App Example Reference Web Browser https://stackoverflow.com Phone tel:1-408-555-5555 Apple Mail mailto:email@example.com Apple SMS sms:1-408-555-1212 Apple Apple Maps http://maps.apple.com/?ll=37.484847,-122.148386 Apple https://riptutorial.com/ 50  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(823, 12, 58, 'Target App Example Reference Google Maps geo:37.7749,-122.4194 Google iTunes See  iTunes Link Maker Apple Facebook fb://profile Stack Overflow YouTube http://www.youtube.com/v/oHg5SJYRHA0 Apple Facetime facetime://user@example.com Apple iOS Calendar calshow:514300000  [1] iPhoneDevWiki [1] Opens the calendar at the stated number of seconds since 1. 1. 2001 (UTC?). For some  reason this API is undocumented by Apple. Incomming Links You can detect when your app is launched from an external URL. componentDidMount() {    const url = Linking.getInitialURL()    .then((url) => {      if (url) {        console.log(&#39;Initial url is: &#39; + url)      }    }).catch(err => console.error(&#39;An error occurred &#39;, err))  } To enable this on iOS  Link  RCTLinking  to your project . To enable this on Android,  follow these steps . Read Linking Native API online:  https://riptutorial.com/react-native/topic/9687/linking-native-api https://riptutorial.com/ 51  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(824, 12, 59, 'Chapter 16: ListView Examples Simple Example ListView - A core component designed for efficient display of vertically scrolling lists of changing  data. The minimal API is to create a ListView.DataSource, populate it with a simple array of data  blobs, and instantiate a ListView component with that data source and a renderRow callback  which takes a blob from the data array and returns a renderable component. Minimal example: getInitialState: function() {    var ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});    return {      dataSource: ds.cloneWithRows([&#39;row 1&#39;, &#39;row 2&#39;]),    };  },    render: function() {    return (       {rowData}}      />    );  }, ListView also supports more advanced features, including sections with sticky section headers,  header and footer support, callbacks on reaching the end of the available data (onEndReached)  and on the set of rows that are visible in the device viewport change (onChangeVisibleRows), and  several performance optimizations. There are a few performance operations designed to make ListView scroll smoothly while  dynamically loading potentially very large (or conceptually infinite) data sets: Only re-render changed rows - the rowHasChanged function provided to the data source  tells the ListView if it needs to re-render a row because the source data has changed - see  ListViewDataSource for more details.• Rate-limited row rendering - By default, only one row is rendered per event-loop  (customizable with the pageSize prop). This breaks up the work into smaller chunks to  reduce the chance of dropping frames while rendering rows.• Read ListView online:  https://riptutorial.com/react-native/topic/3112/listview https://riptutorial.com/ 52  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(825, 12, 60, 'Chapter 17: Modal Introduction Modal component is a simple way to present content above an enclosing view. Parameters Prop details animationType it''s an enum of ('' none '', '' slide '', '' fade '') and it controls modal  animation. visible its a bool that controls modal visiblity. onShow it allows passing a function that will be called once the modal  has been shown. transparent bool to set transparency. onRequestClose ( android ) it always defining a method that will be called when user tabs  back button onOrientationChange ( IOS ) it always defining a method that will be called when orientation  changes supportedOrientations ( IOS ) enum(''portrait'', ''portrait-upside-down'', ''landscape'', ''landscape- left'', ''landscape-right'') Examples Modal Basic Example import React, { Component } from &#39;react&#39;;  import {    Modal,    Text,    View,    Button,    StyleSheet,  } from &#39;react-native&#39;;    const styles = StyleSheet.create({    mainContainer: {      marginTop: 22,    },    modalContainer: {  https://riptutorial.com/ 53  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(826, 12, 61, '    marginTop: 22,    },  });    class Example extends Component {    constructor() {      super();      this.state = {        visibility: false,      };    }        setModalVisibility(visible) {      this.setState({        visibility: visible,      });    }      render() {      return (                                                            I&#39;m a simple Modal                 this.setModalVisibility(!this.state.visibility)}                  title=&#34;Hide Modal&#34;                />                                                 this.setModalVisibility(true)}            title=&#34;Show Modal&#34;          />              );    }  }    export default Example; Transparent Modal Example See this example  here . import React, { Component } from &#39;react&#39;;  import { Text, View, StyleSheet, Button, Modal } from &#39;react-native&#39;;  import { Constants } from &#39;expo&#39;;    https://riptutorial.com/ 54  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(827, 12, 62, 'export default class App extends Component {    state = {      modalVisible: false,    };      _handleButtonPress = () => {      this.setModalVisible(true);    };      setModalVisible = (visible) => {      this.setState({modalVisible: visible});    }      render() {      var modalBackgroundStyle = {        backgroundColor: &#39;rgba(0, 0, 0, 0.5)&#39;      };      var innerContainerTransparentStyle = {backgroundColor: &#39;#fff&#39;, padding: 20};      return (                 this.setModalVisible(false)}            >                                          This is a modal                                                                              );    }  }    const styles = StyleSheet.create({    container: {      flex: 1,      alignItems: &#39;center&#39;,      justifyContent: &#39;center&#39;,      paddingTop: Constants.statusBarHeight,      backgroundColor: &#39;#ecf0f1&#39;,    }  }); Read Modal online:  https://riptutorial.com/react-native/topic/8253/modal https://riptutorial.com/ 55  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(828, 12, 63, 'Chapter 18: Multiple props rendering Examples render multiple variables For rendering multiple props or variables we can use  `` .   render() {      let firstName = &#39;test&#39;;      let lastName = &#39;name&#39;;      return (                  {`${firstName} ${lastName}` }               );    } Output: test name Read Multiple props rendering online:  https://riptutorial.com/react-native/topic/10781/multiple- props-rendering https://riptutorial.com/ 56  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(829, 12, 64, 'Chapter 19: Native Modules Examples Create your Native Module (IOS) Introduction from  http://facebook.github.io/react-native/docs/native-modules-ios.html Sometimes an app needs access to platform API, and React Native doesn''t have a  corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift  or C++ code without having to reimplement it in JavaScript, or write some high  performance, multi-threaded code such as for image processing, a database, or any  number of advanced extensions. A Native Module is simply an Objective-C Class that implements the  RCTBridgeModule  protocol. Example In your Xcode project create a new file and select  Cocoa Touch Class , in the creation wizard  choose a name for your Class ( e.g. NativeModule ), make it a  Subclass of :  NSObject  and choose  Objective-C  for the language. This will create two files  NativeModuleEx.h  and  NativeModuleEx.m You will need to import  RCTBridgeModule.h  to your  NativeModuleEx.h  file as it follows: #import   #import &#34;RCTBridgeModule.h&#34;    @interface NativeModuleEx : NSObject     @end In your  NativeModuleEx.m  add the following code: #import &#34;NativeModuleEx.h&#34;    @implementation NativeModuleEx    RCT_EXPORT_MODULE();    RCT_EXPORT_METHOD(testModule:(NSString *)string )  {  https://riptutorial.com/ 57  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(830, 12, 65, '  NSLog(@&#34;The string &#39;%@&#39; comes from JavaScript! &#34;, string);  }    @end RCT_EXPORT_MODULE()  will make your module accessible in JavaScript, you can pass it an optional  argument to specify its name. If no name is provided it will match the Objective-C class name. RCT_EXPORT_METHOD()  will expose your method to JavaScript, only the methods you export using this  macro will be accessible in JavaScript. Finally, in your JavaScript you can call your method as it follows: import { NativeModules } from &#39;react-native&#39;;    var NativeModuleEx = NativeModules.NativeModuleEx;    NativeModuleEx.testModule(&#39;Some String !&#39;); Read Native Modules online:  https://riptutorial.com/react-native/topic/6155/native-modules https://riptutorial.com/ 58  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(831, 12, 66, 'Chapter 20: Navigator Best Practices Examples Navigator Navigator  is React Native''s default navigator. A  Navigator  component manages a  stack  of route  objects, and provides methods for managing that stack.  { this.navigator = navigator }}    initialRoute={{ id: &#39;route1&#39;, title: &#39;Route 1&#39; }}    renderScene={this.renderScene.bind(this)}    configureScene={(route) => Navigator.SceneConfigs.FloatFromRight}    style={{ flex: 1 }}    navigationBar={      // see &#34;Managing the Navigation Bar&#34; below          }  /> Managing the Route Stack First of all, notice the  initialRoute  prop. A route is simply a javascript object, and can take  whatever shape you want, and have whatever values you want. It''s the primary way you''ll pass  values and methods between components in your navigation stack. The  Navigator  knows what to render based on the value returned from its  renderScene  prop. renderScene(route, navigator) {    if (route.id === &#39;route1&#39;) {      return ; // see below    } else if (route.id === &#39;route2&#39;) {      return ; // see below    }  } Let''s imagine an implementation of  ExampleScene  in this example: function ExampleScene(props) {      function forward() {      // this route object will passed along to our `renderScene` function we defined above.      props.navigator.push({ id: &#39;route2&#39;, title: &#39;Route 2&#39; });    }      function back() {      // `pop` simply pops one route object off the `Navigator`&#39;s stack      props.navigator.pop();    }      return (  https://riptutorial.com/ 59  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(832, 12, 67, '            {props.title}                  Go forward!                          Go Back!                  );  } Configuring the Navigator You can configure the  Navigator ''s transitions with the  configureScene  prop. This is a function that''s  passed the  route  object, and needs to return a configuration object. These are the available  configuration objects: Navigator.SceneConfigs.PushFromRight (default)• Navigator.SceneConfigs.FloatFromRight• Navigator.SceneConfigs.FloatFromLeft• Navigator.SceneConfigs.FloatFromBottom• Navigator.SceneConfigs.FloatFromBottomAndroid• Navigator.SceneConfigs.FadeAndroid• Navigator.SceneConfigs.HorizontalSwipeJump• Navigator.SceneConfigs.HorizontalSwipeJumpFromRight• Navigator.SceneConfigs.VerticalUpSwipeJump• Navigator.SceneConfigs.VerticalDownSwipeJump• You can return one of these objects without modification, or you can modify the configuration  object to customize the navigation transitions. For example, to modify the edge hit width to more  closely emulate the iOS  UINavigationController ''s  interactivePopGestureRecognizer : configureScene={(route) => {    return {      ...Navigator.SceneConfigs.FloatFromRight,      gestures: {        pop: {          ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,          edgeHitWidth: Dimensions.get(&#39;window&#39;).width / 2,        },      },    };  }} Managing the NavigationBar The  Navigator  component comes with a  navigationBar  prop, which can theoretically take any  properly configured React component. But the most common implementation uses the default  Navigator.NavigationBar . This takes a  routeMapper  prop that you can use to configure the  appearance of the navigation bar based on the route. https://riptutorial.com/ 60  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(833, 12, 68, 'A  routeMapper  is a regular javascript object with three functions:  Title ,  RightButton , and  LeftButton .  For example: const routeMapper = {      LeftButton(route, navigator, index, navState) {      if (index === 0) {        return null;      }        return (         navigator.pop()}          style={styles.navBarLeftButton}        >          Back              );    },      RightButton(route, navigator, index, navState) {      return (                  Next             );    },      Title(route, navigator, index, navState) {      return (                  {route.title}              );    },  }; See more For more detailed documentation of each prop, see the  the official React Native Documentation for  Navigator , and the React Native guide on  Using Navigators . Use react-navigation for navigation in react native apps With the help of  react-navigation , you can add navigation to your app really easy. Install react-navigation npm install --save react-navigation Example: https://riptutorial.com/ 61  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(834, 12, 69, 'import { Button, View, Text, AppRegistry } from &#39;react-native&#39;;  import { StackNavigator } from &#39;react-navigation&#39;;    const App = StackNavigator({    FirstPage: {screen: FirstPage},    SecondPage: {screen: SecondPage},  });    class FirstPage extends React.Component {    static navigationOptions = {      title: &#39;Welcome&#39;,    };    render() {      const { navigate } = this.props.navigation;        return (                    navigate(&#39;SecondPage&#39;, { name: &#39;Awesomepankaj&#39; })          }        />      );    }  }    class SecondPage extends React.Component {    static navigationOptions = ({navigation}) => ({      title: navigation.state.params.name,    });      render() {      const { goBack } = this.props.navigation;      return (                  Welcome to Second Page           goBack()}          />              );    }  } react-native Navigation with react-native-router-flux Install by using  npm install --save react-native-router-flux In react-native-router-flux, each route is called a    key  A unique string that can be used to refer to the particular scene. component  Which component to show, here it''s title  make a NavBar and give it a title ''Home'' https://riptutorial.com/ 62  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(835, 12, 70, 'initial  Is this the first screen of the App Example: import React from &#39;react&#39;;  import { Scene, Router } from &#39;react-native-router-flux&#39;;  import LogIn from &#39;./components/LogIn&#39;;  import SecondPage from &#39;./components/SecondPage&#39;;    const RouterComponent = () => {    return (                                );  };    export default RouterComponent; Import this file in the main App.js(index file) and render it. For more information can visit this  link . Read Navigator Best Practices online:  https://riptutorial.com/react-native/topic/2559/navigator- best-practices https://riptutorial.com/ 63  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(836, 12, 71, 'Chapter 21: Navigator with buttons injected  from pages Examples Introduction Instead of bloating your main js file that contains your navigator with buttons. It''s cleaner to just  inject buttons on-demand in any page that you need. //In the page &#34;Home&#34;, I want to have the right nav button to show  //a settings modal that resides in &#34;Home&#34; component.    componentWillMount() {    this.props.route.navbarTitle = &#34;Home&#34;;      this.props.route.rightNavButton = {      text: &#34;Settings&#34;,      onPress: this._ShowSettingsModal.bind(this)    };  } Full commented example &#39;use strict&#39;;    import React, {Component} from &#39;react&#39;;  import ReactNative from &#39;react-native&#39;;    const {    AppRegistry,    StyleSheet,    Text,    View,    Navigator,    Alert,    TouchableHighlight  } = ReactNative;      //This is the app container that contains the navigator stuff  class AppContainer extends Component {        renderScene(route, navigator) {          switch(route.name) {              case &#34;Home&#34;:        //You must pass route as a prop for this trick to work properly              return               default:              return (            https://riptutorial.com/ 64  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(837, 12, 72, '            Your route name is probably incorrect {JSON.stringify(route)}                      );          }      }      render() {      return (              );    }  }      //Nothing fancy here, except for checking for injected buttons.  //Notice how we are checking if there are injected buttons inside the route object.  //Also, we are showing a &#34;Back&#34; button when the page is not at index-0 (e.g. not home)  var NavigationBarRouteMapper = {    LeftButton(route, navigator, index, navState) {      if(route.leftNavButton) {        return (                      {route.leftNavButton.text}                  );      }      else if(route.enableBackButton) {        return (           navigator.pop() }>            Back                  );      }    },    RightButton(route, navigator, index, navState) {      if(route.rightNavButton) {        return (                      {route.rightNavButton.text}                  );      }  https://riptutorial.com/ 65  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(838, 12, 73, '  },    Title(route, navigator, index, navState) {      //You can inject the title aswell.  If you don&#39;t we&#39;ll use the route name.      return ({route.navbarTitle || route.name});    }  };    //This is considered a sub-page that navigator is showing  class Home extends Component {      //This trick depends on that componentWillMount fires before the navbar is created    componentWillMount() {          this.props.route.navbarTitle = &#34;Home&#34;;            this.props.route.rightNavButton = {              text: &#34;Button&#34;,              onPress: this._doSomething.bind(this)          };      }      //This method will be invoked by pressing the injected button.    _doSomething() {        Alert.alert(        &#39;Awesome, eh?&#39;,        null,        [          {text: &#39;Indeed&#39;},        ]      )    }      render() {      return (                      You are home                );    }  }    var styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,      marginTop: 66    },    navbar: {      backgroundColor: &#39;#ffffff&#39;,    },    navbarTitle: {      marginVertical: 10,      fontSize: 17    },    leftNavButton: {      marginVertical: 10,      paddingLeft: 8,   },    rightNavButton: {      marginVertical: 10,  https://riptutorial.com/ 66  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(839, 12, 74, '    paddingRight: 8,    },    navbarButtonText: {      fontSize: 17,      color: &#34;#007AFF&#34;    }  });    AppRegistry.registerComponent(&#39;AppContainer&#39;, () => AppContainer); Read Navigator with buttons injected from pages online:  https://riptutorial.com/react- native/topic/6416/navigator-with-buttons-injected-from-pages https://riptutorial.com/ 67  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(840, 12, 75, 'Chapter 22: Platform Module Examples Find the OS Type/Version The first step is to import Platform from the ''react-native'' package like so: import { Platform } from &#39;react-native&#39; After you''ve done that, you can go ahead and access the OS type through  Platform.OS  allowing  you to use it in conditional statements like const styles = StyleSheet.create({    height: (Platform.OS === &#39;ios&#39;) ? 200 : 100,  }) If you want to detect the Android version, you can use  Platform.Version  like so: if (Platform.Version === 21) {    console.log(&#39;Running on Lollipop!&#39;);  } For iOS, Platform.Version is returning a String, for complex condition don''t forget to parse it. if (parseInt(Platform.Version, 10) >= 9) {      console.log(&#39;Running version higher than 8&#39;);  } If the platform specific logic is complex, one can render two different files based on platform. Ex: MyTask.android.js• MyTask.ios.js• and require it using const MyTask = require(&#39;./MyTask&#39;) Read Platform Module online:  https://riptutorial.com/react-native/topic/3593/platform-module https://riptutorial.com/ 68  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(841, 12, 76, 'Chapter 23: Props Introduction Props, or properties, are data that is passed to child components in a React application. React  components render UI elements based on their props and their internal state. The props that a  component takes (and uses) defines how it can be controlled from the outside. Examples What are props? Props are used to transfer data from parent to child component. Props are read only. Child  component can only get the props passed from parent using  this.props.keyName . Using props  one can make his component reusable. Use of props Once setup is completed. Copy the code below to  index.android.js  or to  index.ios.js  file to use  the props. import React, { Component } from &#39;react&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    class Greeting extends Component {    render() {      return (        Hello {this.props.name}!      );    }  }    class LotsOfGreetings extends Component {    render() {      return (                                                    );    }  }    AppRegistry.registerComponent(&#39;LotsOfGreetings&#39;, () => LotsOfGreetings); Using props one can make his component generic. For example, you have a Button component.  You can pass different props to that component, so that one can place that button anywhere in his  view. https://riptutorial.com/ 69  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(842, 12, 77, 'source:  Props-React Native PropTypes The  prop-types  package allows you to add runtime type checking to your component that ensures  the types of the props passed to the component are correct. For instance, if you don''t pass a  name   or  isYummy  prop to the component below it will throw an error in development mode. In production  mode the prop type checks are not done. Defining  propTypes  can make your component more  readable and maintainable. import React, { Component } from &#39;react&#39;;  import PropTypes from &#39;prop-types&#39;;  import { AppRegistry, Text, View } from &#39;react-native&#39;;    import styles from &#39;./styles.js&#39;;    class Recipe extends Component {    static propTypes = {      name: PropTypes.string.isRequired,      isYummy: PropTypes.bool.isRequired    }    render() {      return (                  {this.props.name}          {this.props.isYummy ? THIS RECIPE IS YUMMY : null}              )    }  }    AppRegistry.registerComponent(&#39;Recipe&#39;, () => Recipe);      // Using the component   Multiple PropTypes You can also have multiple  propTypes  for one props. For example, the name props I''m taking can  also be an object, I can write it as. static propTypes = {    name: PropTypes.oneOfType([        PropTypes.string,        PropTypes.object    ])  } Children Props There is also a special props called  children , which is  not  passed in like  https://riptutorial.com/ 70  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(843, 12, 78, 'Instead, you should do this     Hello React Native   then you can do this in Recipe''s render: return (          {this.props.children}      {this.props.isYummy ? THIS RECIPE IS YUMMY : null}      ) You will have a    component in your  Recipe  saying  Hello React Native , pretty cool hum? And the propType of children is children: PropTypes.node Default Props defaultProps allows you to set default prop values for your component. In the below example if you  do not pass the name props, it will display John otherwise it will display the passed value class Example extends Component {    render() {      return (                  {this.props.name}              )    }  }      Example.defaultProps = {    name: &#39;John&#39;  } Read Props online:  https://riptutorial.com/react-native/topic/1271/props https://riptutorial.com/ 71  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(844, 12, 79, 'Chapter 24: PushNotification Introduction We can add Push Notification to react native app by using the npm module  react-native-push- notification  by  zo0r . This enables for a cross platform development. Installation npm install --save react-native-push-notification react-native link Remarks Refer  GitHub Repo  of this module for more details. Examples Push Notification Simple Setup Create new project PushNotification react-native init PushNotification Put following in index.android.js import React, { Component } from &#39;react&#39;;    import {    AppRegistry,    StyleSheet,    Text,    View,    Button  } from &#39;react-native&#39;;    import PushNotification from &#39;react-native-push-notification&#39;;    export default class App extends Component {        constructor(props){          super(props);            this.NewNotification = this.NewNotification.bind(this);        }        componentDidMount(){            PushNotification.configure({  https://riptutorial.com/ 72  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(845, 12, 80, '              // (required) Called when a remote or local notification is opened or received              onNotification: function(notification) {                  console.log( &#39;NOTIFICATION:&#39;, notification );              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });        }          NewNotification(){              let date = new Date(Date.now() + (this.state.seconds * 1000));              //Fix for IOS          if(Platform.OS == &#34;ios&#34;){              date = date.toISOString();          }            PushNotification.localNotificationSchedule({              message: &#34;My Notification Message&#34;, // (required)              date: date,// (optional) for setting delay              largeIcon:&#34;&#34;// set this blank for removing large icon              //smallIcon: &#34;ic_notification&#34;, // (optional) default: &#34;ic_notification&#34; with  fallback for &#34;ic_launcher&#34;          });      }          render() {            return (                                                    Push Notification                                                      {this.NewNotification()}}                    title=&#34;Show Notification&#34;                    style={styles.Button}                    color=&#34;#841584&#34;                    accessibilityLabel=&#34;Show Notification&#34;                  />                                          );        }  }    const styles = StyleSheet.create({  https://riptutorial.com/ 73  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(846, 12, 81, '  container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    welcome: {      fontSize: 20,      textAlign: &#39;center&#39;,      margin: 10,    },    Button:{      margin: 10,    }  });    AppRegistry.registerComponent(&#39;PushNotification&#39;, () => App); Navigating to scene from Notification Here''s a simple example to demonstrate that how can we jump/open a specific screen based on  the notification. For example, when a user clicks on the notification, the app should open and  directly jump to notifications page instead of home page. &#39;use strict&#39;;    import React, { Component } from &#39;react&#39;;  import {      StyleSheet,      Text,      View,      Navigator,      TouchableOpacity,      AsyncStorage,      BackAndroid,      Platform,  } from &#39;react-native&#39;;  import PushNotification from &#39;react-native-push-notification&#39;;    let initialRoute = { id: &#39;loginview&#39; }    export default class MainClass extends Component  {      constructor(props)      {          super(props);            this.handleNotification = this.handleNotification.bind(this);      }        handleNotification(notification)      {          console.log(&#39;handleNotification&#39;);          var notificationId = &#39;&#39;          //your logic to get relevant information from the notification        //here you navigate to a scene in your app based on the notification info          this.navigator.push({ id: Constants.ITEM_VIEW_ID, item: item });  https://riptutorial.com/ 74  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(847, 12, 82, '    }        componentDidMount()      {          var that = this;            PushNotification.configure({                // (optional) Called when Token is generated (iOS and Android)              onRegister: function(token) {                  console.log( &#39;TOKEN:&#39;, token );              },                // (required) Called when a remote or local notification is opened or received              onNotification(notification) {                  console.log(&#39;onNotification&#39;)                  console.log( notification );                    that.handleNotification(notification);              },                // ANDROID ONLY: (optional) GCM Sender ID.              senderID: &#34;Vizido&#34;,                // IOS ONLY (optional): default: all - Permissions to register.              permissions: {                  alert: true,                  badge: true,                  sound: true              },                // Should the initial notification be popped automatically              // default: true              popInitialNotification: true,                /**                * (optional) default: true                * - Specified if permissions (ios) and token (android and ios) will requested or  not,                * - if not, you must call PushNotificationsHandler.requestPermissions() later                */              requestPermissions: true,          });      }        render()      {            return (               this.navigator = nav }                  initialRoute={initialRoute}                  renderScene={this.renderScene.bind(this)}                  configureScene={(route) =>                      {                          if (route.sceneConfig)                          {                              return route.sceneConfig;                          }                          return Navigator.SceneConfigs.FadeAndroid;                      }  https://riptutorial.com/ 75  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(848, 12, 83, '                }              />          );      }        renderScene(route, navigator)      {            switch (route.id)          {              // do your routing here              case &#39;mainview&#39;:                  return (  );                default:                  return (  );          }      }  } Read PushNotification online:  https://riptutorial.com/react-native/topic/9674/pushnotification https://riptutorial.com/ 76  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(849, 12, 84, 'Chapter 25: RefreshControl with ListView Remarks References: RefreshControl:  https://facebook.github.io/react-native/docs/refreshcontrol.html ListView:  https://facebook.github.io/react-native/docs/listview.html Examples Refresh Control   _refreshControl(){      return (        this._refreshListView()} />      )    } refreshing:  is the state of the spinner (true, false). onRefresh:  this function will invoke when refresh the ListView/ScrollView. onRefresh function Example   _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data      this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    } here we are updating the array and after that we will update the dataSource. we can use  fetch  to  request something from server and use async/await. Refresh Control with ListView Full Example RefreshControl  is used inside a ScrollView or ListView to add pull to refresh functionality. at this  example we will use it with ListView https://riptutorial.com/ 77  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(850, 12, 85, '&#39;use strict&#39;  import React, { Component } from &#39;react&#39;;  import { StyleSheet, View, ListView, RefreshControl, Text } from &#39;react-native&#39;      class RefreshControlExample extends Component {    constructor () {      super()      this.state = {        refreshing: false,        dataSource: new ListView.DataSource({          rowHasChanged: (row1, row2) => row1 !== row2 }),        cars : [          {name:&#39;Datsun&#39;,color:&#39;White&#39;},          {name:&#39;Camry&#39;,color:&#39;Green&#39;}        ]      }    }       componentWillMount(){       this.setState({ dataSource:         this.state.dataSource.cloneWithRows(this.state.cars) })     }      render() {      return (                   this._renderListView(car)}>                        )    }      _renderListView(car){      return(                  {car.name}          {car.color}              )    }      _refreshControl(){      return (        this._refreshListView()} />      )    }      _refreshListView(){      //Start Rendering Spinner      this.setState({refreshing:true})      this.state.cars.push(        {name:&#39;Fusion&#39;,color:&#39;Black&#39;},        {name:&#39;Yaris&#39;,color:&#39;Blue&#39;}      )      //Updating the dataSource with new data  https://riptutorial.com/ 78  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(851, 12, 86, '    this.setState({ dataSource:          this.state.dataSource.cloneWithRows(this.state.cars) })      this.setState({refreshing:false}) //Stop Rendering Spinner    }    }    const styles = StyleSheet.create({      listView: {      flex: 1,      backgroundColor:&#39;#fff&#39;,      marginTop:10,      marginRight:10,      marginLeft:10,      padding:10,      borderWidth:.5,      borderColor:&#39;#dddddd&#39;,      height:70    }    })    module.exports = RefreshControlExample Read RefreshControl with ListView online:  https://riptutorial.com/react- native/topic/6672/refreshcontrol-with-listview https://riptutorial.com/ 79  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(852, 12, 87, 'Chapter 26: Render Best Practises Introduction Topic for important notes about specific Component.render method behavoir. Examples Functions in JSX For better performance it''s important to avoid using of array (lambda) function in JSX. As explained at  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no- bind.md  : A bind call or arrow function in a JSX prop will create a brand new function on every  single render. This is bad for performance, as it will result in the garbage collector  being invoked way more than is necessary. It may also cause unnecessary re-renders  if a brand new function is passed as a prop to a component that uses reference  equality check on the prop to determine if it should update. So if have jsx code block like this:                      this.handleValueChanging(value) }                      /> or                      you can make it better:                      and                      For correct context within handleValueChanging function you can apply it in constructor of  component:           constructor(){              this.handleValueChanging = this.handleValueChanging.bind(this)  https://riptutorial.com/ 80  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(853, 12, 88, '          } more in  binding a function passed to a component Or you can use solutions like this:  https://github.com/andreypopp/autobind-decorator  and simply  add @autobind decorator to each methos that you want bind to:         @autobind          handleValueChanging(newValue)          {              //processing event          } Read Render Best Practises online:  https://riptutorial.com/react-native/topic/10649/render-best- practises https://riptutorial.com/ 81  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(854, 12, 89, 'Chapter 27: Routing Introduction Routing or navigation allows applications to between different screens. Its vital to a mobile app as  it provides context to user about where they are, decouple user actions between screens and  move between them, provide a state machine like model of the whole app. Examples Navigator component Navigator works for both IOS and android. import React, { Component } from &#39;react&#39;;  import { Text, Navigator, TouchableHighlight } from &#39;react-native&#39;;    export default class NavAllDay extends Component {    render() {      return (                    Hello {route.title}!          }          style={{padding: 100}}        />      );    }  } Routes to  Navigator  are provided as objects. You also provide a  renderScene  function that renders  the scene for each route object.  initialRoute  is used to specify the first route. Read Routing online:  https://riptutorial.com/react-native/topic/8279/routing https://riptutorial.com/ 82  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(855, 12, 90, 'Chapter 28: Run an app on device (Android  Version) Remarks Troubleshootings :    Could not connect to development server  => Do this :  adb reverse tcp:8081 tcp:8081 , make sure that  your phone is connected (adb devices). Verify also that there is a local server launched, if not run  react-native start Examples Running an app on Android Device. adb devices Is your phone displaying? If not, enable developer mode on your phone, and connect it  by USB.•1.  adb reverse tcp:8081 tcp:8081  : In order to link correctly your phone and that React-Native recognize him during build. ( NOTE: Android Version 5  or above. )•2.  react-native run-android  : To run the app on your phone.•3.  react-native start  : In order to start a local server for development (mandatory). This server is  automatically started if you use the last version of React-native.•4.  Read Run an app on device (Android Version) online:  https://riptutorial.com/react- native/topic/5135/run-an-app-on-device--android-version- https://riptutorial.com/ 83  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(856, 12, 91, 'Chapter 29: State Syntax void setState( function|object nextState, [function callback] )• Examples setState To change view in your application you can use  setState  - this will re-render your component and  any of its child components. setState performs a shallow merge between the new and previous  state, and triggers a re-render of the component. setState  takes either a key-value object or a function that returns a key-value object Key-Value Object this.setState({myKey: &#39;myValue&#39;}); Function Using a function is useful for updating a value based off the existing state or props. this.setState((previousState, currentProps) => {      return {          myInteger: previousState.myInteger+1      }  }) You can also pass an optional callback to  setState  that will be fired when the component has re- rendered with the new state. this.setState({myKey: &#39;myValue&#39;}, () => {      // Component has re-rendered... do something amazing!  )); Full Example import React, { Component } from &#39;react&#39;;  import { AppRegistry, StyleSheet, Text, View, TouchableOpacity } from &#39;react-native&#39;;    export default class MyParentComponent extends Component {    constructor(props) {      super(props);    https://riptutorial.com/ 84  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(857, 12, 92, '    this.state = {        myInteger: 0      }      }    getRandomInteger() {      const randomInt = Math.floor(Math.random()*100);        this.setState({        myInteger: randomInt      });      }    incrementInteger() {        this.setState((previousState, currentProps) => {        return {          myInteger: previousState.myInteger+1        }      });      }    render() {        return           Parent Component Integer: {this.state.myInteger}                                          }  }    export default class MyChildComponent extends Component {    constructor(props) {      super(props);    }    render() {        // this will get updated when &#34;MyParentComponent&#34; state changes      return         Child Component Integer: {this.props.myInteger}            }  }    export default class Button extends Component {    constructor(props) {      super(props);    }    render() {        return                       {this.props.label}  https://riptutorial.com/ 85  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(858, 12, 93, '                      }  }    const styles = StyleSheet.create({    container: {      flex: 1,      justifyContent: &#39;center&#39;,      alignItems: &#39;center&#39;,      backgroundColor: &#39;#F5FCFF&#39;,    },    button: {      backgroundColor: &#39;#444&#39;,      padding: 10,      marginTop: 10    },    buttonText: {      color: &#39;#fff&#39;    }  });    AppRegistry.registerComponent(&#39;MyApp&#39;, () => MyParentComponent); Initialize State You should initialize state inside the constructor function of your component like this: export default class MyComponent extends Component {    constructor(props) {      super(props);        this.state = {        myInteger: 0      }    }    render() {      return  (                  Integer: {this.state.myInteger}              )    }  } Using setState one can update the view. Read State online:  https://riptutorial.com/react-native/topic/3596/state https://riptutorial.com/ 86  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(859, 12, 94, 'Chapter 30: Styling Introduction Styles are defined within a JSON object with similar styling attribute names like in CSS. Such an  object can either be put inline in the style prop of a component or it can be passed to the function  StyleSheet.create(StyleObject)  and be stored in a variable for shorter inline access by using a  selector name for it similar to a class in CSS. Syntax • • • Remarks Most React Native styles are their CSS forms, but in camel case. So,  text-decoration  becomes  textDecoration . Unlike in CSS, styles do not get inherited. If you want child components to inherit a certain style,  you must explicitly provide it to the child. This means that you cannot set a font family for an entire  View .   The one exception to this is the  Text  component: nested  Text s inherit their parent styles. Examples Styling using inline styles Each React Native component can take a  style  prop. You can pass it a JavaScript object with  CSS-style style properties: Red text This can be inefficient as it has to recreate the object each time the component is rendered. Using  a stylesheet is preferred. Styling using a stylesheet import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;  https://riptutorial.com/ 87  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(860, 12, 95, '    },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Red                  Big                        );      }  } StyleSheet.create()  returns an object where the values are numbers. React Native knows to  convert these numeric IDs into the correct style object. Adding multiple styles You can pass an array to the  style  prop to apply multiple styles. When there is a conflict, the last  one in the list takes precedence. import React, { Component } from &#39;react&#39;;  import { View, Text, StyleSheet } from &#39;react-native&#39;;    const styles = StyleSheet.create({      red: {          color: &#39;red&#39;      },      greenUnderline: {          color: &#39;green&#39;,          textDecoration: &#39;underline&#39;      },      big: {          fontSize: 30      }  });    class Example extends Component {      render() {          return (                                Big red                  Green underline                  Red underline                  Big red  underline                  Big yellow                        );      }  } Conditional Styling https://riptutorial.com/ 88  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(861, 12, 96, ' If the value of  isTrue  is  true  then it will have black background color otherwise white. Read Styling online:  https://riptutorial.com/react-native/topic/7757/styling https://riptutorial.com/ 89  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(862, 12, 97, 'Chapter 31: Unit Testing Introduction Unit testing is a low level testing practice where smallest units or components of the code are  tested. Examples Unit testing with jest Jest  is a javascript testing framework widely used for testing react applications. Its supported by  facebook Here''s a test import &#39;react-native&#39;;  import React from &#39;react&#39;;  import Index from &#39;../index.android.js&#39;;    import renderer from &#39;react-test-renderer&#39;;    it(&#39;renders correctly&#39;, () => {    const tree = renderer.create(          );  }); Here''s some code to make it pass import React, { Component } from &#39;react&#39;;  import {    AppRegistry,    StyleSheet,    Text,    View  } from &#39;react-native&#39;;    export default class gol extends Component {    render() {      return (                              Welcome to React Native!                                To get started, edit index.android.js                                Double tap R on your keyboard to reload,{&#39;\\n&#39;}            Shake or press menu button for dev menu            https://riptutorial.com/ 90  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(863, 12, 98, '            );    }  }    AppRegistry.registerComponent(&#39;gol&#39;, () => gol); Unit Test In React Native Using Jest Starting from react-native version 0.38, a Jest setup is included by default when running react- native init. The following configuration should be automatically added to your package.json file:     &#34;scripts&#34;: {      &#34;start&#34;: &#34;node node_modules/react-native/local-cli/cli.js start&#34;,      &#34;test&#34;: &#34;jest&#34;      },      &#34;jest&#34;: {       &#34;preset&#34;: &#34;react-native&#34;      } You can run  run npm test or jest  to test in react native. For code example:  Link Read Unit Testing online:  https://riptutorial.com/react-native/topic/8281/unit-testing https://riptutorial.com/ 91  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(864, 12, 99, 'Chapter 32: WebView Introduction Webview can be used to load external webpages or html content. This component is there by  default. Examples Simple component using webview import React, { Component } from &#39;react&#39;;  import { WebView } from &#39;react-native&#39;;    class MyWeb extends Component {    render() {      return (              );    }  } Read WebView online:  https://riptutorial.com/react-native/topic/8763/webview https://riptutorial.com/ 92  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(865, 12, 100, 'Credits S.  No Chapters Contributors 1 Getting started with  react-native Adam ,  Community ,  Damien Varron ,  Dmitry Petukhov ,  Dr.  Nitpick ,  Idan ,  Kaleb Portillo ,  Lucas Oliveira ,  manosim ,  Scimonster ,  Sivart ,  Tushar Khatiwada ,  xhg ,  Yevhen Dubinin 2 Android - Hardware  Back Button Cássio Santos ,  manosim ,  Michael S ,  Pascal Le Merrer ,  Sriraman ,  Virat18 3 Animation API Shashank Udupa ,  Sriraman ,  Tom Walters 4 Command Line  Instructions Dmitry Petukhov ,  epsilondelta ,  Idan ,  Jagadish Upadhyay ,  manosim ,  Mozak ,  Sriraman ,  Tim Rijavec 5 Components Michael Hancock ,  Sriraman ,  Tobias Lins 6 Create a shareable  APK for android Aditya Singh 7 Custom Fonts Abdulaziz Alkharashi ,  Lwin Kyaw Myat ,  Noitidart ,  Olivia ,  Sriraman 8 Debugging Jagadish Upadhyay ,  mostafiz rahman 9 ESLint in react- native Alex Belets 10 Hello World stereodenis ,  Zakaria Ridouh 11 HTTP Requests Alex Belets ,  Alireza Valizade ,  AntonB ,  Chris Pena ,  Daniel  Schmidt ,  Dmitry Petukhov ,  Everettss ,  Jagadish Upadhyay ,  manosim ,  MauroPorrasP ,  respectTheCode ,  shaN ,  Tejashwi  Kalp Taru ,  Tobias Lins 12 Images Jagadish Upadhyay ,  Jigar Shah ,  Serdar De ğirmenci ,  Zakaria  Ridouh 13 Integration with  Firebase for  Authentication Ankit Sinha ,  corasan 14 Layout Alex Belets ,  gwint ,  Jagadish Upadhyay ,  Scimonster ,  sudo  bangbang 15 Linking Native API Viktor Se č https://riptutorial.com/ 93  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(866, 12, 101, '16 ListView Kaleb Portillo 17 Modal Ahmed Ali ,  Liron Yahdav ,  Tobias Lins 18 Multiple props  rendering Jigar Shah 19 Native Modules Andres C. Viesca 20 Navigator Best  Practices Ankit Sinha ,  Michael Helvey ,  Pankaj Thakur 21 Navigator with  buttons injected from  pages Ahmed Al Haddad 22 Platform Module Florian Hämmerle ,  Gabriel Diez ,  Jagadish Upadhyay ,  Zakaria  Ridouh 23 Props CallMeNorm ,  Chris Pena ,  corasan ,  fson ,  Gianfranco P. ,  henkimon ,  Hugo Dozois ,  Idan ,  Jagadish Upadhyay ,  Tobias Lins ,  Yevhen Dubinin ,  zhenjie ruan 24 PushNotification shaN ,  Tejashwi Kalp Taru 25 RefreshControl with  ListView Abdulaziz Alkharashi 26 Render Best  Practises Alex Belets 27 Routing sudo bangbang 28 Run an app on  device (Android  Version) Jagadish Upadhyay ,  Lwin Kyaw Myat ,  Mayeul 29 State AndyI ,  David ,  Jagadish Upadhyay ,  Tim Rijavec ,  Tobias Lins 30 Styling Jigar Shah ,  Martin Cup ,  Scimonster 31 Unit Testing Ankit Sinha ,  sudo bangbang 32 WebView sudo bangbang https://riptutorial.com/ 94  ', '2020-01-14 02:20:25', '2020-01-14 02:20:25'),
(867, 13, 1, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net LAPORAN PENELITIAN PENDAPAT MAHASISWA FAKULTAS ILMU SOSIAL DAN EKONOMI TENTANG ETIKA PERGAULAN MAHASISWA DI KAMPUS Oleh: Anang Priyanto FAKULTAS ILMU SOSIAL DAN EKONOMI UNIVERSIYAS NEGERI YOGYAKARTA 2010 PENELITIAN INI DIBIAYAI DENGAN DANA DIPA BLU UNIVERSITAS NEGERI YOGYAKARTA TAHUN 2010 SK DEKAN FISE UNY NOMOR: 137 ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(868, 13, 2, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net TAHUN 2010, TANGGAL 19 APRIL 2010 SURAT PERJANJIAN PELAKSANAAN PENELITIAN NOMOR: 1165/H.34.14/PL/2010, TANGGAL 26 APRIL 2010   ABSTRAK PENDAPAT MAHASISWA FAKULTAS ILMU SOSIAL DAN EKONOMI TENTANG ETIKA PERGAULAN MAHASISWA DI KAMPUS Oleh: Anang Priyanto Penelitian  ini  bertujuan  untuk  mengetahui  pendapat  mahasiswa  tentang  etika pergaulan  mahasiswa  di kampus yang  sesuai dengan  moral bangsa dan  pergaulan  generasi muda  serta  bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan  mahasiswa  di kampus dilaksanakan sesuai dengan moral bangsa. Penelitian  ini  merupakan  penelitian  deskriptif  yang  mengidentifikasikan  dan mendeskripsikan  kecenderungan-kecenderungan  pendapat  mahasiswa  tentang  etika pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  kehidupan  universitas  khususnya Universitas Negeri Yogyakarta, dan responden penelitian ini adalah mahasiswa FISE UNY dengan  teknik  random  sampling  10%  dari  jumlah  populasi  sebanyak  +  480  orang mahasiswa.  Instrumen  penelitian  ini  menggunakan  angket  modifikasi  tertutup  dan  terbuka dan divalidasi secara construct validity, serta analisis datanya dengan analisis deskriptif.  Hasil  penelitian  diperoleh  bahwa  pendapat  mahasiswa  FISE  UNY  tentang  etika pergaulan  mahasiswa  di  kampus  merupakan  perilaku  yang  baik  di  lingkungan  kampus sesuai  kebiasaan  hidup  masyarakat  Indonesia  dalam  berhubungan  dengan  sesama mahasiswa  maupun  dalam  berhubungan  antara  mahasiswa  dengan  dosen  dan  karyawan kampus.  Perilaku  yang  baik  di  kampus  ini  menurut  mahasiswa,  akan  berjalan  dengan  baik apabila ada peraturan yang jelas yang mengaturnya serta penerapan sanksi yang tegas bagi yang  melanggarnya,  dan  peraturan  akademik  yang  sudah  ada  harus  dilaksanakan  dengan tegas.    Menurut  mahasiswa  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan identitas  moral bangsa dilaksanakan  dengan memperhatikan etika  pergaulan  di  masyakarat yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan  universitas  yang  telah disepakati  oleh  mahasiswa  dengan  tidak  memberatkan  mahasiswa  dan  berlaku  bagi komunitas  kampus,  baik  mahasiswa  maupun  dosen  dan  karyawan,  serta  pelaksanaannya dengan tidak dipaksakan tetapi dengan penyadaran melalui proses yang berlangsung secara bertahap. ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(869, 13, 3, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net KATA PENGANTAR Puji  syukur  kami  panjatkan  kehadiran  Tuhan  Yang  Maha  Esa  atas  karunianya sehingga  dapat  tersusunlah  laporan  penelitian  ini  dengan  baik.  Kami  menyadari  laporan penelitian  ini  jauh  dari  sempurna  dan  tanpa  bantuan  dari  berbagai  pihak  takkan  mungkin terselesaikan.  Oleh  karenanya  sudah  sepantasnyalah  jika  pada  kesempatan  ini  kami sampaikan ucapan terima kasih kepada: 1. Bapak  Sardiman  A.M.MPd  selaku  Dekan  FISE  UNY  yang  telah  membantu  dalam penyediaan dana penelitian ini; 2. Bapak  dan  Ibu  Kaprodi  dilingkungan  FISE  UNY  yang  telah  mengijinkan  peneliti menyebarluaskan angket penelitian ini kepada para mahasiswanya; 3. Para  mahasiswa  FISE  UNY  sebagai  responden  dari  semua  program  studi  yang  telah meluangkan waktu untuk mengisi angket penelitian ini; 4. Semua  pihak  yang  tidak  bisa  disebutkan  satu  persatu  yang  telah  membantu  dalam pelaksanaan penelitian ini. Semoga laporan penelitian ini bermanfaat bagi para pembacanya.                                                                                                   Yogyakarta,      Nopember 2010                                                                                                      Penyusun ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(870, 13, 4, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net DATAR ISI Halaman Judul  ................................................................................  ...... i Lembar Pengesahan ..........................................................................  ......  ii Abstrak  ........................................................................................................  iii Kata Pengantar ..................................................................................  ........  iv Daftar Isi   ....................................................................................................  v BAB I   PENDAHULUAN ...............................................................  ...... 1 A. Latar Belakang Masalah  ...................................................  .......  1 B. Rumusan Masalah   ...........................................................  .......  2 C. Tujuan Penelitian  .............................................................  ....... 2 D. Manaat Penelitian   ...........................................................  .......  3 BAB II   KAJIAN TEORI  ...............................................................  .......  4 A. Pendapat  .........................................................................  ....... 4 B. Etika Pergaulan  ...............................................................  ....... 4 C. Perilaku Pergaulan di Kampus  .................................................... 5 ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(871, 13, 5, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net D. Pancasila sebagai Identitas Moral Bangsa .................................... 7 BAB III METODE PENELITIAN   .................................................  ......... 9 A. Jenis Penelitian   ...............................................................  ........ 9 B. Populasi   ..........................................................................  ........ 9 C. Teknik Sampling   ............................................................  ........  9 D. Instrumen Penelitian  ................................................................... 9 E. Validasi Penelitian   ......................................................................  9 F. Analisis Data   .............................................................................. 10 BAB IV  HASIL PENELITIAN DAN PEMBAHASAN  ............................ 11 A. Hasil Penelitian   .......................................................................... 11 B. Pembahasan   ................................................................................  18 BAB V  PENUTUP  .....................................................................................  22 A. Kesimpulan  ................................................................................. 22 B. Saran  ........................................................................................... 22 DATAR PUSTAKA ..................................................................................... 23 LAMPIRAN ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(872, 13, 6, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB I PENDAHULUAN A. Latar Belakang Masalah Akhir-akhir  ini  banyak  isu-isu  yang  berkembang  mengenai  etika  pergaulan mahasiswa  di  kampus  terkait  dengan  persoalan  sopan  santun,  tata  krama,  etika dalam  berkomunikasi  serta  tata  cara  berpakaian  yang  pantas  dalam  pergaulan  di lingkungan kampus. Isu tersebut telah menjadi sorotan banyak pihak terutama para pimpinan  universitas  khususnya  pimpinan  Universitas  Negeri  Yogyakarta  (UNY), baik  di  tingkat  pimpinan  pusat  (kantor  rektorat)  maupun  di  tingkat  fakultas. Bahkan  isu  yang  berkembang  telah  menyangkut  pihak  luar  yang  ikut  berkomentar menanggapai tata cara berpakaian mahasiswa UNY yang dianggapnya sangat tidak tepat  dilakukan  oleh  mahasiswa  UNY  yang  nota  bene  sebagai  mahasiswa universitas penghasil calon-calon guru. Isue ini menjadi keprihatinan para pimpinan universitas  dan  ditangkap  mentah-mentah  tanpa  melakukan  konfirmasi  kepada mahasiswa atau melakukan pengamatan langsung atas kebenaran isu tersebut. Para dosenpun  banyak  yang  merasa  gerah  dan  jengkel  jika  isu  tersebut  benar  adanya. Mereka  merasa  universitas  ini  telah  ternodai  oleh  segelintir  mahasiswa  yang dikuatirkan  akan  merusak  citra  UNY  sebagai  universitas  penghasil  calon  guru  dan merusak  etika  pergaulan  bangsa  Indonesia  yang  memiliki  karakter  bangsa  yang santun  dan  menjunjung  tinggi  moral  bangsa.  Jika  tidak  segera  ditangani  akan dianggap  sebagai  sesuatu  yang  wajar  karena  perkembangan  mode  dan  jaman. Sebagai  komunitas  masyarakat  ilmiah  seharusnya  universitas  menjadi  contoh tauladan  bagi  moral  bangsa  sekaligus  pelopor  penjaga  etika  pergaulan  bangsa Indonesia.  ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(873, 13, 7, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net Terlepas  dari  tanggapan  para  pimpinan  universitas  atas  isu  etika  pergaulan mahasiswa  di  kampus,  yang  jelas  UNY  telah  mengeluarkan  sebuah  peraturan rektor  tentang  Etika  dan  Tata  Tertib  Pergaulan  Mahasiswa  di  Kampus.(Peraturan Rektor  Nomor  03  Tahun  2009).  Peraturan  rektor  ini  telah  banyak  memuat  segala hal  tentang  etika  pergaulan  mahasiswa  di  kampus  yang  telah  disepakati  bersama antara  para  pimpinan  universitas  dengan  perwakilan  mahasiswa  UNY.  Bahkan dalam  peraturan  rektor  tersebut  telah  disepakati  pula  pencantuman  sanksi  bagi yang  melanggar  etika  pergaulan  di  kampus  yang  dikriteriakan  bersama  itu.( lihat Pasal  12  –  14  Peraturan  Rektor  No.03  Th  2009).  Seharusnya  sebagai  mahasiswa UNY  khususnya  mahasiswa  FISE  UNY  yang  berkecimpung  di  bidang  sosial tentunya  tidaklah  asing  lagi  berhadapan  dengan  persoalan-persoalan  etika,  moral bahkan  komunikasi  personal  serta  persoalan-persoalan  tata  krama  pergaulan  di masyarakat  yang  sesuai  dengan  identitas  moral  bangsa  Indonesia.  Mahasiswa sebagai  generasi  muda  juga  memiliki  idealisme  pergaulan  yang  sesuai  dengan dunianya  namun  juga  tidak  terlepas  dari  koridor  status  bangsa  Indonesia  yang memiliki  identitas  moral  bangsa  yang  luhur.  Oleh  karenanya  bagaimanapun berkembangnya pergaulan generasi muda harus selalu mencirikan identitas nasional sebagai  bangsa  Indonesia  yang  miliki  identitas  moral  yang  luhur  dalam  wadah negara kesatuan Republik Indonesia yang berasaskan Pancasila. Bilamana  isu-isu  yang  berkembang  di  lingkungan  kampus  UNY  sebagaimana diuraikan  di  atas  benar,  berarti  tidak  semua  mahasiswa  sependapat  dengan ketentuan  etika  pergaulan  mahasiswa  di  kampus  sebagaimana  diatur  dalam peraturan rektor di atas.  B. Rumusan Masalah Berdasarkan  latar  belakang  masalah  di  atas  dapat  dirumuskan  masalah  sebagai berikut: a. Bagaimana  pendapat  mahasiswa tentang etika pergaulan  mahasiswa di kampus yang sesuai dengan moral bangsa dan pergaulan generasi muda? ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(874, 13, 8, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net b. Bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan  mahasiswa  di kampus dilaksanakan dengan baik sesuai dengan identitas moral bangsa? C. Tujuan Penelitian Tujuan penelitian ini adalah: a. Mengetahui pendapat mahasiswa tentang etika pergaulan mahasiswa di kampus yang sesuai dengan moral bangsa dan pergaulan generasi muda. b. Mengetahui  bagaimana  sebaiknya  menurut  mahasiswa  etika  pergaulan mahasiswa di kampus dilaksanakan sesuai dengan moral bangsa. D. Manfaat Penelitian Manfaat penelitian ini adalah: a. Sebagai  bahan  pengambilan  kebijakan  pimpinan  UNY  untuk  melakukan evaluasi  etika  pergaulan  mahasiswa  di  kampus  yang  tepat,  serta  untuk mengantisipasi  dan  melestarikan  identitas  moral  bangsa  yang  sesuai  dengan pergaulan  mahasiswa  serta  ciri  khas  UNY  sebagai  lembaga  penghasil  calon guru. b. Sebagai bahan kajian pembentukan karakter bangsa yang  sesuai perkembangan pergaulan generasi muda.  ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(875, 13, 9, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB II KAJIAN TEORI A. Pendapat Kamus  Besar  Bahasa  Indonesia  menyatakan  bahwa  pendapat  adalah  (1) pikiran, anggapan, (2) buah pikiran atau perkiraan tentang suatu hal (seperti orang, peristiwa).(Kamus  Besar  Bahasa  Indonesia,  2001).  Dengan  demikian  yang dimaksud  pendapat  mahasiswa  adalah  (1)  pikiran,  anggapan  mahasiswa,  (2)  buah pikiran  atau  perkiraan  tentang  sesuatu  hal  dari  mahasiswa.  Jadi  pendapat mahasiswa tentang etika pergaulan mahasiswa di kampus adalah pikiran, anggapan mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  atau  buah  pikiran  atau perkiraan dari mahasiswa tentang etika pergaulan mahasiswa di kampus.  B. Etika Pergaulan Etika  berasal  dari  bahasa  Yunani  kuno ethos ,  yang  dalam  bentuk  tunggalnya mempunyai  arti:  tempat  tinggal  yang  biasa,  padang  rumput,  kandang,  kebiasaan, adat,  akhlak,  watak,  perasaan,  sikap,  cara  berpikir.  Dalam  bentuk  jamaknya,  etika mempunyai arti adat kebiasaan. (K. Bertens, 2005: 4). Dalam Kamus Besar Bahasa Indonesia  (2001)  etika  diartikan  ilmu  tentang  apa  yang  baik  dan  apa  yang  buruk dan  tentang  hak  dan  kewajiban  moral  (akhlak).  Sedangkan  etiket  diartikan  tata cara  (adat  sopan  santun  dan  sebagainya)  di  masyarakat  beradab  dalam  memelihara ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(876, 13, 10, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net hubungan  baik  antara  sesama  manusianya.  Etis  adalah  (1)  berhubungan  (sesuai) dengan etika, (2) sesuai dengan asas perilaku yang disepakati secara umum.  Etika  pergaulan  berasal  dari  kata  etika  dan  pergaulan.  Pengertian  etika  telah diuraikan  di  atas,  sedangkan  arti  pergaulan  menurut  Kamus  Besar  Bahasa Indonesia  (  2001)  adalah  hal  pertemanan.  Oleh  karenanya  etika  pergaulan  dapat diartikan  sebagai  adat  kebiasaan  tentang  perilaku  yang  disepakati  bersama  sebagai sesuatu  yang  baik  dalam  hal  pertemanan.  Maksudnya  tidak  lain  adalah  kebiasaan yang  baik  dalam  menjalin  hubungan  sebagai  teman.  Etika  pergaulan  sebagai  suatu kebiasaan  memiliki  sifat  khusus,  baik  dalam  bentuk  maupun  keluasannya.  Etika pergaulan  sangat  berhubungan  dengan  perilaku  individu  dalam  menjalin  hubungan dengan  individu  lain  di  masyarakat,  dan  perilaku  tersebut  tidaklah  bersifat universal,  karena  memiliki  kekhususan  yang  menjadi  ciri  masyarakat  yang bersangkutan.  Meskipun  demikian  tidaklah  semua  perilaku  bersifat  kedaerahan, tetapi  ada  pula  perilaku  yang  bersifat  universal  sebagai  ciri  manusia  yang bermartabat,  seperti  perilaku  menghargai  hak  asasi  manusia  dengan  tidak  berbuat kekerasan  kepada  sesama  manusia.  Skinner  sebagaimana  dikutip  oleh  Bimo Walgito  (1990:  17)  membagi  perilaku  menjadi  perilaku  yang  alami  ( innate behavior ) dan perilaku operan ( operant behavior ). Perilaku yang alami merupakan perilaku  refleksif  yang  dibawa  oleh  organisme  sejak  lahir,  yang  terjadi  sebagai refleksi  secara  spontan  terhadap  stimulus  yang  mengenai  organisme  yang bersangkutan.  Perilaku  ini  tterjadi  secara  otomatis  tidak  diperintah  oleh  pusat susunan  syaraf  atau  otak.  Sedangkan  perilaku  operan  dikendalikan  oleh  pusat kesadaran  atau  otak,  yang  sering  juga  disebut  sebagai  perilaku  psikologis.  Pada manusia  perilaku  psikologis  merupakan perilaku yang paling  dominan atau dengan kata  lain  perilaku  manusia  merupakan  perilaku  yang  dibentuk,  perilaku  yang diperoleh, perilaku yang dipelajari melalui proses belajar. Oleh  karenanya  etika  pergaulan  mahasiswa  di  kampus  dapat  diartikan  sebagai adat kebiasaan perilaku yang baik yang disepekati bersama dalam berinteraksi antar mahasiswa  di  kampus  sebagai  aktualisasi  hak  dan  kewajiban  moral  dalam ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(877, 13, 11, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net masyarakat  yang  beradab.  Ukuran  masyarakat  yang  beradab  tentunya  masyarakat yang menjunjung tinggi nilai-nilai asas kerohanian bangsa yakni Pancasila.  C. Perilaku Pergaulan di Kampus Pergaulan  di  kampus  sangat  berhubungan  dengan  perilaku  individu  sebagai bagian  masyarakat  kampus.  Perilaku  individu  tersebut  amatlah  beragam,  namun keberagaman  itu  tentunya  dalam  batas-batas  yang  sesuai  dengan  norma  moral masyarakat  kampus  yang  sudah  ditetapkan  dalam  kebiasaan  kampus.  Perilaku mahasiswa  selaku  individu  manusia  sebagian  besar  perilakunya  berupa  perilaku yang dibentuk. Bimo Walgito (1990: 18 – 19) mengemukakan bahwa pembentukan perilaku dapat dilakukan dengan berbagai cara, antara lain: a. Pembentukan perilaku dengan kondisioning atau kebiasaan,  yakni  dengan cara membiasakan diri untuk berperilaku sesuai yang diharapkan; b. Pembentukan  perilaku  dengan  pengertian,  yakni  dengan  cara  yang  sesuai dengan teori belajar kognitif, bahwa belajar dengan disertai adanya pengertian. Misalnya  contoh  bahwa  naik  motor  harus  pakai  helm,  karena  helm  untuk keamanan diri.    c. Pembentukan  perilaku  dengan  menggunakan  model  atau  contoh,  yakni pembentukan  perilaku  dengan  cara  yang  didasarkan  pada  model  atau  contoh. Misalnya  perilaku  pemimpin  yang  dijadikan  panutan  atau  contoh  bagi  yang dipimpinnya. Dengan  demikian  dari  berbagai  cara  pembentukan  perilaku  dapat  diketahui perilaku-perilaku  yang  berhubungan  dengan  pergaulan  mahasiswa  di  kampus. Perilaku-perilaku  tersebut  sangatlah  beragam  sesuai  dengan  macamnya  pergaulan yang  dilakukan  mahasiswa  di  kampus.  Pergaulan  mahasiswa  di  kampus berhubungan  dengan  perilaku  komunikasi  antara  mahasiswa  dengan  dosen,  antara mahasiswa  dengan  mahasiswa  dan  antara  mahasiswa  dengan  pegawai  universitas, Dengan  perilaku  yang  ditampilkan  menjadikan  seseorang  akan  mendapat  penilaian di  mata  orang  lain  dan  masyarakat.  Penilaian  itu  mengarah  pada  hal-hal  yang  baik maupun  yang  buruk  diukur  dari  etika  hidup  yang  disepakati  bersama  dalam ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(878, 13, 12, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net masyarakat  yang  bersangkutan.  Perilaku  komunikasi  yang  dapat  menimbulkan penilaian  biasanya  menyangkut  perilaku  mengenai  cara-cara  berbicara,  bertegur sapa,  dan  berpenampilan  di  lingkungan  di  mana  perilaku  itu  diaktualisasikan. Perilaku baik dan buruk  atau  tindakan  baik  dan  buruk penilaiannya hanyalah  dapat dilakukan  oleh  seseorang  ataupun  masyarakat.  Apabila  tindakan  yang  dinilai  baik dan  buruk  itu  dilakukan  dengan  sadar  atas  pilihan,  artinya  dengan  sengaja,  maka penilaian terhadapnya disebut penilaian etis atau moral. (Poedjawiyatna, 2003: 14). Perilaku  pergaulan  di  kampus  merupakan  perlaku  yang  berbeda  dengan perilaku  di  masyarakat  umum.  Lingkungan  kampus  merupakan  lingkungan masyarakat  ilmiah,  yang  dalam  berperilaku  selalu  dikaitkan  pada  hal-hal  ilmiah akademik.  Segala  perilaku  anggota  masyarakat  kampus  terikat  pada  koridor  etika pergaulan  di  kampus  yang  telah  menjadi  patokan  bagi  semua  warga  kampus. Lebih-lebih jika kampus itu sebagai pencetak calon-calon guru bahwa guru di mata masyarakat  dianggap  sebagai  profesi  yang  paling  mulia  dan  dijadikan  sebagai panutan  dalam  berperilaku  di  masyarakat.  Tentunya  kampus  yang  demikian  juga harus  menjadi  panutan  dan  contoh  berperilaku  yang  baik  bagi  anggota  masyarakat umum.  Namun  demikian  anggota  masyarakat  kampus  juga  sebagian  besar  sebagai bagian  atau  menjadi  anggota  dari  masyarakat  umum,  sehingga  segala  perilakunya sudah  pasti  juga  terbawa  dari  perilaku  sebagaimana  hidup  di  masyarakat.  Hal seperti  ini  sangatlah  berpengaruh  dalam  rutinitas  yang  terjadi  sehari-hari  di lingkungan  kampus.  Bila  masyarakat  kampus  sebagai  masyarakat  khusus seharusnya juga memiliki norma-norma pergaulan yang khas. D. Pancasila sebagai Identitas Moral Bangsa Pancasila  sebagai  ideologi  negara  Republik  Indonesia  mempunyai  kedudukan sebagai ideologi terbuka, maksudnya adalah bahwa nilai-nilai dan cita-citanya tidak dipaksakan dari luar melainkan digali dari harta kekayaan rohani, moral dan budaya masyarakat  Indonesia.  Oleh  karenanya  Pancasila  dapat  dikatakan  sebagai kepribadian  bangsa  Indonesia,  yakni  memberikan  corak  yang  khas  kepada  bangsa Indonesia  dan  tak  dapat  dipisahkan  dengan  bangsa  Indonesia  serta  merupakan  ciri ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(879, 13, 13, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net yang  melekat  pada  bangsa  Indonesia  yang  membedakan  dengan  bangsa  lain. Dengan  demikian  sebagai  kepribadian  bangsa  Indonesia,  Pancasila  dapat  pula dikatakan  merupakan  identitas  moral  bangsa  Indonesia.  Moral  dapat  diartikan merupakan ajaran-ajaran ataupun wejangan-wejangan, patokan-patokan, kumpulan peraturan,  baik  lisan  maupun  tertulis  tentang  bagaimana  manusia  hidup  dan bertindak  agar  menjadi  manusia  yang  baik  (Kaelan,  2008.  93).  Pancasila  sebagai moral  bangsa  dapat  diartikan  bahwa  Pancasila  menjadi  ajaran-ajaran, patokan-patokan  bagaimana  manusia  hidup  dan  bertindak  agar  menjadi  manusia yang baik. Oleh karenanya Pancasila sebagai identitas moral bangsa dapat diartikan bahwa  Pancasila  merupakan  ciri  patokan  atau  pedoman  hidup  yang  baik  bangsa Indonesia.  ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(880, 13, 14, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB III METODE PENELITIAN A. Jenis Penelitian Penelitian  ini  merupakan  penelitian  deskriptif  dikarenakan  hasil  penelitian  ini hanyalah  mengidentifikasikan  dan  mendeskripsikan  kecenderungan-kecenderungan pendapat  mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan kehidupan universitas khususnya Universitas Negeri Yogyakarta. B. Populasi Populasi  penelitian  ini  adalah  seluruh  mahasiswa  Fakultas  Ilmu  Sosial  dan  Ekonomi Universitas Negeri Yogyakarta yang terdaftar sebagai mahasiswa hingga tahun 2010. C. Teknik Sampling Teknik  sampling  yang  digunakan  dalam  penelitian  ini  adalah random  sampling. Setiap  mahasiswa  program  studi  yang  terdaftar  di  lingkungan  FISE  diambil  sebagai sampel secara acak dengan jumlah minimal 10% dari jumlah mahasiswa terdaftar di FISE UNY. Hal ini didasarkan pada keterbatasan dana dan waktu penelitian yang ditentukan. D. Instrumen Penelitian Instrumen  penelitian  ini  berupa  angket,  dalam  bentuk  baik  tertutup  berupa  pilihan pendapat  tentang  etika  pergaulan  di  kampus  maupun  angket  terbuka  yang  berupa  isian jawaban  dari  responden  atas  pertanyaan-pertanyaan  yang  terkait  dengan  masalah penelitian. E. Validasi Instrumen ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(881, 13, 15, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net Validasi instrumen menggunakan konstruk validasi dengan merujuk pada kajian teori yang relevan dengan permasalahan penelitian. F. Analisis Data Analisis data penelitian ini mengunakan analisis statistik deskriptif berupa identifikasi prosentase  kecenderungan-kecenderungan  pendapat  mahasiswa  tentang  etika  pergaulan mahasiswa  di  kampus  dan  analisis  kualitatif  berupa  uraian  pendapat  mahasiswa  tentang bagaimana  etika  pergaulan  mahasiswa  di  kampus  dilaksanakan  dengan  baik  sesuai dengan identitas moral bangsa. ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(882, 13, 16, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB IV HASIL PENELITIAN DAN PEMBAHASAN A. Hasil Penelitian Penelitian  ini  dilakukan  pada  bulan  Juni  sampai  dengan  Agustus  2010  terhadap mahasiswa  yang  terdaftar  di  Fakultas  Ilmu  Sosial  dan  Ekonomi  (FISE)  Universitas Negeri  Yogyakarta  (UNY)  selaku  populasi  yang  berjumlah  4832  orang,  dengan responden yang sesuai dengan teknik sampling yang digunakan berjumlah 485 orang.  Data  penelitian  ini  diperoleh  dari  angket  (quesioner)  yang  diberikan  kepada responden  berupa  angket  gabungan  terbuka  dan  tertutup  untuk  menjaring  data  tentang pandapat mahasiswa tentang  etika pergaulan mahasiswa di  kampus. Dari instrumen yang diberikan  kepada  responden  sebanyak  480  angket  dan  diterima  kembali  kepada  peneliti berjumlah 392  angket.  Tidak kembalinya  jumlah  angket  sesuai dengan jumlah yang telah diedarkan  kepada  responden  ada  beberapa  kemungkinan  yang  menurut  peneliti  menjadi kendalanya  yaitu,  waktu  penelitian  yang  singkat,  saat  akhir  kuliah  semester  menjelang ujian  semester,  menyita  waktu  responden  untuk  mengisi  angket  yang  bersangkutan,  dan tidak adanya reward  untuk responden yang mengisi angket (karena terbatasnya dana). Hasil  yang  diperoleh  dari  penelitian  ini  adalah  responden  sebagian  besar  bertempat tinggal  di:  kost  ada  57,6%,  sedangkan  yang  bersama  orang  tua  ada  31,2%,  dan  ikut saudara  sebanyak  11,2%.  Sebagian  besar  responden  mengetahui  tentang  etika  secara berurutan  berasal  dari:  orang  tua  kandung,  kemudian  dari  belajar  di  sekolah,  dari pengalaman hidup dan dari kebiasaan hidup. Dari  data  yang  diperoleh  dapat  diidentifikasi  beberapa  pendapat  mahasiswa  tentang etika pergaulan mahasiswa di kampus, antara lain: 1. Etika Pergaulan Mahasiswa di Kampus: ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(883, 13, 17, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net a. Bila  berpapasan  dengan  dosen  di  kampus,  menurut  sebagian  besar  mahasiswa sebaiknya  beri  salam  dengan  menundukkan  kepala  (74,4%  dari  seluruh  jumlah responden), dan sebagian kecil mahasiswa berpendapat pura-pura tidak tahu karena mahasiswa  anggap  dosen  yang  bersangkutan  juga  tidak  kenal  mahasiswa  tersebut (2,4%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  cium tangan,  jika  kenal  menyapa,  menundukkan  kepala  sembari  tersenyum,  beri  salam dengan jabat tangan. b. Berpakaian saat kuliah menurut mahasiswa sebaiknya rapi dan pantas pakai (75,2% dari  seluruh  jumlah  responden),  modis  dan  trendy  (6,4%  dari  seluruh  jumlah responden),  berpakaian  sesuai  dengan  bentuk  badan  (4%  dari  seluruh  jumlah responden).,  dan  memakai  seragam  yang  ditentukan  (3,2%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  berpakaian  yang  nyawan  dan menutup aurat. c. Bila  menghadap  dosen  untuk  berkonsultasi,  menurut  mahaiswa  sebaiknya melakukan  konfirmasi  terlebih  dahulu  kepada  dosen  yang  bersangkutan  mengenai kesediaannya  (60,8%  dari  seluruh  jumlah  responden),  konfirmasi  jadwal keberadaan  dosen  yang  bersangkutan  untuk  menentukan  waktu  yang  tepat berkonsultasi  (33,6%  dari  seluruh  jumlah  responden),  menanyakan  teman  terlebih dahulu  untuk  mengetahui  gaya  atau  kebiasaan  dosen  yang  bersangkutan  dalam membimbing  (3,2%  dari  seluruh  jumlah  responden),  langsung  mendatangi  dosen yang  bersangkutan  untuk  berkonsultasi  (2,4%  dari  seluruh  jumlah  responden). Beberapa mahasiswa menambahkan, harus sopan dan tidak mengganggu. d. Pendapat  mahasiswa  saat  bercakap-cakap  dengan  teman  dikampus  harus diperhatikan:  dalam  berbicara  perlu  dijaga  volume  suara  agar  tidak  mengganggu kuliah (50,4% dari seluruh jumlah responden), bebas berbicara sebagai jaminan hak kebebasan berpendapat (17,6% dari seluruh jumlah responden), tidak mendominasi pembicaraan  (15,2%  dari  seluruh  jumlah  responden),  isi  pembicaraan  tidak menyangkut  hal-hal  rahasia  biar  didengar  orang  lain  (5,6%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  dalam  bercakap-cakap  dengan tata  cara  penyampaian  yang baik, tata krama yang  baik,  bila  mengganggu  meminta ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(884, 13, 18, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net maaf,  menggunakan  bahasa  yang  sopan,  topik  yang  dibicarakan  tidak  berbau  sara, politik dan sex. e. Datang  ke  kampus  untuk  kegiatan  akademik  selain  kuliah  sebaiknya:  berpakaian rapi  tidak  memakai  baju  kaos  dan  harus  memakai  sepatu  (48,8%  dari  seluruh jumlah responden), berperilaku yang baik dan boleh berpakaian seadanya asal tidak menggangu  (20%  dari  seluruh  jumlah  responden),  berpakaian  rapi  dan  boleh memakai  sandal  (12,8%  dari  seluruh  jumlah  responden),  tak  perlu  memperhatikan penampilan  diri,  yang  penting  mengikuti  kegiatan  (2,4%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  tetap  menutup  aurat,  berpakaian yang rapi dan sopan. f. Berkomunikasi dengan dosen lewat telepon: memberi salam terlebih dahulu dengan meminta  maaf  bila  mengganggu  (78,4%  dari  seluruh  jumlah  responden),  pada  saat yang tidak mengganggu waktu kerja dosen yang bersangkutan (12,8% dari seluruh jumlah  responden),  menanyakan  terlebih  dahulu  kesediaannya  untuk  berbicara (5,6%  dari  seluruh  jumlah  responden),  berbicara  langsung  maksud  dan  tujuannya (4,8%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: memberi  salam  dan  minta  maaf  bila  mengganggu  kemudian  mengemukakan masud dan tujuannya. g. Berjalan  bersama  pacar  di  kampus:  selalu  memperhatikan  tata  cara  berbicara  yang wajar sebagai teman (34,4% dari seluruh jumlah responden), jaga jarak yang wajar agar tidak diketahui umum bahwa anda sedang pacaran (26,4% dari seluruh jumlah responden),  bergandengan  tangan  untuk  menunjukkan  kepada  umum  hubungan anda  (3,2%  dari  seluruh  jumlah  responden),  tidak  usah  memperhatikan  orang  lain yang  penting  perlakukan  pacar  dengan  mesra  (3,2%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  menjaga  sopan  santun  dan  tata krama, biasa saja selayaknya teman, berjalan sewajarnya tidak melanggar  etika  dan tidak  mengganggu  orang  lain,  sewajarnya  tidak  terlalu  berlebihan,  dan  tetap pacaran. h. Akan  membuang  sampah  di  kampus  sebaiknya:  di  tempat  sampah  yang  disediakan (81,6%  dari  seluruh  jumlah  responden),  tidak  dilakukan  karena  tidak  ada  tempat ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(885, 13, 19, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net sampah  yang  disediakan  (4,8%  dari  seluruh  jumlah  responden),  dibuang  ke  luar kampus  sembarangan  (2,4%  dari  seluruh  jumlah  responden),  di  sembarang  tempat karena  tidak  ada  tempat  sampah  yang  disediakan  (0,8%  dari  seluruh  jumlah responden). i. Untuk  melampiaskan  kejenuhan  saat  perkuliahan,  boleh  melakukan:  berbicara dengan  teman  dekat  anda  (41,6%  dari  seluruh  jumlah  responden),  usul  kepada dosen yang bersangkutan untuk merubah metode pembelajaran (30,4% dari seluruh jumlah  responden),  corat-coret  meja  dan  kursi  kuliah  (0,8%  dari  seluruh  jumlah responden),  corat-corat  tembok  ruang  kuliah  (0,8%  dari  seluruh  jumlah responden).  Beberapa  mahasiswa  menambahkan:  mencorat-coret,  menggambar, menulis di buku sendiri, baca buku, keluar sebentar pamit kepada dosen untuk cari udara segar. j. Bila  ada  teman  yang  tidak  rapi  berpakaian  saat  kuliah,  sebaiknya:  dosen  menegur dan  mengingatkan  (36%  dari  seluruh  jumlah  responden),  dosen  melarang  yang bersangkutan  mengikuti  kuliah  (9,6%  dari  seluruh  jumlah  responden),  pengurus fakultas  atau  program  studi  menegur  dan  memberikan  sanksi  (6,4%  dari  seluruh jumlah  responden), anda  menegur  yang  bersangkutan untuk  merapikan  pakaiannya (24%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  untuk membiarkan  saja  karena  hak  yang  bersangkutan,  sama-sama  dewasa  sudah  tahu mana yang baik dan yang tidak baik, memberi masukan kepada yang bersangkutan, agar  dosen  menegurnya,  sebaiknya  teman  dan  pengurus  fakultas  menegurnya  agar yang bersangkutan berubah, dan diam saja. k. Potongan  rambut  mahasiswa  laki-laki  sebaiknya:  pendek  dan  rapi  (46,4%  dari seluruh  jumlah  responden),  boleh  panjang  asalkan  rapi  (23,2%  dari  seluruh  jumlah responden),  boleh  panjang  seperti  rambut  wanita  (3,2%  dari  seluruh  jumlah responden),  boleh  gundul  (2,4%  dari  seluruh  jumlah  responden),  pendek  seperti tentara (0,8%  dari seluruh jumlah responden).  Beberapa  mahasiswa  menambahkan asal rapi. l. Sebagai  mahasiswa  putri  bila  memakai  baju  dengan  celana  panjang  sebaiknya:  rapi dan  pantas  dipakainya  (53,6%  dari  seluruh  jumlah  responden),  tidak  terlalu  ketat ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(886, 13, 20, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net (21,6%  dari  seluruh  jumlah  responden),  sesuai  sebagai  baju  dan  celana  panjang wanita  (10,4%  dari  seluruh  jumlah  responden),  tidak  terlalu  longgar  (4,8%  dari seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan:  rapi,  pantas dipakai dan tidak ketat, sopan, nyaman dipakai. m. Mahasiswa  yang  terlambat  masuk  kuliah  sebaiknya:  meminta  maaf  kepada  dosen yang bersangkutan dengan sopan (69,6% dari seluruh jumlah responden), langsung masuk  asal  belum  lama  terlambatnya  (9,6%  dari  seluruh  jumlah  responden),  tidak usah  masuk  karena akan  mengganggu  (3,2%),  dosen melarang mahasiswa  tersebut untuk  mengikuti  kuliah  (0,8%  dari  seluruh  jumlah  responden).  Beberapa mahasiswa  menambahkan:  menjelaskan  alasan  keterlambatan,  meminta  maaf kepada dosenyang bersangkutan dan tidak bikin suasana rame, masuk saja. n. Perilaku  dan  penampilan  mahasiswa  juga  meniru  perilaku  dan  penampilan dosennya,  menurut  pendapat mahasiswa:  ya  sebagian kecil  mahasiswa  (29,6% dari seluruh  jumlah  responden),  tidak  semua  mahasiswa  (26,4%  dari  seluruh  jumlah responden),  tidak  semuanya  ditiru  oleh  mahasiswa  (25,6%  dari  seluruh  jumlah responden),  ya  sebagian  besar  mahasiswa  (9,6%  dari  seluruh  jumlah  responden). Beberapa mahasiswa menambahkan: tidak semuanya begitu. o. Mahasiswa  meminta  pelayanan  administrasi  akademik  dan  kemahasiswaan  kepada pegawai/karyawan  sebaiknya:  memohon dengan kata-kata  yang  sopan  (60,8% dari seluruh  jumlah  responden),  cukup  menyerahkan  syarat-syarat  yang  diperlukan (12%  dari  seluruh  jumlah  responden),  tidak  perlu  banyak  memohon  dan  bertanya asal  sudah  memenuhi  persyaratannya  (11,2%  dari  seluruh  jumlah  responden), memerintahkan  untuk  segera  dilayani  karena  memang  sudah  tugasnya  (2,4%  dari seluruh jumlah responden). p. Menduduki meja sebagai kursi yang ada di kampus: tidak boleh, karena kurang etis (56%  dari  seluruh  jumlah  responden),  tidak  boleh,  karena  bukan  kursi  (16%  dari seluruh  jumlah  responden),  boleh,  asalkan  kursi  yang  disediakan  sudah  terpakai semua  (8,8%  dari  seluruh  jumlah  responden),  boleh,  asalkan  tidak  ada  kursi  lain (5,6%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan,  boleh ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(887, 13, 21, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net tergantung  waktunya,  lagian  dosen  kadang  duduk  di  meja  waktu  mengajar,  tidak sesuai dan tidak boleh karena meja bukan untuk duduk. q. Mahasiswa yang berperilaku tidak sopan selama kuliah harus dijatuhi sanksi: perlu, tetapi  sanksinya  harus  yang  mendidik  (39,2%  dari  seluruh  jumlah  responden), perlu,  sebab untuk  memberi pelajaran  agar tidak mengulang  perbuatan  lagi  (24,8% dari  seluruh  jumlah  responden),  tidak  perlu,  cukup  diperingatkan  saja  (20,8%  dari seluruh jumlah responden), tidak perlu (4% dari seluruh jumlah responden). Beberapa mahasiswa menambahkan tidak perlu, diberi nasehat saja oleh dosen agar merubah kebiasaan buruknya, diberi sanksi moral saja. r. Mahasiswa mengisi waktu  luang  di  kampus  sebaiknya: diskusi  tugas kuliah  dengan teman di tempat yang  disediakan (36% dari  seluruh  jumlah  responden), ngobrol di taman  kampus  (32%  dari  seluruh  jumlah  responden),  belajar  di  perpustakaan (26,4%  dari  seluruh  jumlah  responden),  konsultasi  dosen  untuk  tugas  dan  materi kuliah  (8%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: untuk  kegiatan  organisasi,  pergi  ke  kost/HIMA,  membaca  koran  dan  tabloit, mengerjakan tugas. s. Mahasiswa  akan  terbiasa  berperilaku  baik  apabila:  penerapan  peraturan  akademik dan  peraturan  tata  tertib  laksanakan  dengan  tegas  (32,8%  dari  seluruh  jumlah responden),  sarana  dan  prasaran  kegiatan  dan  pembelajaran  di  kampus  tersedia dengan  baik  (24,8%  dari  seluruh  jumlah  responden),  dosen  juga  berperilaku  baik dan  dapat  dijadikan  panutan  (24%  dari  seluruh  jumlah  responden),  ada  peraturan tata  tertib  yang  jelas  dan  mudah  diketahui  setiap  mahasiswa  (19,2%  dari  seluruh jumlah  responden).  Beberapa  mahasiswa  menambahkan:  lingkungan  mendukung dan peraturannya tidak menekan mahasiswa. t. Berpapasan  dengan  dosen  di  kampus,  sebaiknya:  memberi  salam  karena  dosen yang  bersangkutan  anda  kenal  (52,8%  dari  seluruh  jumlah  responden),  cukup menganggukkan  kepala  kepada  dosen  tersebut  (25,6%  dari  seluruh  jumlah responden),  bersikap  biasa  saja  tidak  perlu  memandang  dosen  yang  bersangkutan (1,6%  dari  seluruh  jumlah  responden).  Beberapa  mahasiswa  menambahkan: ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(888, 13, 22, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net menganggukkan  kepala  dan  tersenyum,  memberi  salam  meskipun  tidak mengenalnya, menyapa dengan senyum. 2. Pelaksanaan  Etika  Pergaulan  Mahasiswa  di  Kampus  yang  sesuai  dengan  Identitas Moral Bangsa a. Pergaulan di kampus sebaiknya mengedepankan dan memperhatikan tatanan suatu sopan santun terhadap semua orang. b. Menjadi  orang  yang  Pancasilais  tidak  sepenuhnya  berfaham  barat,  jangan primordialisme,  erotisme  yang  secara  fanatik  berlebihan  dan  yang  sesuai  dengan ajaran agama. c. Etika  pergaulan  mahasiswa  sebaiknya  dilakukan  secara  wajar,  terlebih  pergaulan beda  jenis  sehingga  tidak  menimbulkan  fitnah/guncingan.  Bisa  menjaga  apa  yang seharusnya  tidak  dilakukan  (teriak-teriak,  bergandengan  lawan  jenis  dan sebagainya) d. Rapi, sopan tidak dipaksa e. Mentaati  aturan  yang  diberikan  oleh  kampus  dan  dapat  berperilaku  sopan  serta saling  menghargai  sesama  orang  dan  dapat  menjadi  panutan  untuk  adik-adik  yang baru. f. Bergaul sesuai dengan norma dan batas wajar sesuai adat ketimuran g. Jangan  dengan  paksaan  tetapi  dengan  penyadaran,  bertahap,  jangan  langsung karena  semua  perlu  proses,  pembimbing  harus  sabar  karena  semua  orang  memiliki cara pandang masing-masing. h. Pergaulan mahasiswa di kampus harus sesuai dengan norma dan etika pergaulan di masyarakat  maupun  sesuai  dengan  peraturan  yang  telah  ditetapkan  kampus,  selain harus  disosialisasikan  kepada  mahasiswa  mengenai  etika  pergaulan  karena  banyak juga mahasiswa yang kurang bisa menerapkan etika pergaulan di kampus. i. Cukup melaksanakan peraturan yang sudah ada j. Berpakaian sopan, bertingkah laku baik dan disiplin k. Dosen harus memberi contoh yang baik dalam etika maupun keprofesionalan l. Moral  tidak  melulu  diseragamkan  dengan  sebuah  simbol.  Moral  adanya  di  hati, bukan fisik, sandal tidak berpengaruh terhadap kapasitas otak dan intelegensia. ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(889, 13, 23, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net m. Menerapkan  beberapa  aturan  yang  tidak  terlalu  mengekang  mahasiswa, pelanggaran harus diberi sanksi yang sesuai pelanggarannya n. Sesuai  peraturan  yang  berlaku  yang  telah  disepakati  mahasiswa  dan  tidak membebani mahasiswa o. Sesuai  peraturan  yang  dikeluarkan  pihak  kampus  terutama  masalah  etika  dalam berpakaian untuk menunjang proses pembelajaran. Seluruh civitas akademika diberi pelajaran moral tak terkecuali dosen dan para pejabat-pejabat jajaran universitas. p. Sesuai dengan apa yang telah diajarkan, sesuai norma etika dan moral kebangsaan q. Berpakaian  rapi  dan  sopan,  sering  mengunjungi  perpustakaan,  tidak membeda-bedakan teman, dan berprestasi r. Sesuai dengan etika dan moral yang ada dalam masyarakat s. Bergaul  tanpa  membedakan  sara,  saling  bertegur  sapa  ketika  bertemu, menghormati  yang  lebih  tua  (kakak  angkatan)  tidak  semena-mena  pada  yang  lebih muda (adik angkatan). t. Beretika berdasarkan agama yang dianutnya, mematuhi peraturan universitas, antar mahasiswa  dengan  dosen  harus  dibenahi  supaya  dosen  tidak  diremehkan,  antara sesama mahasiswa harap wajar saja B. Pembahasan 1. Etika pergaulan mahasiswa di kampus Dari  data  sebagaimana  diuraikan  dalam  sub  bab  hasil  penelitian  di  atas  dapat diketahui  bahwa  sebagian  besar  mahasiswa  menganggap  bahwa  etika  pergaulan mahasiswa  di  kampus  harus  dilaksanakan  sesuai  dengan  sopan  santun,  adat  kebiasaan hidup  yang  baik,    jadi  lebih  mengartikan  sebagai  etiket.  Hal  ini  dapat  dirinci  sebagai berikut: a. Apabila  mahasiswa  berpapasan  dengan  dosen  di  kampus  beri  salam  dan menundukkan kepala (74,4%); b. Selama  kegiatan  kuliah  di  kampus  mahasiswa  harus  berpakaian  yang  rapi  dan  pantas pakai (75,2%); ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(890, 13, 24, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net c. Apabila  akan  menghadap  dosen  untuk  berkosultasi  sebaiknya  konfirmasi  dahulu kepada dosen yang bersangkutan atas kesediaannya untuk ditemui (60,8%); d. Apabila  mahasiswa  bercakap-cakap  di  kampus  perlu  dijaga  volume  suara  agar  tidak mengganggu kuliah (50,4%); e. Apabila  datang  ke  kampus  untuk  kegiatan  akademik  selain  kuliah  harus  berpakaian rapi, tidak memakai kaos dan memakai sepatu (48,8%); f. Apabila  berkomunikasi  dengan  dosen  lewat  telepon  dengan  memberi  salam  terlebih dahulu dan meminta maaf bila mengganggu (78,4%); g. Apabila  berjalan  bersama  pacar  di  kampus:  selalu  memperhatikan  tata  cara  berbicara yang wajar sebagai teman (34,4%); h. Apabila  akan  membuang  sampah  di  kampus  sebaiknya:  di  tempat  sampah  yang disediakan (81,6%); i. Untuk melampiaskan kejenuhan saat perkuliahan, boleh melakukan: berbicara dengan teman dekat (41,6%); j. Apabila  ada  teman yang  tidak  rapi berpakaian saat kuliah, sebaiknya: dosen  menegur dan mengingatkan (36%); k. Potongan rambut mahasiswa laki-laki sebaiknya: pendek dan rapi (46,4%); l. Mahasiswa  putri  apabila  memakai  baju  dengan  celana  panjang  sebaiknya:  rapi  dan pantas dipakainya (53,6%); m. Mahasiswa  yang  terlambat  masuk  kuliah  sebaiknya:  meminta  maaf  kepada  dosen yang bersangkutan dengan sopan (69,6%); n. Perilaku  dan  penampilan  mahasiswa  sebagian  kecil  meniru  perilaku  dan  penampilan dosennya (29,6%); o. Mahasiswa  yang  meminta  pelayanan  administrasi  akademik  dan  kemahasiswaan kepada  pegawai/karyawan  sebaiknya:  memohon  dengan  kata-kata  yang  sopan (60,8%); ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(891, 13, 25, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net p. Menduduki  meja  sebagai  kursi  yang  ada  di  kampus:  tidak  boleh,  karena  kurang  etis (56%); q. Mahasiswa  yang  berperilaku  tidak  sopan  selama  kuliah  harus  dijatuhi  sanksi,  tetapi sanksinya harus yang mendidik (39,2%); r. Mahasiswa  mengisi  waktu  luang  di  kampus  sebaiknya  dengan  diskusi  tugas  kuliah bersama teman di tempat yang disediakan (36%); s. Mahasiswa akan terbiasa berperilaku baik apabila: penerapan peraturan akademik dan peraturan tata tertib laksanakan dengan tegas (32,8%); t. Bila  berpapasan  dengan  dosen  di  kampus,  sebaiknya:  memberi  salam  karena  dosen yang bersangkutan anda kenal (52,8%). Etika  pergaulan  mahasiswa  di  kampus  menurut  mahasiswa  sebaiknya  ditetapkan oleh  pihak  kampus  sebagai  peraturan  pergaulan  di  lingkungan  kampus  dengan  sanksi yang  mendidik.  Yang  menarik  menurut  mahasiswa  adalah  bahwa  perilaku  mahasiswa  di kampus  hanya  sebagian  kecil  yang  meniru  perilaku  dosen,  dan  dosen  diharapkan  aktif untuk menegur mahasiswa apabila ada mahasiswa yang berperilaku tidak baik di kampus. Sedangkan  menurut  mahasiswa  bahwa  pelaksanaan  etika  pergaulan  mahasiswa  di kampus  yang  sesuai  dengan  identitas  moral  bangsa  harus  dengan  mengedepankan  sopan santun,  sesuai  dengan  ajaran  agama,  nilai-nilai  Pancasila  dan  dituangkan  dalam  bentuk peraturan kampus (universitas) yang disosialisasikan kepada seluruh mahasiswa. Dengan  demikian  dari  hasil  penelitian  di  atas  dapat  dikemukakan  bahwa  pendapat mahasiswa  tentang  etika  pergaulan  mahasiswa  di  kampus  ternyata  sebagian  besar mahasiswa  FISE  UNY  menyatakan  bahwa  etika  pergaulan  mahasiswa  di  kampus merupakan  perilaku  yang  baik  di  lingkungan  kampus  sesuai  kebiasaan  hidup  masyarakat Indonesia  dalam  berhubungan  dengan  sesama  mahasiswa  maupun  dalam  berhubungan antara mahasiswa dengan dosen dan karyawan kampus. Perilaku yang baik di kampus ini menurut  mahasiswa,  akan  berjalan  dengan  baik  apabila  ada  peraturan  yang  jelas  yang mengaturnya  serta  penerapan  sanksi  yang  tegas  bagi  yang  melanggarnya,  dan  peraturan akademik yang sudah ada harus dilaksanakan dengan tegas.   ', '2020-01-14 02:20:26', '2020-01-14 02:20:26');
INSERT INTO `filepages` (`id`, `book_id`, `page_number`, `content`, `created_at`, `updated_at`) VALUES
(892, 13, 26, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net 2. Pelaksanaan  Etika  Pergaulan  Mahasiswa  di  Kampus  yang  sesuai  dengan  Identitas Moral Bangsa Pelaksanaan  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas moral  bangsa  menurut  mahasiswa  dengan  memperhatikan  etika  pergaulan  di  masyakarat yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan  universitas  yang  telah disepakati  oleh  mahasiswa  dengan  tidak  memberatkan  mahasiswa  dan  peraturan  ini berlaku  bagi  komunitas  kampus,  baik  mahasiswa  maupun  dosen  dan  karyawan.. Pelaksanaan  etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas  moral bangsa  dengan  tidak  dipaksakan  tetapi  dengan  penyadaran  melalui  proses  yang berlangsung secara bertahap. ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(893, 13, 27, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net BAB V PENUTUP A. Kesimpulan Dari  hasil  penelitian  dan  pembahasan  di  atas  dapat  ditarik  kesimpulan  bahwa pendapat mahasiswa FISE UNY tentang: 1. Etika pergaulan mahasiswa di  kampus  adalah  bahwa etika pergaulan  mahasiswa di kampus  merupakan  perilaku  yang  baik  di  lingkungan  kampus  sesuai  kebiasaan hidup  masyarakat  Indonesia  dalam  berhubungan  dengan  sesama  mahasiswa maupun  dalam  berhubungan  antara  mahasiswa  dengan  dosen  dan  karyawan kampus.  Perilaku  yang  baik  di  kampus  ini  menurut  mahasiswa,  akan  berjalan dengan  baik  apabila  ada  peraturan  yang  jelas  yang  mengaturnya  serta  penerapan sanksi  yang  tegas  bagi  yang  melanggarnya,  dan  peraturan  akademik  yang  sudah ada harus dilaksanakan dengan tegas.   2. Etika  pergaulan  mahasiswa  di  kampus  yang  sesuai  dengan  identitas  moral  bangsa menurut  mahasiswa  dilaksanakan  dengan  memperhatikan  etika  pergaulan  di masyakarat  yang  sesuai  moral  Pancasila  dan  harus  diatur  dalam  peraturan universitas  yang  telah  disepakati  oleh  mahasiswa  dengan  tidak  memberatkan mahasiswa  dan  peraturan  ini  berlaku  bagi  komunitas  kampus,  baik  mahasiswa maupun  dosen  dan  karyawan..  Pelaksanaannya  dengan  tidak  dipaksakan  tetapi dengan penyadaran melalui proses yang berlangsung secara bertahap. B. Saran ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(894, 13, 28, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net 1. Perlu  sosialisasi  Peraturan  Rektor  UNY  Nomor  3  Tahun  2009  ke  seluruh  sivitas akademika UNY terutama mahasiswa agar dapat dijadikan panduan dalam pergaulan di lingkungan kampus. 2. Segera  dipersiapkan  sarana  dan  prasarana  yang  terkait  berlakunya  Peraturan  Rektor UNY  Nomor  3  Tahun  2009  agar  jika  terjadi  pelanggaran  tidak  berlarut-larut penyelesaiannya. 3. Kuliah  Pendidikan  Pancasila  harus  dapat  menjadi  sarana  pembentukan  perilaku mahasiswa yang Pancasilais di kampus UNY. DAFTAR PUSTAKA Bimo Walgito (1991).  Psikologi Sosial (Suatu Pengantar).  Andi Offset. Yogyakarta. Franz  Magnis  Suseno  (1998).  Model  Pendekatan  Etika.   Penerbit  Kanisius. Yogyakarta. Kaelan (1987). Pancasila Yuridis Kenegaraan.  Liberty. Yogyakarta. --------- (2008).  Pendidikan Pancasila. Paradigma. Yogyakarta. K. Bertens (2005).  Etika. PT Gramedia Utama. Jakarta. Larry  May,  Shari  Collins-Chobanian,  Kai  Wong  (2001). Etika  Terapan  I  Sebuah Pendekatan Multikultur.  PT Tiara Wacana. Yogyakarta. Poedjawijatna (2003). Etika Filsafat Tingkah Laku.  Rineka Cipta. Jakarta Suharsimi  Arikunto  (1992). Prosedur  Penelitian  Suatu  Pendekatan  Praktik.   Rineka Cipta. Jakarta. ', '2020-01-14 02:20:26', '2020-01-14 02:20:26'),
(895, 13, 29, '  ( W ord to PDF Converter - Unregistered )  http://www.Word-to-PDF-Converter.net ', '2020-01-14 02:20:26', '2020-01-14 02:20:26');

-- --------------------------------------------------------

--
-- Table structure for table `migrations`
--

CREATE TABLE IF NOT EXISTS `migrations` (
  `id` int(10) unsigned NOT NULL,
  `migration` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(1, '2014_10_12_000000_create_users_table', 1),
(2, '2014_10_12_100000_create_password_resets_table', 1),
(3, '2019_08_19_000000_create_failed_jobs_table', 1),
(5, '2016_06_01_000001_create_oauth_auth_codes_table', 2),
(6, '2016_06_01_000002_create_oauth_access_tokens_table', 2),
(7, '2016_06_01_000003_create_oauth_refresh_tokens_table', 2),
(8, '2016_06_01_000004_create_oauth_clients_table', 2),
(9, '2016_06_01_000005_create_oauth_personal_access_clients_table', 2),
(10, '2019_12_12_203803_create_permission_tables', 2),
(20, '2019_12_13_062504_add_phone_to_users_table', 3),
(22, '2019_12_18_194039_create_categories_table', 4),
(26, '2020_01_09_042806_create_books_table', 5),
(27, '2020_01_09_052121_create_book_categories_table', 5),
(28, '2020_01_09_074031_add_picture_to_books_table', 5),
(29, '2020_01_09_091523_add_category_id_to_books_table', 6),
(30, '2020_01_09_100038_add_files_to_books_table', 7),
(34, '2020_01_09_102416_add_display_to_categories_table', 8),
(35, '2020_01_09_171256_add_penerbit_to_books_table', 9),
(36, '2020_01_09_203141_add_token_to_users_table', 9),
(37, '2020_01_09_213922_add_min_sewa_to_bookss_table', 10),
(38, '2020_01_10_070656_create_transactions_table', 11),
(39, '2020_01_10_114720_create_vouchers_table', 12),
(40, '2020_01_10_185344_add_expired_at_to_transaction_table', 13),
(41, '2020_01_11_073102_create_wishlists_table', 14),
(42, '2020_01_12_061551_create_displays_table', 15),
(43, '2020_01_12_062142_create_book_displays_table', 16),
(64, '2020_01_12_084251_create_filedetails_table', 17),
(65, '2020_01_12_084702_create_filepages_table', 17),
(84, '2020_01_13_212133_create_chats_table', 18),
(85, '2020_01_13_212142_create_chat_messages_table', 18),
(86, '2020_01_13_212157_create_chat_user_table', 18);

-- --------------------------------------------------------

--
-- Table structure for table `model_has_permissions`
--

CREATE TABLE IF NOT EXISTS `model_has_permissions` (
  `permission_id` bigint(20) unsigned NOT NULL,
  `model_type` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `model_id` bigint(20) unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `model_has_roles`
--

CREATE TABLE IF NOT EXISTS `model_has_roles` (
  `role_id` bigint(20) unsigned NOT NULL,
  `model_type` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `model_id` bigint(20) unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `oauth_access_tokens`
--

CREATE TABLE IF NOT EXISTS `oauth_access_tokens` (
  `id` varchar(100) COLLATE utf8_unicode_ci  NOT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  `client_id` int(10) unsigned NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci  DEFAULT NULL,
  `scopes` text COLLATE utf8_unicode_ci  DEFAULT NULL,
  `revoked` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `expires_at` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `oauth_access_tokens`
--

INSERT INTO `oauth_access_tokens` (`id`, `user_id`, `client_id`, `name`, `scopes`, `revoked`, `created_at`, `updated_at`, `expires_at`) VALUES
('010d423e569832d23871242bcbd5ab89bae63510c4d3a4a007fd5ed1366ba08d79a963acca72f94b', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 14:25:37', '2020-01-13 14:25:37', '2021-01-13 09:25:37'),
('03a4428b23278e70b4831bf3d3e03a71629da54d80ac28f746021c31dad586cb974634dcf70e99cf', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-14 19:28:03', '2019-12-14 19:28:03', '2020-12-14 14:28:03'),
('04539e55ba1edd4a6cf14780ddc09c66561eae32f5193dcedf940c336a240d43db137d1edc56c187', 8, 1, 'Personal Access Token', '[]', 0, '2019-12-20 11:50:10', '2019-12-20 11:50:10', '2020-12-20 06:50:10'),
('05fc48982e2ed5a372276b3807e279c9e20f4b43fa12a3c7daac5f09278693e5702098beccfd996e', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-20 20:47:50', '2019-12-20 20:47:50', '2020-12-20 15:47:50'),
('06becef932eb38874479a52e97b9e13ff75fe32e4c65b982c5a1060720716cf3bad921d519810434', 17, 1, 'Personal Access Token', '[]', 0, '2020-05-11 12:15:08', '2020-05-11 12:15:08', '2021-05-11 08:15:08'),
('07005ae0999ee0cb381ec2956c247dda722e235f5c890cac27d77ed901ff6556f6ebe0f6555a237f', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-10 11:33:59', '2020-01-10 11:33:59', '2021-01-10 06:33:59'),
('0dba7220f94245bfe99c00cd60f5f4e68aae573961c058921a5ee175300a1a1bc9bec51f7e651790', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-30 08:55:56', '2020-01-30 08:55:56', '2021-01-30 03:55:56'),
('0fd5fec8af913fd130f63753f105c7c8256358efcf8080bd8ca43cc3be773e1db34d4ebcae33fcc6', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-06 17:49:04', '2020-01-06 17:49:04', '2021-01-06 12:49:04'),
('15e5368a7f9dc3e00774ed8c33564cee717d38528b2a0c626b4281462b927fd69409412c4e25572f', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:25:24', '2019-12-17 14:25:24', '2020-12-17 09:25:24'),
('15ee9a910f37e40bf2ebe441ca08a62bf5fd7f069f71a629038599b4c75dc582f47e55622fff31a9', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-09 13:31:46', '2020-01-09 13:31:46', '2021-01-09 08:31:46'),
('165eb19f84cca647e45aca03c15b0b42fcd600883997180770107f6c908f511fff1736ba0cb791ad', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:26:45', '2019-12-17 14:26:45', '2020-12-17 09:26:45'),
('16d950969686b5279b82fd884d050982f84da8a76f7f23fab5c92161564e6dd6f2cbc80b9bf4f2e5', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-29 09:29:40', '2020-01-29 09:29:40', '2021-01-29 04:29:40'),
('18a29c9c1d7953928f4adcca6e5a5bf52faa2adc57df43c5461bcb36d7825bc957b00c542eb3fcee', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 02:33:09', '2020-01-13 02:33:09', '2021-01-12 21:33:09'),
('1a2e952ea6ce5fcff1913a314cbaf8db6f1c46937586aab299467e6f049b4e56792d8351b59e4ed8', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:24:10', '2019-12-17 14:24:10', '2020-12-17 09:24:10'),
('1bd65688764e9e9ba5a89713cf7911154ca2009fbc64b4c0ee2630423f104109501910fe2f4db4a3', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-11 17:11:31', '2020-01-11 17:11:31', '2021-01-11 12:11:31'),
('1ce7b52641e34008bdc08b9d8353b6f3c8e01c974f211a2281d36477e67202e04f7a35bf1f03abf6', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 15:44:54', '2019-12-17 15:44:54', '2020-12-17 10:44:54'),
('1e8e2f9a0f8f9f56b65ac487df4f96fec18c2114ae2cab6f8c551f5c775c3043c6e3dcd9008db4da', 9, 1, 'Personal Access Token', '[]', 0, '2019-12-17 18:23:48', '2019-12-17 18:23:48', '2020-12-17 13:23:48'),
('261e09af6241e29b8f807805166dbd90cd1242ce812a5f5bed1829cfb8fe606263cf12a0bdf8ff0f', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-31 09:56:15', '2020-01-31 09:56:15', '2021-01-31 04:56:15'),
('270b8976383109e90f2ae358612f544ea28349e15eb50c437104ba39a79f80cdf1132b176b0c202c', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-12 17:44:54', '2020-01-12 17:44:54', '2021-01-12 12:44:54'),
('287d369568bfdc871234666493e1adf3b67a8c1290c3e932687770643c559ce59481791d86bfaec2', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-29 09:35:37', '2020-01-29 09:35:37', '2021-01-29 04:35:37'),
('2a08deaf2ab705aec58e8adea6227d90818b8519ecae4628f150683ac3d5f6511d57804f0c4a5035', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-06 17:27:50', '2020-01-06 17:27:50', '2021-01-06 12:27:50'),
('2bffeb32e141327ebe25fe9d0203fa634b675a68bfa59f34b2a2d95e128f2632ed2fd75837c33365', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-03 10:39:42', '2020-01-03 10:39:42', '2021-01-03 05:39:42'),
('2c48f08d6b8065e58cfc70ec9d2a06d84548af36a6de0106b16794bee64dfef9d2809a4de9fab20f', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 15:15:28', '2020-01-13 15:15:28', '2021-01-13 10:15:28'),
('30695f662c42f1f2e95365a0239a350a73e086d24af971b4a73e4bb93c9b4a6c40638de80702329b', 3, 1, 'Personal Access Token', '[]', 0, '2020-05-11 10:26:24', '2020-05-11 10:26:24', '2021-05-11 06:26:24'),
('324a4e1b4cee1be02215f1d76c7f6ab73d4c50036fdc304f9f31eb6da42315d09d00bc533beeef3e', 8, 1, 'Personal Access Token', '[]', 0, '2020-02-10 09:43:52', '2020-02-10 09:43:52', '2021-02-10 04:43:52'),
('340fe766f71f4d8fef83b7a48155a2db2cf9c017bb060a8fc7ac8e8cb73ee8b07a90ad3187324dac', 16, 1, 'Personal Access Token', '[]', 0, '2020-05-22 15:39:46', '2020-05-22 15:39:46', '2021-05-22 11:39:46'),
('34144c8311d01d8ae956739e3742953788f11ce1d74b70a73f331bf2421274d63318b7ed982b9257', 8, 1, 'Personal Access Token', '[]', 0, '2020-02-18 15:15:39', '2020-02-18 15:15:39', '2021-02-18 10:15:39'),
('34154ed2fb0fa187dfdb5e3bb29245e970cf8b4d71fc90023e760d2a8628f524063e173119684399', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-16 10:35:40', '2019-12-16 10:35:40', '2020-12-16 05:35:40'),
('345190ff8148b9c938309efea484dad398129c316407b85dbf36f54481a7a29984a382146111f481', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-15 20:01:26', '2020-01-15 20:01:26', '2021-01-15 15:01:26'),
('36ee92f5886bd19adf91b0e558ba7a1ed00edb0ea58f72197cb33139c8ec05012cf67c01ebdc73ee', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 14:33:40', '2020-01-13 14:33:40', '2021-01-13 09:33:40'),
('36efe24965c50640e661bf81a46072a4f27d3a7df562f74cf450fae1a26c8a4ab7e0cf7774bd8b4e', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:16:46', '2019-12-17 14:16:46', '2020-12-17 09:16:46'),
('3be25a49cd00cd5b283f0797a40b3173812d750050eff71abc2707b1a0fde380d904ed11a179fa46', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-19 00:27:21', '2019-12-19 00:27:21', '2020-12-18 19:27:21'),
('3e39348d710db09dbb5aa733e007fb81c6f9b178cba9048914442260fd98cb8d1343a09dcdf09d37', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:53:38', '2019-12-17 14:53:38', '2020-12-17 09:53:38'),
('43a0b6c5a26b90273f632a4af32485b8efff0982bc292ff04e9d3631e45e25b93f923784b774b5ed', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 20:43:08', '2020-01-13 20:43:08', '2021-01-13 15:43:08'),
('441cf187dfcbf74a4aae9d910c4bfdb35f13df315baa79e0d8ca79cb3bccc5e3295c406517b76351', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:27:13', '2019-12-17 14:27:13', '2020-12-17 09:27:13'),
('44b4b3a0cdbc2318b966bd136ac76f20f0d5192e129f5e1d5729765672569b78aee25e17613c3cc9', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-29 10:55:31', '2020-01-29 10:55:31', '2021-01-29 05:55:31'),
('45c68e5ec9c3e83393db8f2eb68ed41daa9f89c52aaf419a32c3433bc1ff4e0cf9620fc1de1cc71f', 3, 1, 'Personal Access Token', '[]', 0, '2020-02-14 16:01:57', '2020-02-14 16:01:57', '2021-02-14 11:01:57'),
('45e3e7d088472f0840d09373a2dfafe86f632bbc942c01ccc34d842e7fa08ff16abf473b96f2ec31', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-20 10:47:07', '2019-12-20 10:47:07', '2020-12-20 05:47:07'),
('4861de2130ac4af940d3c6aa668fa43e0bb21a0a0712af21f6d026c5a8ac8fd678f31257ea12e435', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-12 11:00:16', '2020-01-12 11:00:16', '2021-01-12 06:00:16'),
('48bc3452f2b6685e3b3ef10a77187cbd906ab009df3c3ae7f85d9a73872141bcdddd1eefdba33ef2', 8, 1, 'Personal Access Token', '[]', 0, '2020-02-18 13:11:17', '2020-02-18 13:11:17', '2021-02-18 08:11:17'),
('48ec8fc4352c22c753b3a4760df06b6816f8f7a5015750415084c2d0c439fe704ae4ac892910d4d8', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-14 09:10:01', '2020-01-14 09:10:01', '2021-01-14 04:10:01'),
('4a296e459f26e7d9869cb5d995181ba8542fe6f998b8971e9dfe1bacf141bd7538596ab73d915cd9', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-10 22:17:00', '2020-01-10 22:17:00', '2021-01-10 17:17:00'),
('4de74ee12f4cb4dfbc5becf6b6d34d28635606f5c73b0153576990af188441b6ad420d6d313b64cc', 20, 1, 'Personal Access Token', '[]', 0, '2020-05-13 00:29:31', '2020-05-13 00:29:31', '2021-05-12 20:29:31'),
('4efaedeb6ce3929fccd6e62137274a50df172e0375e2a85e6aeac816ea54cf432f53c05c05b0b178', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:22:22', '2019-12-17 14:22:22', '2020-12-17 09:22:22'),
('4f7e45d7843a9e745fe9d926d40fd6b41528377bf142ae5f739328849e5c15f310fabff50f646b9d', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:35:18', '2019-12-17 14:35:18', '2020-12-17 09:35:18'),
('530e155f7ce8ed5aa5bc0fd0060f9b39a0692d903f6bb100798a8c0243bcca1233df59d07fac149d', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:18:43', '2019-12-17 14:18:43', '2020-12-17 09:18:43'),
('53678cf667370ef255a2155232717e4566cf6d7ba26972b38f7f22109346c738d1b8f12f042748e1', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-08 13:39:51', '2020-01-08 13:39:51', '2021-01-08 08:39:51'),
('53e91886b533c45650b3a385cfdc153829929a3617f13af9842ef0c94f68fae46b3fc4d41764a8e0', 18, 1, 'Personal Access Token', '[]', 0, '2020-05-12 00:54:01', '2020-05-12 00:54:01', '2021-05-11 20:54:01'),
('55472949cc72a7335a3f32b6d526d6591018cb8d1a9094da92ac23d687319e5e895be88c45ae1f9c', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:24:42', '2019-12-17 14:24:42', '2020-12-17 09:24:42'),
('5b3cace2cb083a775fc299e3828d22fe1542a120decdd352eb891ff5cae07199c64e88029e72c033', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-29 11:19:18', '2020-01-29 11:19:18', '2021-01-29 06:19:18'),
('5de7ef8cb670ecbc56bbd117f7c55b0f4f665cace6e444b857af2b41bbb3214505cbaec427649e75', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-09 14:12:13', '2020-01-09 14:12:13', '2021-01-09 09:12:13'),
('5fc23d11a821e31b1a36f08fae419ce7702c7eda2a2319746615ed9141e2e32a546ec83e73abbb8f', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 19:21:24', '2020-01-13 19:21:24', '2021-01-13 14:21:24'),
('6196ba20b60d8840f75ac22225ee3869aab065cbb7b7039efbc95fcb7075fe6f9b1f87a6e08e835c', 8, 1, 'Personal Access Token', '[]', 0, '2019-12-17 18:26:18', '2019-12-17 18:26:18', '2020-12-17 13:26:18'),
('674248c73bcba540e1c6f7b104b9467ed2efd15272f77eef48dd7c1cb232c4eb985f2433dd6aded7', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-14 22:36:02', '2020-01-14 22:36:02', '2021-01-14 17:36:02'),
('684760b341c876f6232a9fbcd11c22ea3c8985990cfdd7930bb5595d78eff02061728a1c5c996f5a', 1, 1, 'MyApp', '[]', 0, '2019-12-13 02:03:04', '2019-12-13 02:03:04', '2020-12-12 21:03:04'),
('6c68debc37a37857881a3a4afbcdf9d4f2c70dfbfe80d52357603450c29c4850c38283749bf379a9', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-09 18:58:55', '2020-01-09 18:58:55', '2021-01-09 13:58:55'),
('6eee69122793ab1d685a33d6c28f5475b5c270b350c26bc367271d4eb829afef2cb3d5f4c39b5cb3', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-30 20:55:19', '2020-01-30 20:55:19', '2021-01-30 15:55:19'),
('6faa67a8eee07ae2101aa677e0a2786229a0b5ebe33b4c318efd9ad56dceeab858032fd64a6dee97', 3, 1, 'Personal Access Token', '[]', 0, '2020-05-22 15:35:14', '2020-05-22 15:35:14', '2021-05-22 11:35:14'),
('720b9593207268e2cd4e60b3059a0a19c031a8787767fed1e6d39ec6c016cf54bdc44ae1cb691fcf', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-09 15:12:52', '2020-01-09 15:12:52', '2021-01-09 10:12:52'),
('72f1b1f4fad434ab3d04edde98725ed58c14a12e2bc04971491f30778bb2932ec456020f79309e4c', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:47:02', '2019-12-17 14:47:02', '2020-12-17 09:47:02'),
('734e2628ff1687003ac33f7e6a52705393ac7e8ed9fa7243d6642bb72c73c030912a16ac393b699d', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 17:07:59', '2019-12-17 17:07:59', '2020-12-17 12:07:59'),
('7492579190c25256107408390ef63de7d9fa4030b4b4e4803a09a6c676424bf92edbbb66210e572d', 3, 1, 'Personal Access Token', '[]', 0, '2020-02-03 21:00:42', '2020-02-03 21:00:42', '2021-02-03 16:00:42'),
('74dceab2c4b2c402880117771d4538986696773b4c8b7dac96fbbb92eb663f4bfa7c69d12bb67747', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-30 13:21:45', '2020-01-30 13:21:45', '2021-01-30 08:21:45'),
('7808d42970a0bd4fe850fe4b581c63286bb71da90f6b98163d9234b31b04c9353e2860af1eb3baea', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-22 23:09:02', '2019-12-22 23:09:02', '2020-12-22 18:09:02'),
('7a78b4858c8d099046ffe3c905f85dec8b4bf48a97db45fac0fac185dc5bbdecd5a5f8710c14813e', 8, 1, 'Personal Access Token', '[]', 0, '2020-06-14 11:38:37', '2020-06-14 11:38:37', '2021-06-14 07:38:37'),
('7ee7dde30184650740d81c2a1f3125a1530be84d9e89a17a192a0127570efc223e4e1f4a6f61cd8b', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-11 01:23:08', '2020-01-11 01:23:08', '2021-01-10 20:23:08'),
('8132f557119cb06931879032729e6190fc19326c43f81c4fcf819dd97d42925195a3059d03569242', 1, 1, 'MyApp', '[]', 0, '2019-12-13 02:01:07', '2019-12-13 02:01:07', '2020-12-12 21:01:07'),
('81b076caef723adb1dad14e965dfeb001f84701cff2e1f732526ed248a79ca10ebc836dbc79378cb', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-08 16:55:27', '2020-01-08 16:55:27', '2021-01-08 11:55:27'),
('84848d627b84a7148a01b0bfcd73aaf75f4fdd1d1e58cb5a43e63b770fbcad6b4e068cccec2480e7', 3, 1, 'Personal Access Token', '[]', 0, '2020-05-11 08:34:13', '2020-05-11 08:34:13', '2021-05-11 04:34:13'),
('8d788c64dab4ce518e3a516be3c412396df35961869df19cfeae412f2c7bf4905c74af40d266ec33', 13, 1, 'Personal Access Token', '[]', 0, '2020-01-13 12:47:02', '2020-01-13 12:47:02', '2021-01-13 07:47:02'),
('8edb8532aac2f42fbe0a973821b36afb3f08c8d7fdffce3c8742e70b47b7ee69d268ea575129e1db', 10, 1, 'Personal Access Token', '[]', 0, '2020-01-13 12:22:31', '2020-01-13 12:22:31', '2021-01-13 07:22:31'),
('90ce7d85988ceb9bf0cea4c81ee1f1a7009d6bb209f5629d3ac99cd7032c093c12f072beaa4308f6', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 12:18:03', '2020-01-13 12:18:03', '2021-01-13 07:18:03'),
('922547a7d76816c84f3c8f92515c1a85150dda1b83fc0dde1a2882c83521ebe1118d87422d7fda25', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-27 10:13:38', '2020-01-27 10:13:38', '2021-01-27 05:13:38'),
('9382f51ff8ea33fd2a7e3242aa971ee463e285066cd6931dc2870b9e6940c031d539118f0e0062d5', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-11 11:31:24', '2020-01-11 11:31:24', '2021-01-11 06:31:24'),
('94095a9521930c59009e32af029f7be812f031111828af4c9c6eee0879b746749a5eed10a82a1913', 3, 1, 'Personal Access Token', '[]', 0, '2020-05-11 10:02:52', '2020-05-11 10:02:52', '2021-05-11 06:02:52'),
('96eff74b4d61ab995a19c54e952f81cda723cd054feeeec9a2cca18a97b6cf22e5910cbfad523c12', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:20:47', '2019-12-17 14:20:47', '2020-12-17 09:20:47'),
('996a3a3dc652922a090c0d369ea9bfdd1df812a4027b7c69702d360fa1aa6396ad5c96a477670bf1', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-27 09:00:26', '2020-01-27 09:00:26', '2021-01-27 04:00:26'),
('9c591bb5a3b11ec1b9cf5ede1ee55d682bb5a9ab481bcffacbb8ff4e2a7e99e54598a0cf630df8cd', 1, 1, 'MyApp', '[]', 0, '2019-12-13 01:58:35', '2019-12-13 01:58:35', '2020-12-12 20:58:35'),
('9d6044e239af3142acffab49e5c747a46464230ba047ab7e94ae14c2a7e014fdc0aa54642da2cc17', 16, 1, 'Personal Access Token', '[]', 0, '2020-05-26 12:51:25', '2020-05-26 12:51:25', '2021-05-26 08:51:25'),
('9e505e9c2ddc5e3621b88a968dd0d261607fa6656ff693760d6e74b9cd377b255316c1dd3c0eb2a2', 3, 1, 'Personal Access Token', '[]', 0, '2020-05-11 09:10:47', '2020-05-11 09:10:47', '2021-05-11 05:10:47'),
('9e5be50bea393c456c5254ad45b4f6929e1220bb1437f6feb7127119fb3ddde13881ef3f50e07d61', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-17 17:02:19', '2020-01-17 17:02:19', '2021-01-17 12:02:19'),
('9fe7faab6c4c473afb0f6a73776a75d3898b4431f2030ed78b965ac8fd7d4d6224c8739be25f7e77', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-13 15:11:08', '2020-01-13 15:11:08', '2021-01-13 10:11:08'),
('a498f4cfa1d42152b5831a843c3d8c28ecc476b8384c9a99d294290d6bdc09f766fb115d899da413', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-22 11:14:00', '2019-12-22 11:14:00', '2020-12-22 06:14:00'),
('a7bc522c632d1b37500a1e2972eda4124a2680fd55f955fd0b6dc684257d1929276dad3c1338c254', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-06 17:49:39', '2020-01-06 17:49:39', '2021-01-06 12:49:39'),
('a8ac075f9d75ed40f599083259c19e8c409b6e89436b0723f07910090d06997ededa0b2e55731d5c', 12, 1, 'Personal Access Token', '[]', 0, '2020-01-13 12:24:18', '2020-01-13 12:24:18', '2021-01-13 07:24:18'),
('b160c486c90d306ad89739c40d58eceff26b55d75fa470797fb56b872f01683c7bca001c48b036fe', 11, 1, 'Personal Access Token', '[]', 0, '2020-01-13 12:23:43', '2020-01-13 12:23:43', '2021-01-13 07:23:43'),
('b19a40fc59e76b9c9e46dd5e7f9122b5537588b160bbb65a1f3cc9f775aba87a9202465148c8b20a', 9, 1, 'Personal Access Token', '[]', 0, '2019-12-17 18:16:42', '2019-12-17 18:16:42', '2020-12-17 13:16:42'),
('ba65ce9f2871150d8af9b79aa1cb0958e8f031819468f3ac4268ee858bd0329fb8438aec48897acd', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-22 13:41:37', '2020-01-22 13:41:37', '2021-01-22 08:41:37'),
('bcf30076dc3da45e5994ae55fc1554458ec6bf0be4f40d3131892fd0c95a2e9c080aa41f4ccb58ef', 3, 1, 'Personal Access Token', '[]', 0, '2020-02-14 14:12:02', '2020-02-14 14:12:02', '2021-02-14 09:12:02'),
('be223f22d6960819e01e9dc687cde9b30b63a672866252c5a4bc9cb441a3615b970b26322c3b0b9e', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:17:10', '2019-12-17 14:17:10', '2020-12-17 09:17:10'),
('bf2138847dc773cf32a2441d60358a0580f389272a0d43180e38fedfe7eef7f1dbd91472ca33a961', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-21 10:54:54', '2019-12-21 10:54:54', '2020-12-21 05:54:54'),
('c2d9d0ddd70d85a3dfb5a6a24c2221ec99c663b4059d18a1d278242f8b96929be0a0170211423253', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 14:57:09', '2020-01-13 14:57:09', '2021-01-13 09:57:09'),
('c36d23449549f6f6094c280dcbdf2c96ce6f5420eeeb8848f032fc71ff65b51adf490f1cdcb43c45', 3, 1, 'Personal Access Token', '[]', 0, '2020-05-11 10:32:38', '2020-05-11 10:32:38', '2021-05-11 06:32:38'),
('c3aae0bb72cf38197f11697cd96d21d3af7aebbcfa22eca1a2d7ec0d8fa39e7d9880bcf9a6128cc1', 21, 1, 'Personal Access Token', '[]', 0, '2020-05-17 19:14:22', '2020-05-17 19:14:22', '2021-05-17 15:14:22'),
('c4015c0e5c783769838141e267f27d2c79a41e39d03a031eba554a03c05157beee9eceb3383fa91f', 8, 1, 'Personal Access Token', '[]', 0, '2019-12-17 17:11:06', '2019-12-17 17:11:06', '2020-12-17 12:11:06'),
('c67a806261796733b627c8d6e1078f164da53f049609741b9deb187d95e3068ee233d85ee217b9d4', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:25:56', '2019-12-17 14:25:56', '2020-12-17 09:25:56'),
('c8a843b09c532904dc90aeb7648ef63d8c02e010170623fb3d00953ef495f25dfb225b49243c83d7', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-29 15:02:11', '2020-01-29 15:02:11', '2021-01-29 10:02:11'),
('c9ecb33c3791ab884eb0374ccedf52dcaf1bde5dbb031d1b53a38fd57eb0198625bb503f687694c1', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-29 10:59:40', '2020-01-29 10:59:40', '2021-01-29 05:59:40'),
('cc124758d9384fa660dd67fa4fa9bfd7880735d26e16c5644efbef4977e7c8769fed9b53da3ac386', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-11 14:21:55', '2020-01-11 14:21:55', '2021-01-11 09:21:55'),
('cfe6521ec4742c131cdd9ff22c5f3e80432d20188b9ccb1eb2ca1ca766f3c259d98439aea402a4a2', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-21 22:03:35', '2019-12-21 22:03:35', '2020-12-21 17:03:35'),
('d0b77240aecf095f5378bdaeb962f81a0bdd94b8f13df0beedb70bb0f000ab80ff6db654ddcf0d6b', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-29 09:36:26', '2020-01-29 09:36:26', '2021-01-29 04:36:26'),
('d956a85842e9418b022ffbafffc350003e20f93d02abc2e3fcadf29ee020f4970ceb82f3c024938e', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 21:53:20', '2020-01-13 21:53:20', '2021-01-13 16:53:20'),
('d970ddd2e187046c26dd8de131644ed6e5b12b85097b0b9b986f147304830559a86a262be433d2f1', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-11 02:20:29', '2020-01-11 02:20:29', '2021-01-10 21:20:29'),
('e098f6de809b18f38a4f6d624880d430e218de3922c027dcc63c273348c6a71ffa5a64cf12372816', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-12 17:32:38', '2020-01-12 17:32:38', '2021-01-12 12:32:38'),
('e35dd013b4dcec5eb17ecbd66b4d53eb727a026dbac10241896ff52278fa6ac020868a5a5c80b917', 8, 1, 'Personal Access Token', '[]', 0, '2020-02-06 14:31:55', '2020-02-06 14:31:55', '2021-02-06 09:31:55'),
('e51a0fdac6b5ef3627dbe7675bd81fb72ad499c30ac6d67897624692aa916111bb72d0eaac7fea14', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-03 10:37:43', '2020-01-03 10:37:43', '2021-01-03 05:37:43'),
('e619b7a69d6de4a6062b57128979721b187876a60b21c5b765303269b0d6a6568765a87805dc0bef', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:20:20', '2019-12-17 14:20:20', '2020-12-17 09:20:20'),
('e84655298457721afb7e2481e756e89b3b347bb9ae1d5fd8cf6ab534a289e7132e02f665ec67bca2', 3, 1, 'Personal Access Token', '[]', 0, '2020-02-04 10:14:02', '2020-02-04 10:14:02', '2021-02-04 05:14:02'),
('ebf2e95cbb681800f6aad5617138e704c656798fd0140f8ba560a61b0c8b346cbda1e94f6eb15592', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-14 01:01:23', '2020-01-14 01:01:23', '2021-01-13 20:01:23'),
('eda4e33c1d35e42d4f1354cfe9083d0687561c6dd80a0b6f487f0e88dffc0b27f84e2f3fee650d6f', 4, 1, 'Personal Access Token', '[]', 0, '2019-12-17 18:22:02', '2019-12-17 18:22:02', '2020-12-17 13:22:02'),
('ee5c920ee355311165de5d1ab12281a577358482150e816acdc9f4961297ff5dea832622c21668c3', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-13 14:44:47', '2020-01-13 14:44:47', '2021-01-13 09:44:47'),
('eed38a339709e4a09dda45c7e423793bd67cc94bd5878f236a7f266e9ae416eb438816408c0ed396', 3, 1, 'Personal Access Token', '[]', 0, '2020-01-18 18:54:24', '2020-01-18 18:54:24', '2021-01-18 13:54:24'),
('f296b480697a84863c9f4e1292e83083c2d05101e3fc979f0433103366cbdef64ab43030a53274e1', 8, 1, 'Personal Access Token', '[]', 0, '2020-03-03 12:54:32', '2020-03-03 12:54:32', '2021-03-03 07:54:32'),
('f524c83d8e25f0f2e70936e29cb964a77d2085664d76bc573e6b7f45d2f3ff5d19431641ad3e9f72', 3, 1, 'Personal Access Token', '[]', 0, '2020-02-04 10:20:37', '2020-02-04 10:20:37', '2021-02-04 05:20:37'),
('f8a288d660937d410391f43943818e54420a0e89b04dc84ec3e8c890e2796e1f1970416ad8da20d2', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-21 18:22:31', '2019-12-21 18:22:31', '2020-12-21 13:22:31'),
('fa59a0e952729df9bc7b943ddc3667e3fea6a8e5a99be4838c5745d6a89d9e27074300ffe953fbf3', 7, 1, 'Personal Access Token', '[]', 0, '2019-12-17 16:08:15', '2019-12-17 16:08:15', '2020-12-17 11:08:15'),
('fab129514fe433f34d2b25a0cc413dd2155705a88e4a9f0a8f0bd4be1dc1dda3b32bfe26823fe9a8', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 17:07:19', '2019-12-17 17:07:19', '2020-12-17 12:07:19'),
('fbb5aa6f2b1896c7409dc21b4ac00b85d571c6dc753eee85407f3dca4c4f95579911dd881cea16fe', 8, 1, 'Personal Access Token', '[]', 0, '2020-01-10 00:22:03', '2020-01-10 00:22:03', '2021-01-09 19:22:03'),
('fbb6978e1da441a2fc26996054ddd62568d4fe2e344b0805af093dd782925842e276349284af179f', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-14 19:28:08', '2019-12-14 19:28:08', '2020-12-14 14:28:08'),
('fca4e23a4ebfe1a3458189eaff6e6d44df5003996100b1808377292688e80be41f4623086e0c8f1d', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 14:19:49', '2019-12-17 14:19:49', '2020-12-17 09:19:49'),
('ff2042221a875fa019e9cfcca24bfbe123a35503472364195b92b2fde355d2f0ff255ddc0ba2e579', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-17 20:18:07', '2019-12-17 20:18:07', '2020-12-17 15:18:07'),
('ffe6d4ba784f1d5219b604b9a3b493d0aa2e31c1ff75ecec83e0198ca2191dbedd8f70e6cc41e50c', 3, 1, 'Personal Access Token', '[]', 0, '2019-12-14 19:22:06', '2019-12-14 19:22:06', '2020-12-14 14:22:06');

-- --------------------------------------------------------

--
-- Table structure for table `oauth_auth_codes`
--

CREATE TABLE IF NOT EXISTS `oauth_auth_codes` (
  `id` varchar(100) COLLATE utf8_unicode_ci  NOT NULL,
  `user_id` bigint(20) NOT NULL,
  `client_id` int(10) unsigned NOT NULL,
  `scopes` text COLLATE utf8_unicode_ci  DEFAULT NULL,
  `revoked` tinyint(1) NOT NULL,
  `expires_at` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `oauth_clients`
--

CREATE TABLE IF NOT EXISTS `oauth_clients` (
  `id` int(10) unsigned NOT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `secret` varchar(100) COLLATE utf8_unicode_ci  DEFAULT NULL,
  `redirect` text COLLATE utf8_unicode_ci  NOT NULL,
  `personal_access_client` tinyint(1) NOT NULL,
  `password_client` tinyint(1) NOT NULL,
  `revoked` tinyint(1) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `oauth_clients`
--

INSERT INTO `oauth_clients` (`id`, `user_id`, `name`, `secret`, `redirect`, `personal_access_client`, `password_client`, `revoked`, `created_at`, `updated_at`) VALUES
(1, NULL, 'AppNupustaka Personal Access Client', 'QxoSiJT6QMSb1iaQj8l2LFb9NlSP7M1OhYd0OLP4', 'http://localhost', 1, 0, 0, '2019-12-13 01:44:28', '2019-12-13 01:44:28'),
(2, NULL, 'AppNupustaka Password Grant Client', 'Cro6rUUGfuccKHgxQSZ2ThDRzvAJOIDvrohALGqF', 'http://localhost', 0, 1, 0, '2019-12-13 01:44:28', '2019-12-13 01:44:28');

-- --------------------------------------------------------

--
-- Table structure for table `oauth_personal_access_clients`
--

CREATE TABLE IF NOT EXISTS `oauth_personal_access_clients` (
  `id` int(10) unsigned NOT NULL,
  `client_id` int(10) unsigned NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `oauth_personal_access_clients`
--

INSERT INTO `oauth_personal_access_clients` (`id`, `client_id`, `created_at`, `updated_at`) VALUES
(1, 1, '2019-12-13 01:44:28', '2019-12-13 01:44:28');

-- --------------------------------------------------------

--
-- Table structure for table `oauth_refresh_tokens`
--

CREATE TABLE IF NOT EXISTS `oauth_refresh_tokens` (
  `id` varchar(100) COLLATE utf8_unicode_ci  NOT NULL,
  `access_token_id` varchar(100) COLLATE utf8_unicode_ci  NOT NULL,
  `revoked` tinyint(1) NOT NULL,
  `expires_at` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `password_resets`
--

CREATE TABLE IF NOT EXISTS `password_resets` (
  `email` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `token` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `permissions`
--

CREATE TABLE IF NOT EXISTS `permissions` (
  `id` bigint(20) unsigned NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `guard_name` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `roles`
--

CREATE TABLE IF NOT EXISTS `roles` (
  `id` bigint(20) unsigned NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `guard_name` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `role_has_permissions`
--

CREATE TABLE IF NOT EXISTS `role_has_permissions` (
  `permission_id` bigint(20) unsigned NOT NULL,
  `role_id` bigint(20) unsigned NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

-- --------------------------------------------------------

--
-- Table structure for table `transactions`
--

CREATE TABLE IF NOT EXISTS `transactions` (
  `id` bigint(20) unsigned NOT NULL,
  `user_id` int(11) NOT NULL,
  `book_id` int(11) NOT NULL,
  `status` enum('beli','pinjam','sewa') COLLATE utf8_unicode_ci  NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `expired_at` date DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `transactions`
--

INSERT INTO `transactions` (`id`, `user_id`, `book_id`, `status`, `created_at`, `updated_at`, `expired_at`) VALUES
(1, 3, 2, 'pinjam', '2020-01-18 09:14:44', '2020-01-18 09:14:44', '2020-01-25'),
(2, 3, 2, 'sewa', '2020-01-31 10:09:59', '2020-01-31 10:09:59', '2020-02-07'),
(3, 8, 1, 'pinjam', '2020-02-10 13:04:26', '2020-02-10 13:04:26', '2020-02-17'),
(4, 8, 1, 'pinjam', '2020-02-10 13:04:41', '2020-02-10 13:04:41', '2020-02-17'),
(5, 3, 1, 'pinjam', '2020-02-14 14:12:32', '2020-02-14 14:12:32', '2020-02-21'),
(6, 3, 4, 'pinjam', '2020-02-14 15:45:51', '2020-02-14 15:45:51', '2020-02-21'),
(7, 3, 6, 'pinjam', '2020-05-11 09:06:18', '2020-05-11 09:06:18', '2020-05-18'),
(8, 3, 3, 'beli', '2020-05-11 09:42:43', '2020-05-11 09:42:43', NULL),
(9, 3, 2, 'sewa', '2020-05-11 10:26:38', '2020-05-11 10:26:38', '2020-05-18'),
(10, 3, 1, 'sewa', '2020-05-11 10:33:16', '2020-05-11 10:33:16', '2020-05-18'),
(11, 17, 10, 'pinjam', '2020-05-11 12:20:30', '2020-05-11 12:20:30', '2020-05-18'),
(12, 16, 2, 'sewa', '2020-05-22 16:00:04', '2020-05-22 16:00:04', '2020-05-29'),
(13, 3, 4, 'sewa', '2020-05-22 16:22:24', '2020-05-22 16:22:24', '2020-05-29'),
(14, 16, 1, 'sewa', '2020-05-26 12:55:19', '2020-05-26 12:55:19', '2020-06-02'),
(15, 17, 1, 'sewa', '2020-07-23 08:26:10', '2020-07-23 08:26:10', '2020-07-30'),
(16, 17, 2, 'sewa', '2020-07-23 08:26:31', '2020-07-23 08:26:31', '2020-07-30');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` bigint(20) unsigned NOT NULL,
  `name` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `remember_token` varchar(100) COLLATE utf8_unicode_ci  DEFAULT NULL,
  `phone` varchar(255) COLLATE utf8_unicode_ci  DEFAULT 'NULL',
  `token` int(11) DEFAULT 0,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `email_verified_at`, `password`, `remember_token`, `phone`, `token`, `created_at`, `updated_at`) VALUES
(1, 'Tahta', 'tahta@hamura.co', NULL, '$2y$10$drHtYsQM4niFytULuoElZOsHrgjhdNTuGD/D0oH9NOVPg00bpVc8y', NULL, NULL, 1000, '2019-12-13 02:03:04', '2020-05-11 08:00:24'),
(3, 'Khairur Rijal Islami', 'rizal@hamura.co', NULL, '$2y$10$8cXC8F2LKkYhPVINvl.2GOIFnlxTh6Ea2z9b7/6ugj.xbLbbmu1Ci', NULL, NULL, 1924, '2019-12-14 19:19:44', '2020-05-22 16:22:24'),
(4, 'Tahta', 'tahta@gmail.com', NULL, '$2y$10$2TKxw07.VqwVvQ2LalGh8upKdrIm6BHJExIsI.5Hb05pCOqzMpgmq', NULL, NULL, 0, '2019-12-17 16:02:49', '2019-12-17 16:02:49'),
(5, 'Dion', 'dion@hamura.co', NULL, '$2y$10$59Sctvxr/ofQwnlu.Wbf2O.vOmMuvzg6QONkOfgw.gWk5LGpWizh2', NULL, NULL, 0, '2019-12-17 16:04:40', '2019-12-17 16:04:40'),
(6, 'Anto Simatupang', 'anto@gmail.com', NULL, '$2y$10$AUNTH0TxaFZswe76XpR0l.aqIqsCnvfyVHDOoJirqanxWH/aN3pP6', NULL, NULL, 0, '2019-12-17 16:05:36', '2019-12-17 16:05:36'),
(7, 'anto', 'anto@anto.com', NULL, '$2y$10$3gxYHex96UaGJ6oePgAIAelLXAgM97JsQARcZ0TspJ244tWa9D94y', NULL, NULL, 0, '2019-12-17 16:07:53', '2019-12-17 16:07:53'),
(8, 'Alamsyah Catur', 'alamsyahcth@gmail.com', NULL, '$2y$10$9AFltWAYQLLDE3DfgjeDAeclO5Lkrv4TF4t7qo84G.Pyx0pLAl9ny', NULL, NULL, 4962, '2019-12-17 17:10:52', '2020-02-10 13:04:41'),
(9, 'Dela Renca', 'Dela@hamura.co', NULL, '$2y$10$SboD8cAyIF1AHpFYrQ3VFuGMTzgh5QPMZTd8WT1RAE2oKG4Vavxha', NULL, NULL, 0, '2019-12-17 18:16:32', '2019-12-17 18:16:32'),
(10, 'Sony', 'Sony.h234@gmail.com', NULL, '$2y$10$9vXFS3DYRiAi5ldtZ0Mloe88W/JJHiFSnutvV9YRBhVvi2GemqUKm', NULL, 'NULL', 0, '2020-01-13 12:22:18', '2020-01-13 12:22:18'),
(12, 'Tahta', 'acthdesign@gmail.com', NULL, '$2y$10$F1dq5lAlL1nu2xWfFmI6iOWmrILxUuNkeFh/l/oRw52NpeMQGwMHS', NULL, 'NULL', 0, '2020-01-13 12:24:00', '2020-01-13 12:24:00'),
(14, 'John', 'john@example.org', NULL, '$2y$10$M1p4xSalys4X7MubIOnE.etLdHUHypFQWocABkn/AprufDIPdVXGi', NULL, 'NULL', 0, '2020-01-13 22:45:15', '2020-01-13 22:45:15'),
(15, 'admin', 'admin@gmail.com', NULL, '$2y$10$P1yDs//RuksjPHuKCtWnf.RzcxbHY/cczMAUGYsBnaZyG/LaIJ5sm', NULL, 'NULL', 0, '2020-03-04 12:36:32', '2020-03-04 12:36:32'),
(16, 'Administrator', 'admin@hamura.co', NULL, '$2y$10$89YZBcxci2hrLI15x8KhpeKLyg6fDsV1PRoMLCyi5F0sC038WS6IO', NULL, 'NULL', 992, '2020-05-11 08:53:43', '2020-05-26 12:55:19'),
(17, 'MAZ', 'maz@maz.web.id', NULL, '$2y$10$Gw.TIF.Kv3J.e0rNOEK/3.BxNpMWwgwsq7nymtZNH4WLHDIv298uO', NULL, 'NULL', 990, '2020-05-11 12:14:53', '2020-07-23 08:26:31'),
(18, 'Aan Rahman', 'aan.rahman2000@gmail.com', NULL, '$2y$10$S9nqy6gMaU0/bDvhEhNijeFESOwiQZwSThzygeb9E.U59H3KecN1e', NULL, 'NULL', 0, '2020-05-12 00:53:36', '2020-05-12 00:53:36'),
(19, 'sgeng widiarto', 'sugengwidiarto96@gmail.com', NULL, '$2y$10$aMNDnPT6zd25HgghXhYwi.APjbloYkZBjZuNRpWc4HzMiYLLLVspi', NULL, 'NULL', 0, '2020-05-12 09:40:40', '2020-05-12 09:40:40'),
(20, 'Ssrwono Kusumo Bawono', 'sarwono.k.bawono@gmail.com', NULL, '$2y$10$yMvBB8zrNedsEud/SHO4Y.Rh6E8rghllIxw46YrSfxR5BAJMqIo9G', NULL, 'NULL', 0, '2020-05-13 00:29:00', '2020-05-13 00:29:00'),
(21, 'Mutia Kartika', 'mutia@maz.web.id', NULL, '$2y$10$bQsSH4z.qXDALKqv5/Jx8e.ACw53.jTqUkRFGBidwpj0TAQZzZ2We', NULL, 'NULL', 0, '2020-05-17 19:13:45', '2020-05-17 19:13:45');

-- --------------------------------------------------------

--
-- Table structure for table `vouchers`
--

CREATE TABLE IF NOT EXISTS `vouchers` (
  `id` bigint(20) unsigned NOT NULL,
  `user_id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8_unicode_ci  NOT NULL,
  `code` varchar(20) COLLATE utf8_unicode_ci  NOT NULL,
  `used` varchar(50) COLLATE utf8_unicode_ci  NOT NULL,
  `token_amount` int(11) NOT NULL,
  `expired_at` date NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `vouchers`
--

INSERT INTO `vouchers` (`id`, `user_id`, `title`, `code`, `used`, `token_amount`, `expired_at`, `created_at`, `updated_at`) VALUES
(1, 3, 'Voucher Token', 'VOUCHERTOKEN', '10', 1000, '2020-01-10', NULL, NULL);

-- --------------------------------------------------------

--
-- Table structure for table `wishlists`
--

CREATE TABLE IF NOT EXISTS `wishlists` (
  `id` bigint(20) unsigned NOT NULL,
  `user_id` int(11) NOT NULL,
  `book_id` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB AUTO_INCREMENT=63 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ;

--
-- Dumping data for table `wishlists`
--

INSERT INTO `wishlists` (`id`, `user_id`, `book_id`, `created_at`, `updated_at`) VALUES
(34, 3, 6, '2020-01-13 02:57:38', '2020-01-13 02:57:38'),
(37, 8, 10, '2020-01-13 15:11:40', '2020-01-13 15:11:40'),
(38, 8, 3, '2020-01-13 15:15:25', '2020-01-13 15:15:25'),
(39, 3, 12, '2020-01-15 23:20:09', '2020-01-15 23:20:09'),
(44, 3, 13, '2020-01-20 17:00:24', '2020-01-20 17:00:24'),
(48, 3, 10, '2020-01-30 23:13:13', '2020-01-30 23:13:13'),
(52, 8, 12, '2020-02-07 12:56:22', '2020-02-07 12:56:22'),
(56, 8, 1, '2020-02-10 11:53:20', '2020-02-10 11:53:20'),
(57, 3, 5, '2020-02-14 14:49:11', '2020-02-14 14:49:11'),
(58, 8, 2, '2020-02-14 19:26:02', '2020-02-14 19:26:02'),
(60, 3, 1, '2020-05-22 15:35:54', '2020-05-22 15:35:54'),
(61, 3, 2, '2020-05-22 16:23:21', '2020-05-22 16:23:21');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `books`
--
ALTER TABLE `books`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `book_categories`
--
ALTER TABLE `book_categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `book_displays`
--
ALTER TABLE `book_displays`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `chats`
--
ALTER TABLE `chats`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `chat_messages`
--
ALTER TABLE `chat_messages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `chat_messages_chat_id_foreign` (`chat_id`),
  ADD KEY `chat_messages_user_id_foreign` (`user_id`);

--
-- Indexes for table `chat_user`
--
ALTER TABLE `chat_user`
  ADD PRIMARY KEY (`chat_id`,`user_id`),
  ADD KEY `chat_user_user_id_foreign` (`user_id`);

--
-- Indexes for table `displays`
--
ALTER TABLE `displays`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `filedetails`
--
ALTER TABLE `filedetails`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `filepages`
--
ALTER TABLE `filepages`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `model_has_permissions`
--
ALTER TABLE `model_has_permissions`
  ADD PRIMARY KEY (`permission_id`,`model_id`,`model_type`),
  ADD KEY `model_has_permissions_model_id_model_type_index` (`model_id`,`model_type`);

--
-- Indexes for table `model_has_roles`
--
ALTER TABLE `model_has_roles`
  ADD PRIMARY KEY (`role_id`,`model_id`,`model_type`),
  ADD KEY `model_has_roles_model_id_model_type_index` (`model_id`,`model_type`);

--
-- Indexes for table `oauth_access_tokens`
--
ALTER TABLE `oauth_access_tokens`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_access_tokens_user_id_index` (`user_id`);

--
-- Indexes for table `oauth_auth_codes`
--
ALTER TABLE `oauth_auth_codes`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `oauth_clients`
--
ALTER TABLE `oauth_clients`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_clients_user_id_index` (`user_id`);

--
-- Indexes for table `oauth_personal_access_clients`
--
ALTER TABLE `oauth_personal_access_clients`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_personal_access_clients_client_id_index` (`client_id`);

--
-- Indexes for table `oauth_refresh_tokens`
--
ALTER TABLE `oauth_refresh_tokens`
  ADD PRIMARY KEY (`id`),
  ADD KEY `oauth_refresh_tokens_access_token_id_index` (`access_token_id`);

--
-- Indexes for table `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- Indexes for table `permissions`
--
ALTER TABLE `permissions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `roles`
--
ALTER TABLE `roles`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `role_has_permissions`
--
ALTER TABLE `role_has_permissions`
  ADD PRIMARY KEY (`permission_id`,`role_id`),
  ADD KEY `role_has_permissions_role_id_foreign` (`role_id`);

--
-- Indexes for table `transactions`
--
ALTER TABLE `transactions`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`);

--
-- Indexes for table `vouchers`
--
ALTER TABLE `vouchers`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `wishlists`
--
ALTER TABLE `wishlists`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `books`
--
ALTER TABLE `books`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=14;
--
-- AUTO_INCREMENT for table `book_categories`
--
ALTER TABLE `book_categories`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `book_displays`
--
ALTER TABLE `book_displays`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=11;
--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=15;
--
-- AUTO_INCREMENT for table `chats`
--
ALTER TABLE `chats`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `chat_messages`
--
ALTER TABLE `chat_messages`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `displays`
--
ALTER TABLE `displays`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `failed_jobs`
--
ALTER TABLE `failed_jobs`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `filedetails`
--
ALTER TABLE `filedetails`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `filepages`
--
ALTER TABLE `filepages`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=896;
--
-- AUTO_INCREMENT for table `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=87;
--
-- AUTO_INCREMENT for table `oauth_clients`
--
ALTER TABLE `oauth_clients`
  MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=3;
--
-- AUTO_INCREMENT for table `oauth_personal_access_clients`
--
ALTER TABLE `oauth_personal_access_clients`
  MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `permissions`
--
ALTER TABLE `permissions`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `roles`
--
ALTER TABLE `roles`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT;
--
-- AUTO_INCREMENT for table `transactions`
--
ALTER TABLE `transactions`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=17;
--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=22;
--
-- AUTO_INCREMENT for table `vouchers`
--
ALTER TABLE `vouchers`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `wishlists`
--
ALTER TABLE `wishlists`
  MODIFY `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=63;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `chat_messages`
--
ALTER TABLE `chat_messages`
  ADD CONSTRAINT `chat_messages_chat_id_foreign` FOREIGN KEY (`chat_id`) REFERENCES `chats` (`id`),
  ADD CONSTRAINT `chat_messages_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);

--
-- Constraints for table `chat_user`
--
ALTER TABLE `chat_user`
  ADD CONSTRAINT `chat_user_chat_id_foreign` FOREIGN KEY (`chat_id`) REFERENCES `chats` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `chat_user_user_id_foreign` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints for table `model_has_permissions`
--
ALTER TABLE `model_has_permissions`
  ADD CONSTRAINT `model_has_permissions_permission_id_foreign` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE;

--
-- Constraints for table `model_has_roles`
--
ALTER TABLE `model_has_roles`
  ADD CONSTRAINT `model_has_roles_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE;

--
-- Constraints for table `role_has_permissions`
--
ALTER TABLE `role_has_permissions`
  ADD CONSTRAINT `role_has_permissions_permission_id_foreign` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `role_has_permissions_role_id_foreign` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
